{
 "Resources": {
  "demographqlapi0F654CF4": {
   "Type": "AWS::AppSync::GraphQLApi",
   "Properties": {
    "AuthenticationType": "API_KEY",
    "Name": "demographql-api"
   },
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demographql-api/Resource"
   }
  },
  "demographqlapiSchemaECD6D8C4": {
   "Type": "AWS::AppSync::GraphQLSchema",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "Definition": "\nenum TodoStatusEnum {\n  New\n  Active\n  Complete\n  Deleted\n}\n\ntype TodoTask @aws_api_key {\n  id: String\n  completedDate: AWSDateTime\n  status: TodoStatusEnum\n  createdAt: AWSDateTime!\n  updatedAt: AWSDateTime!\n}\n\ninput ModelStringInput {\n  ne: String\n  eq: String\n  le: String\n  lt: String\n  ge: String\n  gt: String\n  contains: String\n  notContains: String\n  between: [String]\n  beginsWith: String\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n  size: ModelSizeInput\n}\n\ninput ModelIntInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  between: [Int]\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n}\n\ninput ModelFloatInput {\n  ne: Float\n  eq: Float\n  le: Float\n  lt: Float\n  ge: Float\n  gt: Float\n  between: [Float]\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n}\n\ninput ModelBooleanInput {\n  ne: Boolean\n  eq: Boolean\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n}\n\ninput ModelIDInput {\n  ne: ID\n  eq: ID\n  le: ID\n  lt: ID\n  ge: ID\n  gt: ID\n  contains: ID\n  notContains: ID\n  between: [ID]\n  beginsWith: ID\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n  size: ModelSizeInput\n}\n\ninput ModelSubscriptionStringInput {\n  ne: String\n  eq: String\n  le: String\n  lt: String\n  ge: String\n  gt: String\n  contains: String\n  notContains: String\n  between: [String]\n  beginsWith: String\n  in: [String]\n  notIn: [String]\n}\n\ninput ModelSubscriptionIntInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  between: [Int]\n  in: [Int]\n  notIn: [Int]\n}\n\ninput ModelSubscriptionFloatInput {\n  ne: Float\n  eq: Float\n  le: Float\n  lt: Float\n  ge: Float\n  gt: Float\n  between: [Float]\n  in: [Float]\n  notIn: [Float]\n}\n\ninput ModelSubscriptionBooleanInput {\n  ne: Boolean\n  eq: Boolean\n}\n\ninput ModelSubscriptionIDInput {\n  ne: ID\n  eq: ID\n  le: ID\n  lt: ID\n  ge: ID\n  gt: ID\n  contains: ID\n  notContains: ID\n  between: [ID]\n  beginsWith: ID\n  in: [ID]\n  notIn: [ID]\n}\n\nenum ModelAttributeTypes {\n  binary\n  binarySet\n  bool\n  list\n  map\n  number\n  numberSet\n  string\n  stringSet\n  _null\n}\n\ninput ModelSizeInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  between: [Int]\n}\n\nenum ModelSortDirection {\n  ASC\n  DESC\n}\n\ntype ModelTodoTaskConnection {\n  items: [TodoTask]!\n  nextToken: String\n}\n\ninput ModelTodoStatusEnumInput {\n  eq: TodoStatusEnum\n  ne: TodoStatusEnum\n}\n\ninput ModelTodoTaskFilterInput {\n  id: ModelStringInput\n  completedDate: ModelStringInput\n  status: ModelTodoStatusEnumInput\n  and: [ModelTodoTaskFilterInput]\n  or: [ModelTodoTaskFilterInput]\n  not: ModelTodoTaskFilterInput\n}\n\ntype Query {\n  getTodoTask(id: ID!): TodoTask\n  listTodoTasks(filter: ModelTodoTaskFilterInput, limit: Int, nextToken: String): ModelTodoTaskConnection\n}\n\ninput ModelTodoTaskConditionInput {\n  id: ModelStringInput\n  completedDate: ModelStringInput\n  status: ModelTodoStatusEnumInput\n  and: [ModelTodoTaskConditionInput]\n  or: [ModelTodoTaskConditionInput]\n  not: ModelTodoTaskConditionInput\n}\n\ninput CreateTodoTaskInput {\n  id: String\n  completedDate: AWSDateTime\n  status: TodoStatusEnum\n}\n\ninput UpdateTodoTaskInput {\n  id: String!\n  completedDate: AWSDateTime\n  status: TodoStatusEnum\n}\n\ninput DeleteTodoTaskInput {\n  id: ID!\n}\n\ntype Mutation {\n  createTodoTask(input: CreateTodoTaskInput!, condition: ModelTodoTaskConditionInput): TodoTask\n  updateTodoTask(input: UpdateTodoTaskInput!, condition: ModelTodoTaskConditionInput): TodoTask\n  deleteTodoTask(input: DeleteTodoTaskInput!, condition: ModelTodoTaskConditionInput): TodoTask\n}\n\ninput ModelSubscriptionTodoTaskFilterInput {\n  id: ModelSubscriptionStringInput\n  completedDate: ModelSubscriptionStringInput\n  status: ModelSubscriptionStringInput\n  and: [ModelSubscriptionTodoTaskFilterInput]\n  or: [ModelSubscriptionTodoTaskFilterInput]\n}\n\ntype Subscription {\n  onCreateTodoTask(filter: ModelSubscriptionTodoTaskFilterInput): TodoTask @aws_subscribe(mutations: [\"createTodoTask\"])\n  onUpdateTodoTask(filter: ModelSubscriptionTodoTaskFilterInput): TodoTask @aws_subscribe(mutations: [\"updateTodoTask\"])\n  onDeleteTodoTask(filter: ModelSubscriptionTodoTaskFilterInput): TodoTask @aws_subscribe(mutations: [\"deleteTodoTask\"])\n}\n\n"
   },
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demographql-api/Schema"
   }
  },
  "demographqlapiDefaultApiKeyCED2CDFB": {
   "Type": "AWS::AppSync::ApiKey",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "Description": "Default API key.",
    "Expires": 1691706609
   },
   "DependsOn": [
    "demographqlapiSchemaECD6D8C4"
   ],
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demographql-api/DefaultApiKey"
   }
  },
  "demographqlapiNONE1C8C7994": {
   "Type": "AWS::AppSync::DataSource",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "Name": "NONE",
    "Type": "NONE"
   },
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demographql-api/NONE/Resource"
   }
  },
  "demographqlapidemotodotaskdatasourceServiceRole05BD8B12": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "appsync.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demographql-api/demo-todo-task-data-source/ServiceRole/Resource"
   }
  },
  "demographqlapidemotodotaskdatasourceServiceRoleDefaultPolicy437A4A62": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "demotodotasktableEB90FD6F",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "demographqlapidemotodotaskdatasourceServiceRoleDefaultPolicy437A4A62",
    "Roles": [
     {
      "Ref": "demographqlapidemotodotaskdatasourceServiceRole05BD8B12"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demographql-api/demo-todo-task-data-source/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "demographqlapidemotodotaskdatasource2612A9E7": {
   "Type": "AWS::AppSync::DataSource",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "Name": "TodoTaskDataSource",
    "Type": "AMAZON_DYNAMODB",
    "Description": "TodoTaskDataSource",
    "DynamoDBConfig": {
     "AwsRegion": {
      "Ref": "AWS::Region"
     },
     "TableName": {
      "Ref": "demotodotasktableEB90FD6F"
     }
    },
    "ServiceRoleArn": {
     "Fn::GetAtt": [
      "demographqlapidemotodotaskdatasourceServiceRole05BD8B12",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demographql-api/demo-todo-task-data-source/Resource"
   }
  },
  "demotodotasktableEB90FD6F": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "KeySchema": [
     {
      "AttributeName": "id",
      "KeyType": "HASH"
     }
    ],
    "AttributeDefinitions": [
     {
      "AttributeName": "id",
      "AttributeType": "S"
     }
    ],
    "ProvisionedThroughput": {
     "ReadCapacityUnits": 5,
     "WriteCapacityUnits": 5
    },
    "TableName": "demo-todo-task-table"
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demo-todo-task-table/Resource"
   }
  },
  "demoquerygettodotaskpostauth0function72EBEE8E": {
   "Type": "AWS::AppSync::FunctionConfiguration",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "DataSourceName": "NONE",
    "FunctionVersion": "2018-05-29",
    "Name": "QuerygetTodoTaskpostAuth0Function",
    "RequestMappingTemplate": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "ResponseMappingTemplate": "$util.toJson({})"
   },
   "DependsOn": [
    "demographqlapiNONE1C8C7994",
    "demographqlapiSchemaECD6D8C4"
   ],
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demo-queryget-todo-taskpost-auth0-function/Resource"
   }
  },
  "demoquerygettodotaskdataresolverfnE6BF4BF8": {
   "Type": "AWS::AppSync::FunctionConfiguration",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "DataSourceName": "TodoTaskDataSource",
    "FunctionVersion": "2018-05-29",
    "Name": "QueryGetTodoTaskDataResolverFn",
    "RequestMappingTemplate": "## [Start] Get Request template. **\n#set( $GetRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"Query\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $expression = \"\" )\n  #set( $expressionNames = {} )\n  #set( $expressionValues = {} )\n  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    #set( $expression = \"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \" )\n    $util.qr($expressionNames.put(\"#keyCount$velocityCount\", $item.key))\n    $util.qr($expressionValues.put(\":valueCount$velocityCount\", $item.value))\n  #end\n  #set( $expression = $expression.replaceAll(\"AND $\", \"\") )\n  #set( $query = {\n  \"expression\": $expression,\n  \"expressionNames\": $expressionNames,\n  \"expressionValues\": $expressionValues\n} )\n#else\n  #set( $query = {\n  \"expression\": \"id = :id\",\n  \"expressionValues\": {\n      \":id\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))\n  }\n} )\n#end\n$util.qr($GetRequest.put(\"query\", $query))\n#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n  $util.qr($GetRequest.put(\"filter\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))\n#end\n$util.toJson($GetRequest)\n## [End] Get Request template. **",
    "ResponseMappingTemplate": "## [Start] Get Response template. **\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#end\n#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )\n  $util.toJson($ctx.result.items[0])\n#else\n  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )\n$util.unauthorized()\n  #end\n  $util.toJson(null)\n#end\n## [End] Get Response template. **"
   },
   "DependsOn": [
    "demographqlapidemotodotaskdatasource2612A9E7",
    "demographqlapiSchemaECD6D8C4"
   ],
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demo-query-get-todo-task-data-resolver-fn/Resource"
   }
  },
  "demoquerylisttodotasksdataresolverfnF2669A16": {
   "Type": "AWS::AppSync::FunctionConfiguration",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "DataSourceName": "TodoTaskDataSource",
    "FunctionVersion": "2018-05-29",
    "Name": "QueryListTodoTasksDataResolverFn",
    "RequestMappingTemplate": "## [Start] List Request. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n#set( $limit = $util.defaultIfNull($args.limit, 100) )\n#set( $ListRequest = {\n  \"version\": \"2018-05-29\",\n  \"limit\": $limit\n} )\n#if( $args.nextToken )\n  #set( $ListRequest.nextToken = $args.nextToken )\n#end\n#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n  #set( $filter = $ctx.stash.authFilter )\n  #if( !$util.isNullOrEmpty($args.filter) )\n    #set( $filter = {\n  \"and\":   [$filter, $args.filter]\n} )\n  #end\n#else\n  #if( !$util.isNullOrEmpty($args.filter) )\n    #set( $filter = $args.filter )\n  #end\n#end\n#if( !$util.isNullOrEmpty($filter) )\n  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )\n  #if( $util.isNullOrEmpty($filterExpression) )\n    $util.error(\"Unable to process the filter expression\", \"Unrecognized Filter\")\n  #end\n  #if( !$util.isNullOrBlank($filterExpression.expression) )\n    #if( $filterExpression.expressionValues.size() == 0 )\n      $util.qr($filterExpression.remove(\"expressionValues\"))\n    #end\n    #set( $ListRequest.filter = $filterExpression )\n  #end\n#end\n#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"query\", $ctx.stash.modelQueryExpression))\n  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \"DESC\" )\n    #set( $ListRequest.scanIndexForward = false )\n  #else\n    #set( $ListRequest.scanIndexForward = true )\n  #end\n#else\n  $util.qr($ListRequest.put(\"operation\", \"Scan\"))\n#end\n#if( !$util.isNull($ctx.stash.metadata.index) )\n  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )\n#end\n$util.toJson($ListRequest)\n## [End] List Request. **",
    "ResponseMappingTemplate": "## [Start] ResponseTemplate. **\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **"
   },
   "DependsOn": [
    "demographqlapidemotodotaskdatasource2612A9E7",
    "demographqlapiSchemaECD6D8C4"
   ],
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demo-query-list-todo-tasks-data-resolver-fn/Resource"
   }
  },
  "demomutationcreatetodotaskinit0function3E1EA1CF": {
   "Type": "AWS::AppSync::FunctionConfiguration",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "DataSourceName": "NONE",
    "FunctionVersion": "2018-05-29",
    "Name": "MutationcreateTodoTaskinit0Function",
    "RequestMappingTemplate": "## [Start] Initialization default values. **\n$util.qr($ctx.stash.put(\"defaultValues\", $util.defaultIfNull($ctx.stash.defaultValues, {})))\n#set( $createdAt = $util.time.nowISO8601() )\n$util.qr($ctx.stash.defaultValues.put(\"id\", $util.autoId()))\n$util.qr($ctx.stash.defaultValues.put(\"createdAt\", $createdAt))\n$util.qr($ctx.stash.defaultValues.put(\"updatedAt\", $createdAt))\n$util.toJson({\n  \"version\": \"2018-05-29\",\n  \"payload\": {}\n})\n## [End] Initialization default values. **",
    "ResponseMappingTemplate": "$util.toJson({})"
   },
   "DependsOn": [
    "demographqlapiNONE1C8C7994",
    "demographqlapiSchemaECD6D8C4"
   ],
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demo-mutationcreate-todo-taskinit0-function/Resource"
   }
  },
  "demomutationcreatetodotaskdataresolverfnB0CBE727": {
   "Type": "AWS::AppSync::FunctionConfiguration",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "DataSourceName": "TodoTaskDataSource",
    "FunctionVersion": "2018-05-29",
    "Name": "MutationCreateTodoTaskDataResolverFn",
    "RequestMappingTemplate": "## [Start] Create Request template. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n## Set the default values to put request **\n#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )\n## copy the values from input **\n$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))\n## set the typename **\n$util.qr($mergedValues.put(\"__typename\", \"TodoTask\"))\n#set( $PutObject = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"attributeValues\":   $util.dynamodb.toMapValues($mergedValues),\n  \"condition\": $condition\n} )\n#if( $args.condition )\n  $util.qr($ctx.stash.conditions.add($args.condition))\n#end\n## Begin - key condition **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyConditionExpr = {} )\n  #set( $keyConditionExprNames = {} )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyConditionExpr.put(\"keyCondition$velocityCount\", {\n  \"attributeExists\": false\n}))\n    $util.qr($keyConditionExprNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n  #end\n  $util.qr($ctx.stash.conditions.add($keyConditionExpr))\n#else\n  $util.qr($ctx.stash.conditions.add({\n  \"id\": {\n      \"attributeExists\": false\n  }\n}))\n#end\n## End - key condition **\n## Start condition block **\n#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )\n  #set( $mergedConditions = {\n  \"and\": $ctx.stash.conditions\n} )\n  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )\n  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )\n    #set( $Conditions = {\n  \"expression\": $Conditions.expression,\n  \"expressionNames\": $Conditions.expressionNames\n} )\n  #end\n  ## End condition block **\n#end\n#if( $Conditions )\n  #if( $keyConditionExprNames )\n    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))\n  #end\n  $util.qr($PutObject.put(\"condition\", $Conditions))\n#end\n#if( $ctx.stash.metadata.modelObjectKey )\n  $util.qr($PutObject.put(\"key\", $ctx.stash.metadata.modelObjectKey))\n#else\n  #set( $Key = {\n  \"id\":   $util.dynamodb.toDynamoDB($mergedValues.id)\n} )\n  $util.qr($PutObject.put(\"key\", $Key))\n#end\n$util.toJson($PutObject)\n## [End] Create Request template. **",
    "ResponseMappingTemplate": "## [Start] ResponseTemplate. **\n$util.qr($ctx.result.put(\"__operation\", \"Mutation\"))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **"
   },
   "DependsOn": [
    "demographqlapidemotodotaskdatasource2612A9E7",
    "demographqlapiSchemaECD6D8C4"
   ],
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demo-mutation-create-todo-task-data-resolver-fn/Resource"
   }
  },
  "demomutationupdatetodotaskinit0function3793280E": {
   "Type": "AWS::AppSync::FunctionConfiguration",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "DataSourceName": "NONE",
    "FunctionVersion": "2018-05-29",
    "Name": "MutationupdateTodoTaskinit0Function",
    "RequestMappingTemplate": "## [Start] Initialization default values. **\n$util.qr($ctx.stash.put(\"defaultValues\", $util.defaultIfNull($ctx.stash.defaultValues, {})))\n#set( $updatedAt = $util.time.nowISO8601() )\n$util.qr($ctx.stash.defaultValues.put(\"updatedAt\", $updatedAt))\n$util.toJson({\n  \"version\": \"2018-05-29\",\n  \"payload\": {}\n})\n## [End] Initialization default values. **",
    "ResponseMappingTemplate": "$util.toJson({})"
   },
   "DependsOn": [
    "demographqlapiNONE1C8C7994",
    "demographqlapiSchemaECD6D8C4"
   ],
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demo-mutationupdate-todo-taskinit0-function/Resource"
   }
  },
  "demomutationupdatetodotaskdataresolverfn10797A29": {
   "Type": "AWS::AppSync::FunctionConfiguration",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "DataSourceName": "TodoTaskDataSource",
    "FunctionVersion": "2018-05-29",
    "Name": "MutationUpdateTodoTaskDataResolverFn",
    "RequestMappingTemplate": "## [Start] Mutation Update resolver. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n## Set the default values to put request **\n#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )\n## copy the values from input **\n$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))\n## set the typename **\n## Initialize the vars for creating ddb expression **\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $Key = $ctx.stash.metadata.modelObjectKey )\n#else\n  #set( $Key = {\n  \"id\":   $util.dynamodb.toDynamoDB($args.input.id)\n} )\n#end\n## Model key **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyFields = [] )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyFields.add(\"$entry.key\"))\n  #end\n#else\n  #set( $keyFields = [\"id\"] )\n#end\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )\n  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\"$entry.key\") )\n    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\"$entry.key\") )\n  #else\n    #set( $entryKeyAttributeName = $entry.key )\n  #end\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entryKeyAttributeName\") )\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entryKeyAttributeName\", \":$entryKeyAttributeName\"))\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n    $util.qr($expValues.put(\":$entryKeyAttributeName\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n  #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"$expression ADD\" )\n  #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"$expression REMOVE\" )\n  #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n## Begin - key condition **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyConditionExpr = {} )\n  #set( $keyConditionExprNames = {} )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyConditionExpr.put(\"keyCondition$velocityCount\", {\n  \"attributeExists\": true\n}))\n    $util.qr($keyConditionExprNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n  #end\n  $util.qr($ctx.stash.conditions.add($keyConditionExpr))\n#else\n  $util.qr($ctx.stash.conditions.add({\n  \"id\": {\n      \"attributeExists\": true\n  }\n}))\n#end\n## End - key condition **\n#if( $args.condition )\n  $util.qr($ctx.stash.conditions.add($args.condition))\n#end\n## Start condition block **\n#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )\n  #set( $mergedConditions = {\n  \"and\": $ctx.stash.conditions\n} )\n  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )\n  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )\n    #set( $Conditions = {\n  \"expression\": $Conditions.expression,\n  \"expressionNames\": $Conditions.expressionNames\n} )\n  #end\n  ## End condition block **\n#end\n#set( $UpdateItem = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"UpdateItem\",\n  \"key\": $Key,\n  \"update\": $update\n} )\n#if( $Conditions )\n  #if( $keyConditionExprNames )\n    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))\n  #end\n  $util.qr($UpdateItem.put(\"condition\", $Conditions))\n#end\n$util.toJson($UpdateItem)\n## [End] Mutation Update resolver. **",
    "ResponseMappingTemplate": "## [Start] ResponseTemplate. **\n$util.qr($ctx.result.put(\"__operation\", \"Mutation\"))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **"
   },
   "DependsOn": [
    "demographqlapidemotodotaskdatasource2612A9E7",
    "demographqlapiSchemaECD6D8C4"
   ],
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demo-mutation-update-todo-task-data-resolver-fn/Resource"
   }
  },
  "demomutationdeletetodotaskdataresolverfn6EC7E4C1": {
   "Type": "AWS::AppSync::FunctionConfiguration",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "DataSourceName": "TodoTaskDataSource",
    "FunctionVersion": "2018-05-29",
    "Name": "MutationDeleteTodoTaskDataResolverFn",
    "RequestMappingTemplate": "## [Start] Delete Request template. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n#set( $DeleteRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"DeleteItem\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $Key = $ctx.stash.metadata.modelObjectKey )\n#else\n  #set( $Key = {\n  \"id\":   $util.dynamodb.toDynamoDB($args.input.id)\n} )\n#end\n$util.qr($DeleteRequest.put(\"key\", $Key))\n## Begin - key condition **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyConditionExpr = {} )\n  #set( $keyConditionExprNames = {} )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyConditionExpr.put(\"keyCondition$velocityCount\", {\n  \"attributeExists\": true\n}))\n    $util.qr($keyConditionExprNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n  #end\n  $util.qr($ctx.stash.conditions.add($keyConditionExpr))\n#else\n  $util.qr($ctx.stash.conditions.add({\n  \"id\": {\n      \"attributeExists\": true\n  }\n}))\n#end\n## End - key condition **\n#if( $args.condition )\n  $util.qr($ctx.stash.conditions.add($args.condition))\n#end\n## Start condition block **\n#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )\n  #set( $mergedConditions = {\n  \"and\": $ctx.stash.conditions\n} )\n  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )\n  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )\n    #set( $Conditions = {\n  \"expression\": $Conditions.expression,\n  \"expressionNames\": $Conditions.expressionNames\n} )\n  #end\n  ## End condition block **\n#end\n#if( $Conditions )\n  #if( $keyConditionExprNames )\n    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))\n  #end\n  $util.qr($DeleteRequest.put(\"condition\", $Conditions))\n#end\n$util.toJson($DeleteRequest)\n## [End] Delete Request template. **",
    "ResponseMappingTemplate": "## [Start] ResponseTemplate. **\n$util.qr($ctx.result.put(\"__operation\", \"Mutation\"))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **"
   },
   "DependsOn": [
    "demographqlapidemotodotaskdatasource2612A9E7",
    "demographqlapiSchemaECD6D8C4"
   ],
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demo-mutation-delete-todo-task-data-resolver-fn/Resource"
   }
  },
  "demosubscriptiononcreatetodotaskdataresolverfnF10A94A2": {
   "Type": "AWS::AppSync::FunctionConfiguration",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "DataSourceName": "NONE",
    "FunctionVersion": "2018-05-29",
    "Name": "SubscriptionOnCreateTodoTaskDataResolverFn",
    "RequestMappingTemplate": "## [Start] Subscription Request template. **\n$util.toJson({\n  \"version\": \"2018-05-29\",\n  \"payload\": {}\n})\n## [End] Subscription Request template. **",
    "ResponseMappingTemplate": "## [Start] Subscription Response template. **\n$util.toJson(null)\n## [End] Subscription Response template. **"
   },
   "DependsOn": [
    "demographqlapiNONE1C8C7994",
    "demographqlapiSchemaECD6D8C4"
   ],
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demo-subscription-on-create-todo-task-data-resolver-fn/Resource"
   }
  },
  "demoquerygettodotaskresolverEC0D7051": {
   "Type": "AWS::AppSync::Resolver",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "FieldName": "getTodoTask",
    "TypeName": "Query",
    "Kind": "PIPELINE",
    "PipelineConfig": {
     "Functions": [
      {
       "Fn::GetAtt": [
        "demoquerygettodotaskpostauth0function72EBEE8E",
        "FunctionId"
       ]
      },
      {
       "Fn::GetAtt": [
        "demoquerygettodotaskdataresolverfnE6BF4BF8",
        "FunctionId"
       ]
      }
     ]
    },
    "RequestMappingTemplate": {
     "Fn::Join": [
      "",
      [
       "$util.qr($ctx.stash.put(\"typeName\", \"Query\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"getTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
       {
        "Fn::GetAtt": [
         "demographqlapi0F654CF4",
         "ApiId"
        ]
       },
       "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-todo-task-table\"))\n$util.toJson({})"
      ]
     ]
    },
    "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
   },
   "DependsOn": [
    "demographqlapiSchemaECD6D8C4"
   ],
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demo-query-get-todo-task-resolver/Resource"
   }
  },
  "demoquerylisttodotasksresolver3C31F9F3": {
   "Type": "AWS::AppSync::Resolver",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "FieldName": "listTodoTasks",
    "TypeName": "Query",
    "Kind": "PIPELINE",
    "PipelineConfig": {
     "Functions": [
      {
       "Fn::GetAtt": [
        "demoquerygettodotaskpostauth0function72EBEE8E",
        "FunctionId"
       ]
      },
      {
       "Fn::GetAtt": [
        "demoquerylisttodotasksdataresolverfnF2669A16",
        "FunctionId"
       ]
      }
     ]
    },
    "RequestMappingTemplate": {
     "Fn::Join": [
      "",
      [
       "$util.qr($ctx.stash.put(\"typeName\", \"Query\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"listTodoTasks\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
       {
        "Fn::GetAtt": [
         "demographqlapi0F654CF4",
         "ApiId"
        ]
       },
       "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-todo-task-table\"))\n$util.toJson({})"
      ]
     ]
    },
    "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
   },
   "DependsOn": [
    "demographqlapiSchemaECD6D8C4"
   ],
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demo-query-list-todo-tasks-resolver/Resource"
   }
  },
  "demomutationcreatetodotaskresolver977257A9": {
   "Type": "AWS::AppSync::Resolver",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "FieldName": "createTodoTask",
    "TypeName": "Mutation",
    "Kind": "PIPELINE",
    "PipelineConfig": {
     "Functions": [
      {
       "Fn::GetAtt": [
        "demomutationcreatetodotaskinit0function3E1EA1CF",
        "FunctionId"
       ]
      },
      {
       "Fn::GetAtt": [
        "demoquerygettodotaskpostauth0function72EBEE8E",
        "FunctionId"
       ]
      },
      {
       "Fn::GetAtt": [
        "demomutationcreatetodotaskdataresolverfnB0CBE727",
        "FunctionId"
       ]
      }
     ]
    },
    "RequestMappingTemplate": {
     "Fn::Join": [
      "",
      [
       "$util.qr($ctx.stash.put(\"typeName\", \"Mutation\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"createTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
       {
        "Fn::GetAtt": [
         "demographqlapi0F654CF4",
         "ApiId"
        ]
       },
       "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-todo-task-table\"))\n$util.toJson({})"
      ]
     ]
    },
    "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
   },
   "DependsOn": [
    "demographqlapiSchemaECD6D8C4"
   ],
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demo-mutation-create-todo-task-resolver/Resource"
   }
  },
  "demomutationupdatetodotaskresolverF85D4BCA": {
   "Type": "AWS::AppSync::Resolver",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "FieldName": "updateTodoTask",
    "TypeName": "Mutation",
    "Kind": "PIPELINE",
    "PipelineConfig": {
     "Functions": [
      {
       "Fn::GetAtt": [
        "demomutationupdatetodotaskinit0function3793280E",
        "FunctionId"
       ]
      },
      {
       "Fn::GetAtt": [
        "demoquerygettodotaskpostauth0function72EBEE8E",
        "FunctionId"
       ]
      },
      {
       "Fn::GetAtt": [
        "demomutationupdatetodotaskdataresolverfn10797A29",
        "FunctionId"
       ]
      }
     ]
    },
    "RequestMappingTemplate": {
     "Fn::Join": [
      "",
      [
       "$util.qr($ctx.stash.put(\"typeName\", \"Mutation\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"updateTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
       {
        "Fn::GetAtt": [
         "demographqlapi0F654CF4",
         "ApiId"
        ]
       },
       "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-todo-task-table\"))\n$util.toJson({})"
      ]
     ]
    },
    "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
   },
   "DependsOn": [
    "demographqlapiSchemaECD6D8C4"
   ],
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demo-mutation-update-todo-task-resolver/Resource"
   }
  },
  "demomutationdeletetodotaskresolver6F2FAF2D": {
   "Type": "AWS::AppSync::Resolver",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "FieldName": "deleteTodoTask",
    "TypeName": "Mutation",
    "Kind": "PIPELINE",
    "PipelineConfig": {
     "Functions": [
      {
       "Fn::GetAtt": [
        "demoquerygettodotaskpostauth0function72EBEE8E",
        "FunctionId"
       ]
      },
      {
       "Fn::GetAtt": [
        "demomutationdeletetodotaskdataresolverfn6EC7E4C1",
        "FunctionId"
       ]
      }
     ]
    },
    "RequestMappingTemplate": {
     "Fn::Join": [
      "",
      [
       "$util.qr($ctx.stash.put(\"typeName\", \"Mutation\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"deleteTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
       {
        "Fn::GetAtt": [
         "demographqlapi0F654CF4",
         "ApiId"
        ]
       },
       "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-todo-task-table\"))\n$util.toJson({})"
      ]
     ]
    },
    "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
   },
   "DependsOn": [
    "demographqlapiSchemaECD6D8C4"
   ],
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demo-mutation-delete-todo-task-resolver/Resource"
   }
  },
  "demosubscriptiononcreatetodotaskresolver07C6652B": {
   "Type": "AWS::AppSync::Resolver",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "FieldName": "onCreateTodoTask",
    "TypeName": "Subscription",
    "Kind": "PIPELINE",
    "PipelineConfig": {
     "Functions": [
      {
       "Fn::GetAtt": [
        "demoquerygettodotaskpostauth0function72EBEE8E",
        "FunctionId"
       ]
      },
      {
       "Fn::GetAtt": [
        "demosubscriptiononcreatetodotaskdataresolverfnF10A94A2",
        "FunctionId"
       ]
      }
     ]
    },
    "RequestMappingTemplate": {
     "Fn::Join": [
      "",
      [
       "$util.qr($ctx.stash.put(\"typeName\", \"Subscription\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"onCreateTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"NONE\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
       {
        "Fn::GetAtt": [
         "demographqlapi0F654CF4",
         "ApiId"
        ]
       },
       "\"))\n\n$util.toJson({})"
      ]
     ]
    },
    "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
   },
   "DependsOn": [
    "demographqlapiSchemaECD6D8C4"
   ],
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demo-subscription-on-create-todo-task-resolver/Resource"
   }
  },
  "demosubscriptiononupdatetodotaskresolver2D814CB2": {
   "Type": "AWS::AppSync::Resolver",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "FieldName": "onUpdateTodoTask",
    "TypeName": "Subscription",
    "Kind": "PIPELINE",
    "PipelineConfig": {
     "Functions": [
      {
       "Fn::GetAtt": [
        "demoquerygettodotaskpostauth0function72EBEE8E",
        "FunctionId"
       ]
      },
      {
       "Fn::GetAtt": [
        "demosubscriptiononcreatetodotaskdataresolverfnF10A94A2",
        "FunctionId"
       ]
      }
     ]
    },
    "RequestMappingTemplate": {
     "Fn::Join": [
      "",
      [
       "$util.qr($ctx.stash.put(\"typeName\", \"Subscription\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"onUpdateTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"NONE\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
       {
        "Fn::GetAtt": [
         "demographqlapi0F654CF4",
         "ApiId"
        ]
       },
       "\"))\n\n$util.toJson({})"
      ]
     ]
    },
    "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
   },
   "DependsOn": [
    "demographqlapiSchemaECD6D8C4"
   ],
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demo-subscription-on-update-todo-task-resolver/Resource"
   }
  },
  "demosubscriptionondeletetodotaskresolverAD3F4170": {
   "Type": "AWS::AppSync::Resolver",
   "Properties": {
    "ApiId": {
     "Fn::GetAtt": [
      "demographqlapi0F654CF4",
      "ApiId"
     ]
    },
    "FieldName": "onDeleteTodoTask",
    "TypeName": "Subscription",
    "Kind": "PIPELINE",
    "PipelineConfig": {
     "Functions": [
      {
       "Fn::GetAtt": [
        "demoquerygettodotaskpostauth0function72EBEE8E",
        "FunctionId"
       ]
      },
      {
       "Fn::GetAtt": [
        "demosubscriptiononcreatetodotaskdataresolverfnF10A94A2",
        "FunctionId"
       ]
      }
     ]
    },
    "RequestMappingTemplate": {
     "Fn::Join": [
      "",
      [
       "$util.qr($ctx.stash.put(\"typeName\", \"Subscription\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"onDeleteTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"NONE\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
       {
        "Fn::GetAtt": [
         "demographqlapi0F654CF4",
         "ApiId"
        ]
       },
       "\"))\n\n$util.toJson({})"
      ]
     ]
    },
    "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
   },
   "DependsOn": [
    "demographqlapiSchemaECD6D8C4"
   ],
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/demo-subscription-on-delete-todo-task-resolver/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/02QTVPDIBCGf4t3Qlvb0audZvRgp2ri3dkAbWgJIB91Mgz/3UAS7Wl3313e3Yd7HNaPeHkHP7Yg9FII3uBwYNYxWjsgFzQ0vgJobXtJcNgd5YsB3X7st5qj/6omLesgCYP+yvqUleCgVt4QlqpnL4njSu6UPPKTN5CK1KiYVeLKTEQcOhwqJfJ8ju9KcJLNxiwi2kvoFB2O/IRmnMxJjCgZzdvevNPezfazOuymPO2NaP2AlwUI3cIA/zTRL1KcWKdmyIDfIuEelGQ3UGU+pWxupO34dmZFf2wRSUUZPtvFdbXBq/TjZ8t5Ybx0vGO4GuMvEhtBUI4BAAA="
   },
   "Metadata": {
    "aws:cdk:path": "demo-stack/demoappsync/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "demographqlurl": {
   "Value": {
    "Fn::GetAtt": [
     "demographqlapi0F654CF4",
     "GraphQLUrl"
    ]
   },
   "Export": {
    "Name": "demographql-url"
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 }
}