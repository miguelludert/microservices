{
  "version": "tree-0.1",
  "tree": {
    "id": "App",
    "path": "",
    "children": {
      "Tree": {
        "id": "Tree",
        "path": "Tree",
        "constructInfo": {
          "fqn": "constructs.Construct",
          "version": "10.1.104"
        }
      },
      "demo-stack": {
        "id": "demo-stack",
        "path": "demo-stack",
        "children": {
          "demo-appsync": {
            "id": "demo-appsync",
            "path": "demo-stack/demo-appsync",
            "children": {
              "demo-graphql-api": {
                "id": "demo-graphql-api",
                "path": "demo-stack/demo-appsync/demo-graphql-api",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-graphql-api/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::GraphQLApi",
                      "aws:cdk:cloudformation:props": {
                        "authenticationType": "API_KEY",
                        "name": "demo-graphql-api"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnGraphQLApi",
                      "version": "2.41.0"
                    }
                  },
                  "Schema": {
                    "id": "Schema",
                    "path": "demo-stack/demo-appsync/demo-graphql-api/Schema",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::GraphQLSchema",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "definition": "\nenum TodoStatusEnum {\n  New\n  Active\n  Complete\n  Deleted\n}\n\ntype TodoTask {\n  description: String!\n  completedDate: AWSDateTime\n  status: TodoStatusEnum!\n  sharedWith(filter: ModelSharedWithFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelSharedWithConnection\n  image: Image\n  imageId: ID\n  id: ID!\n  createdAt: AWSDateTime!\n  updatedAt: AWSDateTime!\n}\n\ntype Image {\n  url: String!\n  id: ID!\n  createdAt: AWSDateTime!\n  updatedAt: AWSDateTime!\n}\n\ninput TaskCompletedInput {\n  id: ID!\n  emailAddress: String!\n}\n\ntype SharedWith {\n  emailAddress: String!\n  date: AWSDateTime!\n  id: ID!\n  createdAt: AWSDateTime!\n  updatedAt: AWSDateTime!\n  todoTaskSharedWithId: ID\n}\n\ntype Mutation {\n  shareTask(id: ID!, emailAddress: String!): Boolean @aws_api_key\n  notifyTaskCompleted(input: TaskCompletedInput): SharedWith\n  createTodoTask(input: CreateTodoTaskInput!, condition: ModelTodoTaskConditionInput): TodoTask\n  updateTodoTask(input: UpdateTodoTaskInput!, condition: ModelTodoTaskConditionInput): TodoTask\n  deleteTodoTask(input: DeleteTodoTaskInput!, condition: ModelTodoTaskConditionInput): TodoTask\n  createImage(input: CreateImageInput!, condition: ModelImageConditionInput): Image\n  updateImage(input: UpdateImageInput!, condition: ModelImageConditionInput): Image\n  deleteImage(input: DeleteImageInput!, condition: ModelImageConditionInput): Image\n}\n\ninput ModelStringInput {\n  ne: String\n  eq: String\n  le: String\n  lt: String\n  ge: String\n  gt: String\n  contains: String\n  notContains: String\n  between: [String]\n  beginsWith: String\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n  size: ModelSizeInput\n}\n\ninput ModelIntInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  between: [Int]\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n}\n\ninput ModelFloatInput {\n  ne: Float\n  eq: Float\n  le: Float\n  lt: Float\n  ge: Float\n  gt: Float\n  between: [Float]\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n}\n\ninput ModelBooleanInput {\n  ne: Boolean\n  eq: Boolean\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n}\n\ninput ModelIDInput {\n  ne: ID\n  eq: ID\n  le: ID\n  lt: ID\n  ge: ID\n  gt: ID\n  contains: ID\n  notContains: ID\n  between: [ID]\n  beginsWith: ID\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n  size: ModelSizeInput\n}\n\ninput ModelSubscriptionStringInput {\n  ne: String\n  eq: String\n  le: String\n  lt: String\n  ge: String\n  gt: String\n  contains: String\n  notContains: String\n  between: [String]\n  beginsWith: String\n  in: [String]\n  notIn: [String]\n}\n\ninput ModelSubscriptionIntInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  between: [Int]\n  in: [Int]\n  notIn: [Int]\n}\n\ninput ModelSubscriptionFloatInput {\n  ne: Float\n  eq: Float\n  le: Float\n  lt: Float\n  ge: Float\n  gt: Float\n  between: [Float]\n  in: [Float]\n  notIn: [Float]\n}\n\ninput ModelSubscriptionBooleanInput {\n  ne: Boolean\n  eq: Boolean\n}\n\ninput ModelSubscriptionIDInput {\n  ne: ID\n  eq: ID\n  le: ID\n  lt: ID\n  ge: ID\n  gt: ID\n  contains: ID\n  notContains: ID\n  between: [ID]\n  beginsWith: ID\n  in: [ID]\n  notIn: [ID]\n}\n\nenum ModelAttributeTypes {\n  binary\n  binarySet\n  bool\n  list\n  map\n  number\n  numberSet\n  string\n  stringSet\n  _null\n}\n\ninput ModelSizeInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  between: [Int]\n}\n\nenum ModelSortDirection {\n  ASC\n  DESC\n}\n\ntype ModelTodoTaskConnection {\n  items: [TodoTask]!\n  nextToken: String\n}\n\ninput ModelTodoStatusEnumInput {\n  eq: TodoStatusEnum\n  ne: TodoStatusEnum\n}\n\ninput ModelTodoTaskFilterInput {\n  description: ModelStringInput\n  completedDate: ModelStringInput\n  status: ModelTodoStatusEnumInput\n  imageId: ModelIDInput\n  and: [ModelTodoTaskFilterInput]\n  or: [ModelTodoTaskFilterInput]\n  not: ModelTodoTaskFilterInput\n}\n\ntype Query {\n  getTodoTask(id: ID!): TodoTask\n  listTodoTasks(filter: ModelTodoTaskFilterInput, limit: Int, nextToken: String): ModelTodoTaskConnection\n  getImage(id: ID!): Image\n  listImages(filter: ModelImageFilterInput, limit: Int, nextToken: String): ModelImageConnection\n  getSharedWith(id: ID!): SharedWith\n  listSharedWiths(filter: ModelSharedWithFilterInput, limit: Int, nextToken: String): ModelSharedWithConnection\n}\n\ninput ModelTodoTaskConditionInput {\n  description: ModelStringInput\n  completedDate: ModelStringInput\n  status: ModelTodoStatusEnumInput\n  imageId: ModelIDInput\n  and: [ModelTodoTaskConditionInput]\n  or: [ModelTodoTaskConditionInput]\n  not: ModelTodoTaskConditionInput\n}\n\ninput CreateTodoTaskInput {\n  description: String!\n  completedDate: AWSDateTime\n  status: TodoStatusEnum!\n  imageId: ID\n  id: ID\n}\n\ninput UpdateTodoTaskInput {\n  description: String\n  completedDate: AWSDateTime\n  status: TodoStatusEnum\n  imageId: ID\n  id: ID!\n}\n\ninput DeleteTodoTaskInput {\n  id: ID!\n}\n\ntype Subscription {\n  onCreateTodoTask: TodoTask @aws_subscribe(mutations: [\"createTodoTask\"])\n  onUpdateTodoTask: TodoTask @aws_subscribe(mutations: [\"updateTodoTask\"])\n  onDeleteTodoTask: TodoTask @aws_subscribe(mutations: [\"deleteTodoTask\"])\n  onCreateImage: Image @aws_subscribe(mutations: [\"createImage\"])\n  onUpdateImage: Image @aws_subscribe(mutations: [\"updateImage\"])\n  onDeleteImage: Image @aws_subscribe(mutations: [\"deleteImage\"])\n}\n\ntype ModelImageConnection {\n  items: [Image]!\n  nextToken: String\n}\n\ninput ModelImageFilterInput {\n  url: ModelStringInput\n  and: [ModelImageFilterInput]\n  or: [ModelImageFilterInput]\n  not: ModelImageFilterInput\n}\n\ninput ModelImageConditionInput {\n  url: ModelStringInput\n  and: [ModelImageConditionInput]\n  or: [ModelImageConditionInput]\n  not: ModelImageConditionInput\n}\n\ninput CreateImageInput {\n  url: String!\n  id: ID\n}\n\ninput UpdateImageInput {\n  url: String\n  id: ID!\n}\n\ninput DeleteImageInput {\n  id: ID!\n}\n\ntype ModelSharedWithConnection {\n  items: [SharedWith]!\n  nextToken: String\n}\n\ninput ModelSharedWithFilterInput {\n  emailAddress: ModelStringInput\n  date: ModelStringInput\n  and: [ModelSharedWithFilterInput]\n  or: [ModelSharedWithFilterInput]\n  not: ModelSharedWithFilterInput\n  todoTaskSharedWithId: ModelIDInput\n}\n\n"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnGraphQLSchema",
                      "version": "2.41.0"
                    }
                  },
                  "DefaultApiKey": {
                    "id": "DefaultApiKey",
                    "path": "demo-stack/demo-appsync/demo-graphql-api/DefaultApiKey",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::ApiKey",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "description": "Default API key.",
                        "expires": 1694841480
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnApiKey",
                      "version": "2.41.0"
                    }
                  },
                  "LogGroup": {
                    "id": "LogGroup",
                    "path": "demo-stack/demo-appsync/demo-graphql-api/LogGroup",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.Resource",
                      "version": "2.41.0"
                    }
                  },
                  "NONE": {
                    "id": "NONE",
                    "path": "demo-stack/demo-appsync/demo-graphql-api/NONE",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "demo-stack/demo-appsync/demo-graphql-api/NONE/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::AppSync::DataSource",
                          "aws:cdk:cloudformation:props": {
                            "apiId": {
                              "Fn::GetAtt": [
                                "demographqlapiDA442B10",
                                "ApiId"
                              ]
                            },
                            "name": "NONE",
                            "type": "NONE"
                          }
                        },
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.aws_appsync.CfnDataSource",
                          "version": "2.41.0"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "@aws-cdk/aws-appsync-alpha.NoneDataSource",
                      "version": "2.41.0-alpha.0"
                    }
                  },
                  "demo-todo-task-data-source": {
                    "id": "demo-todo-task-data-source",
                    "path": "demo-stack/demo-appsync/demo-graphql-api/demo-todo-task-data-source",
                    "children": {
                      "ServiceRole": {
                        "id": "ServiceRole",
                        "path": "demo-stack/demo-appsync/demo-graphql-api/demo-todo-task-data-source/ServiceRole",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "demo-stack/demo-appsync/demo-graphql-api/demo-todo-task-data-source/ServiceRole/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                              "aws:cdk:cloudformation:props": {
                                "assumeRolePolicyDocument": {
                                  "Statement": [
                                    {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": {
                                        "Service": "appsync.amazonaws.com"
                                      }
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                }
                              }
                            },
                            "constructInfo": {
                              "fqn": "aws-cdk-lib.aws_iam.CfnRole",
                              "version": "2.41.0"
                            }
                          },
                          "DefaultPolicy": {
                            "id": "DefaultPolicy",
                            "path": "demo-stack/demo-appsync/demo-graphql-api/demo-todo-task-data-source/ServiceRole/DefaultPolicy",
                            "children": {
                              "Resource": {
                                "id": "Resource",
                                "path": "demo-stack/demo-appsync/demo-graphql-api/demo-todo-task-data-source/ServiceRole/DefaultPolicy/Resource",
                                "attributes": {
                                  "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                                  "aws:cdk:cloudformation:props": {
                                    "policyDocument": {
                                      "Statement": [
                                        {
                                          "Action": [
                                            "dynamodb:BatchGetItem",
                                            "dynamodb:GetRecords",
                                            "dynamodb:GetShardIterator",
                                            "dynamodb:Query",
                                            "dynamodb:GetItem",
                                            "dynamodb:Scan",
                                            "dynamodb:ConditionCheckItem",
                                            "dynamodb:BatchWriteItem",
                                            "dynamodb:PutItem",
                                            "dynamodb:UpdateItem",
                                            "dynamodb:DeleteItem",
                                            "dynamodb:DescribeTable"
                                          ],
                                          "Effect": "Allow",
                                          "Resource": [
                                            {
                                              "Fn::GetAtt": [
                                                "demotodotasktableEB90FD6F",
                                                "Arn"
                                              ]
                                            },
                                            {
                                              "Ref": "AWS::NoValue"
                                            }
                                          ]
                                        }
                                      ],
                                      "Version": "2012-10-17"
                                    },
                                    "policyName": "demographqlapidemotodotaskdatasourceServiceRoleDefaultPolicy3E290CD4",
                                    "roles": [
                                      {
                                        "Ref": "demographqlapidemotodotaskdatasourceServiceRole953D5CF7"
                                      }
                                    ]
                                  }
                                },
                                "constructInfo": {
                                  "fqn": "aws-cdk-lib.aws_iam.CfnPolicy",
                                  "version": "2.41.0"
                                }
                              }
                            },
                            "constructInfo": {
                              "fqn": "aws-cdk-lib.aws_iam.Policy",
                              "version": "2.41.0"
                            }
                          }
                        },
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.aws_iam.Role",
                          "version": "2.41.0"
                        }
                      },
                      "Resource": {
                        "id": "Resource",
                        "path": "demo-stack/demo-appsync/demo-graphql-api/demo-todo-task-data-source/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::AppSync::DataSource",
                          "aws:cdk:cloudformation:props": {
                            "apiId": {
                              "Fn::GetAtt": [
                                "demographqlapiDA442B10",
                                "ApiId"
                              ]
                            },
                            "name": "TodoTaskDataSource",
                            "type": "AMAZON_DYNAMODB",
                            "description": "TodoTaskDataSource",
                            "dynamoDbConfig": {
                              "tableName": {
                                "Ref": "demotodotasktableEB90FD6F"
                              },
                              "awsRegion": {
                                "Ref": "AWS::Region"
                              }
                            },
                            "serviceRoleArn": {
                              "Fn::GetAtt": [
                                "demographqlapidemotodotaskdatasourceServiceRole953D5CF7",
                                "Arn"
                              ]
                            }
                          }
                        },
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.aws_appsync.CfnDataSource",
                          "version": "2.41.0"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "@aws-cdk/aws-appsync-alpha.DynamoDbDataSource",
                      "version": "2.41.0-alpha.0"
                    }
                  },
                  "demo-image-data-source": {
                    "id": "demo-image-data-source",
                    "path": "demo-stack/demo-appsync/demo-graphql-api/demo-image-data-source",
                    "children": {
                      "ServiceRole": {
                        "id": "ServiceRole",
                        "path": "demo-stack/demo-appsync/demo-graphql-api/demo-image-data-source/ServiceRole",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "demo-stack/demo-appsync/demo-graphql-api/demo-image-data-source/ServiceRole/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                              "aws:cdk:cloudformation:props": {
                                "assumeRolePolicyDocument": {
                                  "Statement": [
                                    {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": {
                                        "Service": "appsync.amazonaws.com"
                                      }
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                }
                              }
                            },
                            "constructInfo": {
                              "fqn": "aws-cdk-lib.aws_iam.CfnRole",
                              "version": "2.41.0"
                            }
                          },
                          "DefaultPolicy": {
                            "id": "DefaultPolicy",
                            "path": "demo-stack/demo-appsync/demo-graphql-api/demo-image-data-source/ServiceRole/DefaultPolicy",
                            "children": {
                              "Resource": {
                                "id": "Resource",
                                "path": "demo-stack/demo-appsync/demo-graphql-api/demo-image-data-source/ServiceRole/DefaultPolicy/Resource",
                                "attributes": {
                                  "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                                  "aws:cdk:cloudformation:props": {
                                    "policyDocument": {
                                      "Statement": [
                                        {
                                          "Action": [
                                            "dynamodb:BatchGetItem",
                                            "dynamodb:GetRecords",
                                            "dynamodb:GetShardIterator",
                                            "dynamodb:Query",
                                            "dynamodb:GetItem",
                                            "dynamodb:Scan",
                                            "dynamodb:ConditionCheckItem",
                                            "dynamodb:BatchWriteItem",
                                            "dynamodb:PutItem",
                                            "dynamodb:UpdateItem",
                                            "dynamodb:DeleteItem",
                                            "dynamodb:DescribeTable"
                                          ],
                                          "Effect": "Allow",
                                          "Resource": [
                                            {
                                              "Fn::GetAtt": [
                                                "demoimagetable0C4AACC5",
                                                "Arn"
                                              ]
                                            },
                                            {
                                              "Ref": "AWS::NoValue"
                                            }
                                          ]
                                        }
                                      ],
                                      "Version": "2012-10-17"
                                    },
                                    "policyName": "demographqlapidemoimagedatasourceServiceRoleDefaultPolicy4AB3B9C7",
                                    "roles": [
                                      {
                                        "Ref": "demographqlapidemoimagedatasourceServiceRoleA616556A"
                                      }
                                    ]
                                  }
                                },
                                "constructInfo": {
                                  "fqn": "aws-cdk-lib.aws_iam.CfnPolicy",
                                  "version": "2.41.0"
                                }
                              }
                            },
                            "constructInfo": {
                              "fqn": "aws-cdk-lib.aws_iam.Policy",
                              "version": "2.41.0"
                            }
                          }
                        },
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.aws_iam.Role",
                          "version": "2.41.0"
                        }
                      },
                      "Resource": {
                        "id": "Resource",
                        "path": "demo-stack/demo-appsync/demo-graphql-api/demo-image-data-source/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::AppSync::DataSource",
                          "aws:cdk:cloudformation:props": {
                            "apiId": {
                              "Fn::GetAtt": [
                                "demographqlapiDA442B10",
                                "ApiId"
                              ]
                            },
                            "name": "ImageDataSource",
                            "type": "AMAZON_DYNAMODB",
                            "description": "ImageDataSource",
                            "dynamoDbConfig": {
                              "tableName": {
                                "Ref": "demoimagetable0C4AACC5"
                              },
                              "awsRegion": {
                                "Ref": "AWS::Region"
                              }
                            },
                            "serviceRoleArn": {
                              "Fn::GetAtt": [
                                "demographqlapidemoimagedatasourceServiceRoleA616556A",
                                "Arn"
                              ]
                            }
                          }
                        },
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.aws_appsync.CfnDataSource",
                          "version": "2.41.0"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "@aws-cdk/aws-appsync-alpha.DynamoDbDataSource",
                      "version": "2.41.0-alpha.0"
                    }
                  },
                  "demo-shared-with-data-source": {
                    "id": "demo-shared-with-data-source",
                    "path": "demo-stack/demo-appsync/demo-graphql-api/demo-shared-with-data-source",
                    "children": {
                      "ServiceRole": {
                        "id": "ServiceRole",
                        "path": "demo-stack/demo-appsync/demo-graphql-api/demo-shared-with-data-source/ServiceRole",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "demo-stack/demo-appsync/demo-graphql-api/demo-shared-with-data-source/ServiceRole/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                              "aws:cdk:cloudformation:props": {
                                "assumeRolePolicyDocument": {
                                  "Statement": [
                                    {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": {
                                        "Service": "appsync.amazonaws.com"
                                      }
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                }
                              }
                            },
                            "constructInfo": {
                              "fqn": "aws-cdk-lib.aws_iam.CfnRole",
                              "version": "2.41.0"
                            }
                          },
                          "DefaultPolicy": {
                            "id": "DefaultPolicy",
                            "path": "demo-stack/demo-appsync/demo-graphql-api/demo-shared-with-data-source/ServiceRole/DefaultPolicy",
                            "children": {
                              "Resource": {
                                "id": "Resource",
                                "path": "demo-stack/demo-appsync/demo-graphql-api/demo-shared-with-data-source/ServiceRole/DefaultPolicy/Resource",
                                "attributes": {
                                  "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                                  "aws:cdk:cloudformation:props": {
                                    "policyDocument": {
                                      "Statement": [
                                        {
                                          "Action": [
                                            "dynamodb:BatchGetItem",
                                            "dynamodb:GetRecords",
                                            "dynamodb:GetShardIterator",
                                            "dynamodb:Query",
                                            "dynamodb:GetItem",
                                            "dynamodb:Scan",
                                            "dynamodb:ConditionCheckItem",
                                            "dynamodb:BatchWriteItem",
                                            "dynamodb:PutItem",
                                            "dynamodb:UpdateItem",
                                            "dynamodb:DeleteItem",
                                            "dynamodb:DescribeTable"
                                          ],
                                          "Effect": "Allow",
                                          "Resource": [
                                            {
                                              "Fn::GetAtt": [
                                                "demosharedwithtable46EE1066",
                                                "Arn"
                                              ]
                                            },
                                            {
                                              "Fn::Join": [
                                                "",
                                                [
                                                  {
                                                    "Fn::GetAtt": [
                                                      "demosharedwithtable46EE1066",
                                                      "Arn"
                                                    ]
                                                  },
                                                  "/index/*"
                                                ]
                                              ]
                                            }
                                          ]
                                        }
                                      ],
                                      "Version": "2012-10-17"
                                    },
                                    "policyName": "demographqlapidemosharedwithdatasourceServiceRoleDefaultPolicy3424580D",
                                    "roles": [
                                      {
                                        "Ref": "demographqlapidemosharedwithdatasourceServiceRole13A70CC2"
                                      }
                                    ]
                                  }
                                },
                                "constructInfo": {
                                  "fqn": "aws-cdk-lib.aws_iam.CfnPolicy",
                                  "version": "2.41.0"
                                }
                              }
                            },
                            "constructInfo": {
                              "fqn": "aws-cdk-lib.aws_iam.Policy",
                              "version": "2.41.0"
                            }
                          }
                        },
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.aws_iam.Role",
                          "version": "2.41.0"
                        }
                      },
                      "Resource": {
                        "id": "Resource",
                        "path": "demo-stack/demo-appsync/demo-graphql-api/demo-shared-with-data-source/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::AppSync::DataSource",
                          "aws:cdk:cloudformation:props": {
                            "apiId": {
                              "Fn::GetAtt": [
                                "demographqlapiDA442B10",
                                "ApiId"
                              ]
                            },
                            "name": "SharedWithDataSource",
                            "type": "AMAZON_DYNAMODB",
                            "description": "SharedWithDataSource",
                            "dynamoDbConfig": {
                              "tableName": {
                                "Ref": "demosharedwithtable46EE1066"
                              },
                              "awsRegion": {
                                "Ref": "AWS::Region"
                              }
                            },
                            "serviceRoleArn": {
                              "Fn::GetAtt": [
                                "demographqlapidemosharedwithdatasourceServiceRole13A70CC2",
                                "Arn"
                              ]
                            }
                          }
                        },
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.aws_appsync.CfnDataSource",
                          "version": "2.41.0"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "@aws-cdk/aws-appsync-alpha.DynamoDbDataSource",
                      "version": "2.41.0-alpha.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.GraphqlApi",
                  "version": "2.41.0-alpha.0"
                }
              },
              "api-key-secret": {
                "id": "api-key-secret",
                "path": "demo-stack/demo-appsync/api-key-secret",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/api-key-secret/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::SecretsManager::Secret",
                      "aws:cdk:cloudformation:props": {
                        "name": "demo-api-key-secret-name",
                        "secretString": {
                          "Fn::GetAtt": [
                            "demographqlapiDefaultApiKeyB1F3BCF5",
                            "ApiKey"
                          ]
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_secretsmanager.CfnSecret",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_secretsmanager.Secret",
                  "version": "2.41.0"
                }
              },
              "demo-api-key-secret-name": {
                "id": "demo-api-key-secret-name",
                "path": "demo-stack/demo-appsync/demo-api-key-secret-name",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CfnOutput",
                  "version": "2.41.0"
                }
              },
              "demo-graphql-url": {
                "id": "demo-graphql-url",
                "path": "demo-stack/demo-appsync/demo-graphql-url",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CfnOutput",
                  "version": "2.41.0"
                }
              },
              "demo-todo-task-table": {
                "id": "demo-todo-task-table",
                "path": "demo-stack/demo-appsync/demo-todo-task-table",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-todo-task-table/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::DynamoDB::Table",
                      "aws:cdk:cloudformation:props": {
                        "keySchema": [
                          {
                            "attributeName": "id",
                            "keyType": "HASH"
                          }
                        ],
                        "attributeDefinitions": [
                          {
                            "attributeName": "id",
                            "attributeType": "S"
                          }
                        ],
                        "billingMode": "PAY_PER_REQUEST",
                        "tableName": "demo-todo-task-table"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_dynamodb.CfnTable",
                      "version": "2.41.0"
                    }
                  },
                  "ScalingRole": {
                    "id": "ScalingRole",
                    "path": "demo-stack/demo-appsync/demo-todo-task-table/ScalingRole",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.Resource",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_dynamodb.Table",
                  "version": "2.41.0"
                }
              },
              "demo-image-table": {
                "id": "demo-image-table",
                "path": "demo-stack/demo-appsync/demo-image-table",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-image-table/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::DynamoDB::Table",
                      "aws:cdk:cloudformation:props": {
                        "keySchema": [
                          {
                            "attributeName": "id",
                            "keyType": "HASH"
                          }
                        ],
                        "attributeDefinitions": [
                          {
                            "attributeName": "id",
                            "attributeType": "S"
                          }
                        ],
                        "billingMode": "PAY_PER_REQUEST",
                        "tableName": "demo-image-table"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_dynamodb.CfnTable",
                      "version": "2.41.0"
                    }
                  },
                  "ScalingRole": {
                    "id": "ScalingRole",
                    "path": "demo-stack/demo-appsync/demo-image-table/ScalingRole",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.Resource",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_dynamodb.Table",
                  "version": "2.41.0"
                }
              },
              "demo-shared-with-table": {
                "id": "demo-shared-with-table",
                "path": "demo-stack/demo-appsync/demo-shared-with-table",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-shared-with-table/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::DynamoDB::Table",
                      "aws:cdk:cloudformation:props": {
                        "keySchema": [
                          {
                            "attributeName": "id",
                            "keyType": "HASH"
                          }
                        ],
                        "attributeDefinitions": [
                          {
                            "attributeName": "id",
                            "attributeType": "S"
                          },
                          {
                            "attributeName": "todoTaskSharedWithId",
                            "attributeType": "S"
                          }
                        ],
                        "billingMode": "PAY_PER_REQUEST",
                        "globalSecondaryIndexes": [
                          {
                            "indexName": "gsi-TodoTask.sharedWith",
                            "keySchema": [
                              {
                                "attributeName": "todoTaskSharedWithId",
                                "keyType": "HASH"
                              }
                            ],
                            "projection": {
                              "projectionType": "ALL"
                            }
                          }
                        ],
                        "tableName": "demo-shared-with-table"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_dynamodb.CfnTable",
                      "version": "2.41.0"
                    }
                  },
                  "ScalingRole": {
                    "id": "ScalingRole",
                    "path": "demo-stack/demo-appsync/demo-shared-with-table/ScalingRole",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.Resource",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_dynamodb.Table",
                  "version": "2.41.0"
                }
              },
              "demo-share-task": {
                "id": "demo-share-task",
                "path": "demo-stack/demo-appsync/demo-share-task",
                "children": {
                  "ServiceRole": {
                    "id": "ServiceRole",
                    "path": "demo-stack/demo-appsync/demo-share-task/ServiceRole",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "demo-stack/demo-appsync/demo-share-task/ServiceRole/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                          "aws:cdk:cloudformation:props": {
                            "assumeRolePolicyDocument": {
                              "Statement": [
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": {
                                    "Service": "lambda.amazonaws.com"
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "managedPolicyArns": [
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                                  ]
                                ]
                              }
                            ]
                          }
                        },
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.aws_iam.CfnRole",
                          "version": "2.41.0"
                        }
                      },
                      "DefaultPolicy": {
                        "id": "DefaultPolicy",
                        "path": "demo-stack/demo-appsync/demo-share-task/ServiceRole/DefaultPolicy",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "demo-stack/demo-appsync/demo-share-task/ServiceRole/DefaultPolicy/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                              "aws:cdk:cloudformation:props": {
                                "policyDocument": {
                                  "Statement": [
                                    {
                                      "Action": [
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:GetRecords",
                                        "dynamodb:GetShardIterator",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan",
                                        "dynamodb:ConditionCheckItem",
                                        "dynamodb:BatchWriteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:UpdateItem",
                                        "dynamodb:DeleteItem",
                                        "dynamodb:DescribeTable"
                                      ],
                                      "Effect": "Allow",
                                      "Resource": [
                                        {
                                          "Fn::GetAtt": [
                                            "demotodotasktableEB90FD6F",
                                            "Arn"
                                          ]
                                        },
                                        {
                                          "Ref": "AWS::NoValue"
                                        }
                                      ]
                                    },
                                    {
                                      "Action": [
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:GetRecords",
                                        "dynamodb:GetShardIterator",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan",
                                        "dynamodb:ConditionCheckItem",
                                        "dynamodb:BatchWriteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:UpdateItem",
                                        "dynamodb:DeleteItem",
                                        "dynamodb:DescribeTable"
                                      ],
                                      "Effect": "Allow",
                                      "Resource": [
                                        {
                                          "Fn::GetAtt": [
                                            "demoimagetable0C4AACC5",
                                            "Arn"
                                          ]
                                        },
                                        {
                                          "Ref": "AWS::NoValue"
                                        }
                                      ]
                                    },
                                    {
                                      "Action": [
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:GetRecords",
                                        "dynamodb:GetShardIterator",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan",
                                        "dynamodb:ConditionCheckItem",
                                        "dynamodb:BatchWriteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:UpdateItem",
                                        "dynamodb:DeleteItem",
                                        "dynamodb:DescribeTable"
                                      ],
                                      "Effect": "Allow",
                                      "Resource": [
                                        {
                                          "Fn::GetAtt": [
                                            "demosharedwithtable46EE1066",
                                            "Arn"
                                          ]
                                        },
                                        {
                                          "Fn::Join": [
                                            "",
                                            [
                                              {
                                                "Fn::GetAtt": [
                                                  "demosharedwithtable46EE1066",
                                                  "Arn"
                                                ]
                                              },
                                              "/index/*"
                                            ]
                                          ]
                                        }
                                      ]
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "policyName": "demosharetaskServiceRoleDefaultPolicy6EC32F6E",
                                "roles": [
                                  {
                                    "Ref": "demosharetaskServiceRole11E22A1D"
                                  }
                                ]
                              }
                            },
                            "constructInfo": {
                              "fqn": "aws-cdk-lib.aws_iam.CfnPolicy",
                              "version": "2.41.0"
                            }
                          }
                        },
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.aws_iam.Policy",
                          "version": "2.41.0"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_iam.Role",
                      "version": "2.41.0"
                    }
                  },
                  "Code": {
                    "id": "Code",
                    "path": "demo-stack/demo-appsync/demo-share-task/Code",
                    "children": {
                      "Stage": {
                        "id": "Stage",
                        "path": "demo-stack/demo-appsync/demo-share-task/Code/Stage",
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.AssetStaging",
                          "version": "2.41.0"
                        }
                      },
                      "AssetBucket": {
                        "id": "AssetBucket",
                        "path": "demo-stack/demo-appsync/demo-share-task/Code/AssetBucket",
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.aws_s3.BucketBase",
                          "version": "2.41.0"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_s3_assets.Asset",
                      "version": "2.41.0"
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-share-task/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::Lambda::Function",
                      "aws:cdk:cloudformation:props": {
                        "code": {
                          "s3Bucket": {
                            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
                          },
                          "s3Key": "dee10cef4cdee80b5ef33e0c4dba9b03f79aa90d3772e029e2db28738c2ef02e.zip"
                        },
                        "role": {
                          "Fn::GetAtt": [
                            "demosharetaskServiceRole11E22A1D",
                            "Arn"
                          ]
                        },
                        "environment": {
                          "variables": {
                            "MS_API_URL_OUTPUT_NAME": "demo-graphql-url",
                            "MS_API_KEY_SECRET_NAME": "demo-api-key-secret-name"
                          }
                        },
                        "handler": "index.handler",
                        "runtime": "nodejs16.x"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_lambda.CfnFunction",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_lambda.Function",
                  "version": "2.41.0"
                }
              },
              "demo-share-task-lambda-data-source": {
                "id": "demo-share-task-lambda-data-source",
                "path": "demo-stack/demo-appsync/demo-share-task-lambda-data-source",
                "children": {
                  "ServiceRole": {
                    "id": "ServiceRole",
                    "path": "demo-stack/demo-appsync/demo-share-task-lambda-data-source/ServiceRole",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "demo-stack/demo-appsync/demo-share-task-lambda-data-source/ServiceRole/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                          "aws:cdk:cloudformation:props": {
                            "assumeRolePolicyDocument": {
                              "Statement": [
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": {
                                    "Service": "appsync.amazonaws.com"
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            }
                          }
                        },
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.aws_iam.CfnRole",
                          "version": "2.41.0"
                        }
                      },
                      "DefaultPolicy": {
                        "id": "DefaultPolicy",
                        "path": "demo-stack/demo-appsync/demo-share-task-lambda-data-source/ServiceRole/DefaultPolicy",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "demo-stack/demo-appsync/demo-share-task-lambda-data-source/ServiceRole/DefaultPolicy/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                              "aws:cdk:cloudformation:props": {
                                "policyDocument": {
                                  "Statement": [
                                    {
                                      "Action": "lambda:InvokeFunction",
                                      "Effect": "Allow",
                                      "Resource": [
                                        {
                                          "Fn::GetAtt": [
                                            "demosharetask47274C02",
                                            "Arn"
                                          ]
                                        },
                                        {
                                          "Fn::Join": [
                                            "",
                                            [
                                              {
                                                "Fn::GetAtt": [
                                                  "demosharetask47274C02",
                                                  "Arn"
                                                ]
                                              },
                                              ":*"
                                            ]
                                          ]
                                        }
                                      ]
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "policyName": "demosharetasklambdadatasourceServiceRoleDefaultPolicy0C5B2AB3",
                                "roles": [
                                  {
                                    "Ref": "demosharetasklambdadatasourceServiceRoleD883BBE9"
                                  }
                                ]
                              }
                            },
                            "constructInfo": {
                              "fqn": "aws-cdk-lib.aws_iam.CfnPolicy",
                              "version": "2.41.0"
                            }
                          }
                        },
                        "constructInfo": {
                          "fqn": "aws-cdk-lib.aws_iam.Policy",
                          "version": "2.41.0"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_iam.Role",
                      "version": "2.41.0"
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-share-task-lambda-data-source/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::DataSource",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "name": "ShareTaskLambdaDataSource",
                        "type": "AWS_LAMBDA",
                        "lambdaConfig": {
                          "lambdaFunctionArn": {
                            "Fn::GetAtt": [
                              "demosharetask47274C02",
                              "Arn"
                            ]
                          }
                        },
                        "serviceRoleArn": {
                          "Fn::GetAtt": [
                            "demosharetasklambdadatasourceServiceRoleD883BBE9",
                            "Arn"
                          ]
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnDataSource",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.LambdaDataSource",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-queryget-todo-taskauth0-function": {
                "id": "demo-queryget-todo-taskauth0-function",
                "path": "demo-stack/demo-appsync/demo-queryget-todo-taskauth0-function",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-queryget-todo-taskauth0-function/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "NONE",
                        "functionVersion": "2018-05-29",
                        "name": "QuerygetTodoTaskauth0Function",
                        "requestMappingTemplate": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#set( $primaryFieldMap = {} )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
                        "responseMappingTemplate": "$util.toJson({})"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-queryget-todo-taskpost-auth0-function": {
                "id": "demo-queryget-todo-taskpost-auth0-function",
                "path": "demo-stack/demo-appsync/demo-queryget-todo-taskpost-auth0-function",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-queryget-todo-taskpost-auth0-function/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "NONE",
                        "functionVersion": "2018-05-29",
                        "name": "QuerygetTodoTaskpostAuth0Function",
                        "requestMappingTemplate": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
                        "responseMappingTemplate": "$util.toJson({})"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-query-get-todo-task-data-resolver-fn": {
                "id": "demo-query-get-todo-task-data-resolver-fn",
                "path": "demo-stack/demo-appsync/demo-query-get-todo-task-data-resolver-fn",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-query-get-todo-task-data-resolver-fn/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "TodoTaskDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "QueryGetTodoTaskDataResolverFn",
                        "requestMappingTemplate": "## [Start] Get Request template. **\n#set( $GetRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"Query\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $expression = \"\" )\n  #set( $expressionNames = {} )\n  #set( $expressionValues = {} )\n  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    #set( $expression = \"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \" )\n    $util.qr($expressionNames.put(\"#keyCount$velocityCount\", $item.key))\n    $util.qr($expressionValues.put(\":valueCount$velocityCount\", $item.value))\n  #end\n  #set( $expression = $expression.replaceAll(\"AND $\", \"\") )\n  #set( $query = {\n  \"expression\": $expression,\n  \"expressionNames\": $expressionNames,\n  \"expressionValues\": $expressionValues\n} )\n#else\n  #set( $query = {\n  \"expression\": \"id = :id\",\n  \"expressionValues\": {\n      \":id\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))\n  }\n} )\n#end\n$util.qr($GetRequest.put(\"query\", $query))\n#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n  $util.qr($GetRequest.put(\"filter\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))\n#end\n$util.toJson($GetRequest)\n## [End] Get Request template. **",
                        "responseMappingTemplate": "## [Start] Get Response template. **\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#end\n#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )\n  $util.toJson($ctx.result.items[0])\n#else\n  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )\n$util.unauthorized()\n  #end\n  $util.toJson(null)\n#end\n## [End] Get Response template. **"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-query-list-todo-tasks-data-resolver-fn": {
                "id": "demo-query-list-todo-tasks-data-resolver-fn",
                "path": "demo-stack/demo-appsync/demo-query-list-todo-tasks-data-resolver-fn",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-query-list-todo-tasks-data-resolver-fn/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "TodoTaskDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "QueryListTodoTasksDataResolverFn",
                        "requestMappingTemplate": "## [Start] List Request. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n#set( $limit = $util.defaultIfNull($args.limit, 100) )\n#set( $ListRequest = {\n  \"version\": \"2018-05-29\",\n  \"limit\": $limit\n} )\n#if( $args.nextToken )\n  #set( $ListRequest.nextToken = $args.nextToken )\n#end\n#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n  #set( $filter = $ctx.stash.authFilter )\n  #if( !$util.isNullOrEmpty($args.filter) )\n    #set( $filter = {\n  \"and\":   [$filter, $args.filter]\n} )\n  #end\n#else\n  #if( !$util.isNullOrEmpty($args.filter) )\n    #set( $filter = $args.filter )\n  #end\n#end\n#if( !$util.isNullOrEmpty($filter) )\n  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )\n  #if( $util.isNullOrEmpty($filterExpression) )\n    $util.error(\"Unable to process the filter expression\", \"Unrecognized Filter\")\n  #end\n  #if( !$util.isNullOrBlank($filterExpression.expression) )\n    #if( $filterExpression.expressionValues.size() == 0 )\n      $util.qr($filterExpression.remove(\"expressionValues\"))\n    #end\n    #set( $ListRequest.filter = $filterExpression )\n  #end\n#end\n#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"query\", $ctx.stash.modelQueryExpression))\n  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \"DESC\" )\n    #set( $ListRequest.scanIndexForward = false )\n  #else\n    #set( $ListRequest.scanIndexForward = true )\n  #end\n#else\n  $util.qr($ListRequest.put(\"operation\", \"Scan\"))\n#end\n#if( !$util.isNull($ctx.stash.metadata.index) )\n  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )\n#end\n$util.toJson($ListRequest)\n## [End] List Request. **",
                        "responseMappingTemplate": "## [Start] ResponseTemplate. **\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutationcreate-todo-taskinit0-function": {
                "id": "demo-mutationcreate-todo-taskinit0-function",
                "path": "demo-stack/demo-appsync/demo-mutationcreate-todo-taskinit0-function",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutationcreate-todo-taskinit0-function/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "NONE",
                        "functionVersion": "2018-05-29",
                        "name": "MutationcreateTodoTaskinit0Function",
                        "requestMappingTemplate": "## [Start] Initialization default values. **\n$util.qr($ctx.stash.put(\"defaultValues\", $util.defaultIfNull($ctx.stash.defaultValues, {})))\n#set( $createdAt = $util.time.nowISO8601() )\n$util.qr($ctx.stash.defaultValues.put(\"id\", $util.autoId()))\n$util.qr($ctx.stash.defaultValues.put(\"createdAt\", $createdAt))\n$util.qr($ctx.stash.defaultValues.put(\"updatedAt\", $createdAt))\n$util.toJson({\n  \"version\": \"2018-05-29\",\n  \"payload\": {}\n})\n## [End] Initialization default values. **",
                        "responseMappingTemplate": "$util.toJson({})"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutationcreate-todo-taskauth0-function": {
                "id": "demo-mutationcreate-todo-taskauth0-function",
                "path": "demo-stack/demo-appsync/demo-mutationcreate-todo-taskauth0-function",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutationcreate-todo-taskauth0-function/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "NONE",
                        "functionVersion": "2018-05-29",
                        "name": "MutationcreateTodoTaskauth0Function",
                        "requestMappingTemplate": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $inputFields = $util.parseJson($util.toJson($ctx.args.input.keySet())) )\n#set( $isAuthorized = false )\n#set( $allowedFields = [] )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized && $allowedFields.isEmpty() )\n$util.unauthorized()\n#end\n#if( !$isAuthorized )\n  #set( $deniedFields = $util.list.copyAndRemoveAll($inputFields, $allowedFields) )\n  #if( $deniedFields.size() > 0 )\n    $util.error(\"Unauthorized on ${deniedFields}\", \"Unauthorized\")\n  #end\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
                        "responseMappingTemplate": "$util.toJson({})"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutation-create-todo-task-data-resolver-fn": {
                "id": "demo-mutation-create-todo-task-data-resolver-fn",
                "path": "demo-stack/demo-appsync/demo-mutation-create-todo-task-data-resolver-fn",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutation-create-todo-task-data-resolver-fn/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "TodoTaskDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "MutationCreateTodoTaskDataResolverFn",
                        "requestMappingTemplate": "## [Start] Create Request template. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n## Set the default values to put request **\n#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )\n## copy the values from input **\n$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))\n## set the typename **\n$util.qr($mergedValues.put(\"__typename\", \"TodoTask\"))\n#set( $PutObject = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"attributeValues\":   $util.dynamodb.toMapValues($mergedValues),\n  \"condition\": $condition\n} )\n#if( $args.condition )\n  $util.qr($ctx.stash.conditions.add($args.condition))\n#end\n## Begin - key condition **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyConditionExpr = {} )\n  #set( $keyConditionExprNames = {} )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyConditionExpr.put(\"keyCondition$velocityCount\", {\n  \"attributeExists\": false\n}))\n    $util.qr($keyConditionExprNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n  #end\n  $util.qr($ctx.stash.conditions.add($keyConditionExpr))\n#else\n  $util.qr($ctx.stash.conditions.add({\n  \"id\": {\n      \"attributeExists\": false\n  }\n}))\n#end\n## End - key condition **\n## Start condition block **\n#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )\n  #set( $mergedConditions = {\n  \"and\": $ctx.stash.conditions\n} )\n  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )\n  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )\n    #set( $Conditions = {\n  \"expression\": $Conditions.expression,\n  \"expressionNames\": $Conditions.expressionNames\n} )\n  #end\n  ## End condition block **\n#end\n#if( $Conditions )\n  #if( $keyConditionExprNames )\n    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))\n  #end\n  $util.qr($PutObject.put(\"condition\", $Conditions))\n#end\n#if( $ctx.stash.metadata.modelObjectKey )\n  $util.qr($PutObject.put(\"key\", $ctx.stash.metadata.modelObjectKey))\n#else\n  #set( $Key = {\n  \"id\":   $util.dynamodb.toDynamoDB($mergedValues.id)\n} )\n  $util.qr($PutObject.put(\"key\", $Key))\n#end\n$util.toJson($PutObject)\n## [End] Create Request template. **",
                        "responseMappingTemplate": "## [Start] ResponseTemplate. **\n$util.qr($ctx.result.put(\"__operation\", \"Mutation\"))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutationupdate-todo-taskinit0-function": {
                "id": "demo-mutationupdate-todo-taskinit0-function",
                "path": "demo-stack/demo-appsync/demo-mutationupdate-todo-taskinit0-function",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutationupdate-todo-taskinit0-function/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "NONE",
                        "functionVersion": "2018-05-29",
                        "name": "MutationupdateTodoTaskinit0Function",
                        "requestMappingTemplate": "## [Start] Initialization default values. **\n$util.qr($ctx.stash.put(\"defaultValues\", $util.defaultIfNull($ctx.stash.defaultValues, {})))\n#set( $updatedAt = $util.time.nowISO8601() )\n$util.qr($ctx.stash.defaultValues.put(\"updatedAt\", $updatedAt))\n$util.toJson({\n  \"version\": \"2018-05-29\",\n  \"payload\": {}\n})\n## [End] Initialization default values. **",
                        "responseMappingTemplate": "$util.toJson({})"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutationupdate-todo-taskauth0-function": {
                "id": "demo-mutationupdate-todo-taskauth0-function",
                "path": "demo-stack/demo-appsync/demo-mutationupdate-todo-taskauth0-function",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutationupdate-todo-taskauth0-function/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "TodoTaskDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "MutationupdateTodoTaskauth0Function",
                        "requestMappingTemplate": "## [Start] Get Request template. **\n#set( $GetRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"GetItem\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $key = $ctx.stash.metadata.modelObjectKey )\n#else\n  #set( $key = {\n  \"id\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)\n} )\n#end\n$util.qr($GetRequest.put(\"key\", $key))\n$util.toJson($GetRequest)\n## [End] Get Request template. **",
                        "responseMappingTemplate": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#end\n#set( $inputFields = $util.parseJson($util.toJson($ctx.args.input.keySet())) )\n#set( $isAuthorized = false )\n#set( $allowedFields = [] )\n#set( $nullAllowedFields = [] )\n#set( $deniedFields = {} )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized && $allowedFields.isEmpty() && $nullAllowedFields.isEmpty() )\n$util.unauthorized()\n#end\n#if( !$isAuthorized )\n  #foreach( $entry in $util.map.copyAndRetainAllKeys($ctx.args.input, $inputFields).entrySet() )\n    #if( $util.isNull($entry.value) && !$nullAllowedFields.contains($entry.key) )\n      $util.qr($deniedFields.put($entry.key, \"\"))\n    #end\n  #end\n  #foreach( $deniedField in $util.list.copyAndRemoveAll($inputFields, $allowedFields) )\n    $util.qr($deniedFields.put($deniedField, \"\"))\n  #end\n#end\n#if( $deniedFields.keySet().size() > 0 )\n  $util.error(\"Unauthorized on ${deniedFields.keySet()}\", \"Unauthorized\")\n#end\n$util.toJson({})\n## [End] Authorization Steps. **"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutation-update-todo-task-data-resolver-fn": {
                "id": "demo-mutation-update-todo-task-data-resolver-fn",
                "path": "demo-stack/demo-appsync/demo-mutation-update-todo-task-data-resolver-fn",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutation-update-todo-task-data-resolver-fn/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "TodoTaskDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "MutationUpdateTodoTaskDataResolverFn",
                        "requestMappingTemplate": "## [Start] Mutation Update resolver. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n## Set the default values to put request **\n#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )\n## copy the values from input **\n$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))\n## set the typename **\n## Initialize the vars for creating ddb expression **\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $Key = $ctx.stash.metadata.modelObjectKey )\n#else\n  #set( $Key = {\n  \"id\":   $util.dynamodb.toDynamoDB($args.input.id)\n} )\n#end\n## Model key **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyFields = [] )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyFields.add(\"$entry.key\"))\n  #end\n#else\n  #set( $keyFields = [\"id\"] )\n#end\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )\n  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\"$entry.key\") )\n    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\"$entry.key\") )\n  #else\n    #set( $entryKeyAttributeName = $entry.key )\n  #end\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entryKeyAttributeName\") )\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entryKeyAttributeName\", \":$entryKeyAttributeName\"))\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n    $util.qr($expValues.put(\":$entryKeyAttributeName\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n  #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"$expression ADD\" )\n  #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"$expression REMOVE\" )\n  #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n## Begin - key condition **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyConditionExpr = {} )\n  #set( $keyConditionExprNames = {} )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyConditionExpr.put(\"keyCondition$velocityCount\", {\n  \"attributeExists\": true\n}))\n    $util.qr($keyConditionExprNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n  #end\n  $util.qr($ctx.stash.conditions.add($keyConditionExpr))\n#else\n  $util.qr($ctx.stash.conditions.add({\n  \"id\": {\n      \"attributeExists\": true\n  }\n}))\n#end\n## End - key condition **\n#if( $args.condition )\n  $util.qr($ctx.stash.conditions.add($args.condition))\n#end\n## Start condition block **\n#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )\n  #set( $mergedConditions = {\n  \"and\": $ctx.stash.conditions\n} )\n  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )\n  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )\n    #set( $Conditions = {\n  \"expression\": $Conditions.expression,\n  \"expressionNames\": $Conditions.expressionNames\n} )\n  #end\n  ## End condition block **\n#end\n#set( $UpdateItem = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"UpdateItem\",\n  \"key\": $Key,\n  \"update\": $update\n} )\n#if( $Conditions )\n  #if( $keyConditionExprNames )\n    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))\n  #end\n  $util.qr($UpdateItem.put(\"condition\", $Conditions))\n#end\n$util.toJson($UpdateItem)\n## [End] Mutation Update resolver. **",
                        "responseMappingTemplate": "## [Start] ResponseTemplate. **\n$util.qr($ctx.result.put(\"__operation\", \"Mutation\"))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutationdelete-todo-taskauth0-function": {
                "id": "demo-mutationdelete-todo-taskauth0-function",
                "path": "demo-stack/demo-appsync/demo-mutationdelete-todo-taskauth0-function",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutationdelete-todo-taskauth0-function/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "TodoTaskDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "MutationdeleteTodoTaskauth0Function",
                        "requestMappingTemplate": "## [Start] Get Request template. **\n#set( $GetRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"GetItem\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $key = $ctx.stash.metadata.modelObjectKey )\n#else\n  #set( $key = {\n  \"id\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)\n} )\n#end\n$util.qr($GetRequest.put(\"key\", $key))\n$util.toJson($GetRequest)\n## [End] Get Request template. **",
                        "responseMappingTemplate": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutation-delete-todo-task-data-resolver-fn": {
                "id": "demo-mutation-delete-todo-task-data-resolver-fn",
                "path": "demo-stack/demo-appsync/demo-mutation-delete-todo-task-data-resolver-fn",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutation-delete-todo-task-data-resolver-fn/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "TodoTaskDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "MutationDeleteTodoTaskDataResolverFn",
                        "requestMappingTemplate": "## [Start] Delete Request template. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n#set( $DeleteRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"DeleteItem\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $Key = $ctx.stash.metadata.modelObjectKey )\n#else\n  #set( $Key = {\n  \"id\":   $util.dynamodb.toDynamoDB($args.input.id)\n} )\n#end\n$util.qr($DeleteRequest.put(\"key\", $Key))\n## Begin - key condition **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyConditionExpr = {} )\n  #set( $keyConditionExprNames = {} )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyConditionExpr.put(\"keyCondition$velocityCount\", {\n  \"attributeExists\": true\n}))\n    $util.qr($keyConditionExprNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n  #end\n  $util.qr($ctx.stash.conditions.add($keyConditionExpr))\n#else\n  $util.qr($ctx.stash.conditions.add({\n  \"id\": {\n      \"attributeExists\": true\n  }\n}))\n#end\n## End - key condition **\n#if( $args.condition )\n  $util.qr($ctx.stash.conditions.add($args.condition))\n#end\n## Start condition block **\n#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )\n  #set( $mergedConditions = {\n  \"and\": $ctx.stash.conditions\n} )\n  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )\n  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )\n    #set( $Conditions = {\n  \"expression\": $Conditions.expression,\n  \"expressionNames\": $Conditions.expressionNames\n} )\n  #end\n  ## End condition block **\n#end\n#if( $Conditions )\n  #if( $keyConditionExprNames )\n    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))\n  #end\n  $util.qr($DeleteRequest.put(\"condition\", $Conditions))\n#end\n$util.toJson($DeleteRequest)\n## [End] Delete Request template. **",
                        "responseMappingTemplate": "## [Start] ResponseTemplate. **\n$util.qr($ctx.result.put(\"__operation\", \"Mutation\"))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-subscriptionon-create-todo-taskauth0-function": {
                "id": "demo-subscriptionon-create-todo-taskauth0-function",
                "path": "demo-stack/demo-appsync/demo-subscriptionon-create-todo-taskauth0-function",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-subscriptionon-create-todo-taskauth0-function/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "NONE",
                        "functionVersion": "2018-05-29",
                        "name": "SubscriptiononCreateTodoTaskauth0Function",
                        "requestMappingTemplate": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
                        "responseMappingTemplate": "$util.toJson({})"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-subscription-on-create-todo-task-data-resolver-fn": {
                "id": "demo-subscription-on-create-todo-task-data-resolver-fn",
                "path": "demo-stack/demo-appsync/demo-subscription-on-create-todo-task-data-resolver-fn",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-subscription-on-create-todo-task-data-resolver-fn/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "NONE",
                        "functionVersion": "2018-05-29",
                        "name": "SubscriptionOnCreateTodoTaskDataResolverFn",
                        "requestMappingTemplate": "## [Start] Subscription Request template. **\n$util.toJson({\n  \"version\": \"2018-05-29\",\n  \"payload\": {}\n})\n## [End] Subscription Request template. **",
                        "responseMappingTemplate": "## [Start] Subscription Response template. **\n$util.toJson(null)\n## [End] Subscription Response template. **"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-query-get-image-data-resolver-fn": {
                "id": "demo-query-get-image-data-resolver-fn",
                "path": "demo-stack/demo-appsync/demo-query-get-image-data-resolver-fn",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-query-get-image-data-resolver-fn/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "ImageDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "QueryGetImageDataResolverFn",
                        "requestMappingTemplate": "## [Start] Get Request template. **\n#set( $GetRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"Query\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $expression = \"\" )\n  #set( $expressionNames = {} )\n  #set( $expressionValues = {} )\n  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    #set( $expression = \"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \" )\n    $util.qr($expressionNames.put(\"#keyCount$velocityCount\", $item.key))\n    $util.qr($expressionValues.put(\":valueCount$velocityCount\", $item.value))\n  #end\n  #set( $expression = $expression.replaceAll(\"AND $\", \"\") )\n  #set( $query = {\n  \"expression\": $expression,\n  \"expressionNames\": $expressionNames,\n  \"expressionValues\": $expressionValues\n} )\n#else\n  #set( $query = {\n  \"expression\": \"id = :id\",\n  \"expressionValues\": {\n      \":id\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))\n  }\n} )\n#end\n$util.qr($GetRequest.put(\"query\", $query))\n#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n  $util.qr($GetRequest.put(\"filter\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))\n#end\n$util.toJson($GetRequest)\n## [End] Get Request template. **",
                        "responseMappingTemplate": "## [Start] Get Response template. **\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#end\n#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )\n  $util.toJson($ctx.result.items[0])\n#else\n  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )\n$util.unauthorized()\n  #end\n  $util.toJson(null)\n#end\n## [End] Get Response template. **"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-query-list-images-data-resolver-fn": {
                "id": "demo-query-list-images-data-resolver-fn",
                "path": "demo-stack/demo-appsync/demo-query-list-images-data-resolver-fn",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-query-list-images-data-resolver-fn/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "ImageDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "QueryListImagesDataResolverFn",
                        "requestMappingTemplate": "## [Start] List Request. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n#set( $limit = $util.defaultIfNull($args.limit, 100) )\n#set( $ListRequest = {\n  \"version\": \"2018-05-29\",\n  \"limit\": $limit\n} )\n#if( $args.nextToken )\n  #set( $ListRequest.nextToken = $args.nextToken )\n#end\n#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n  #set( $filter = $ctx.stash.authFilter )\n  #if( !$util.isNullOrEmpty($args.filter) )\n    #set( $filter = {\n  \"and\":   [$filter, $args.filter]\n} )\n  #end\n#else\n  #if( !$util.isNullOrEmpty($args.filter) )\n    #set( $filter = $args.filter )\n  #end\n#end\n#if( !$util.isNullOrEmpty($filter) )\n  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )\n  #if( $util.isNullOrEmpty($filterExpression) )\n    $util.error(\"Unable to process the filter expression\", \"Unrecognized Filter\")\n  #end\n  #if( !$util.isNullOrBlank($filterExpression.expression) )\n    #if( $filterExpression.expressionValues.size() == 0 )\n      $util.qr($filterExpression.remove(\"expressionValues\"))\n    #end\n    #set( $ListRequest.filter = $filterExpression )\n  #end\n#end\n#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"query\", $ctx.stash.modelQueryExpression))\n  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \"DESC\" )\n    #set( $ListRequest.scanIndexForward = false )\n  #else\n    #set( $ListRequest.scanIndexForward = true )\n  #end\n#else\n  $util.qr($ListRequest.put(\"operation\", \"Scan\"))\n#end\n#if( !$util.isNull($ctx.stash.metadata.index) )\n  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )\n#end\n$util.toJson($ListRequest)\n## [End] List Request. **",
                        "responseMappingTemplate": "## [Start] ResponseTemplate. **\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutation-create-image-data-resolver-fn": {
                "id": "demo-mutation-create-image-data-resolver-fn",
                "path": "demo-stack/demo-appsync/demo-mutation-create-image-data-resolver-fn",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutation-create-image-data-resolver-fn/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "ImageDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "MutationCreateImageDataResolverFn",
                        "requestMappingTemplate": "## [Start] Create Request template. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n## Set the default values to put request **\n#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )\n## copy the values from input **\n$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))\n## set the typename **\n$util.qr($mergedValues.put(\"__typename\", \"Image\"))\n#set( $PutObject = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"attributeValues\":   $util.dynamodb.toMapValues($mergedValues),\n  \"condition\": $condition\n} )\n#if( $args.condition )\n  $util.qr($ctx.stash.conditions.add($args.condition))\n#end\n## Begin - key condition **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyConditionExpr = {} )\n  #set( $keyConditionExprNames = {} )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyConditionExpr.put(\"keyCondition$velocityCount\", {\n  \"attributeExists\": false\n}))\n    $util.qr($keyConditionExprNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n  #end\n  $util.qr($ctx.stash.conditions.add($keyConditionExpr))\n#else\n  $util.qr($ctx.stash.conditions.add({\n  \"id\": {\n      \"attributeExists\": false\n  }\n}))\n#end\n## End - key condition **\n## Start condition block **\n#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )\n  #set( $mergedConditions = {\n  \"and\": $ctx.stash.conditions\n} )\n  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )\n  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )\n    #set( $Conditions = {\n  \"expression\": $Conditions.expression,\n  \"expressionNames\": $Conditions.expressionNames\n} )\n  #end\n  ## End condition block **\n#end\n#if( $Conditions )\n  #if( $keyConditionExprNames )\n    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))\n  #end\n  $util.qr($PutObject.put(\"condition\", $Conditions))\n#end\n#if( $ctx.stash.metadata.modelObjectKey )\n  $util.qr($PutObject.put(\"key\", $ctx.stash.metadata.modelObjectKey))\n#else\n  #set( $Key = {\n  \"id\":   $util.dynamodb.toDynamoDB($mergedValues.id)\n} )\n  $util.qr($PutObject.put(\"key\", $Key))\n#end\n$util.toJson($PutObject)\n## [End] Create Request template. **",
                        "responseMappingTemplate": "## [Start] ResponseTemplate. **\n$util.qr($ctx.result.put(\"__operation\", \"Mutation\"))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutationupdate-imageauth0-function": {
                "id": "demo-mutationupdate-imageauth0-function",
                "path": "demo-stack/demo-appsync/demo-mutationupdate-imageauth0-function",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutationupdate-imageauth0-function/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "ImageDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "MutationupdateImageauth0Function",
                        "requestMappingTemplate": "## [Start] Get Request template. **\n#set( $GetRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"GetItem\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $key = $ctx.stash.metadata.modelObjectKey )\n#else\n  #set( $key = {\n  \"id\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)\n} )\n#end\n$util.qr($GetRequest.put(\"key\", $key))\n$util.toJson($GetRequest)\n## [End] Get Request template. **",
                        "responseMappingTemplate": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#end\n#set( $inputFields = $util.parseJson($util.toJson($ctx.args.input.keySet())) )\n#set( $isAuthorized = false )\n#set( $allowedFields = [] )\n#set( $nullAllowedFields = [] )\n#set( $deniedFields = {} )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized && $allowedFields.isEmpty() && $nullAllowedFields.isEmpty() )\n$util.unauthorized()\n#end\n#if( !$isAuthorized )\n  #foreach( $entry in $util.map.copyAndRetainAllKeys($ctx.args.input, $inputFields).entrySet() )\n    #if( $util.isNull($entry.value) && !$nullAllowedFields.contains($entry.key) )\n      $util.qr($deniedFields.put($entry.key, \"\"))\n    #end\n  #end\n  #foreach( $deniedField in $util.list.copyAndRemoveAll($inputFields, $allowedFields) )\n    $util.qr($deniedFields.put($deniedField, \"\"))\n  #end\n#end\n#if( $deniedFields.keySet().size() > 0 )\n  $util.error(\"Unauthorized on ${deniedFields.keySet()}\", \"Unauthorized\")\n#end\n$util.toJson({})\n## [End] Authorization Steps. **"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutation-update-image-data-resolver-fn": {
                "id": "demo-mutation-update-image-data-resolver-fn",
                "path": "demo-stack/demo-appsync/demo-mutation-update-image-data-resolver-fn",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutation-update-image-data-resolver-fn/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "ImageDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "MutationUpdateImageDataResolverFn",
                        "requestMappingTemplate": "## [Start] Mutation Update resolver. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n## Set the default values to put request **\n#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )\n## copy the values from input **\n$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))\n## set the typename **\n## Initialize the vars for creating ddb expression **\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $Key = $ctx.stash.metadata.modelObjectKey )\n#else\n  #set( $Key = {\n  \"id\":   $util.dynamodb.toDynamoDB($args.input.id)\n} )\n#end\n## Model key **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyFields = [] )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyFields.add(\"$entry.key\"))\n  #end\n#else\n  #set( $keyFields = [\"id\"] )\n#end\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )\n  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\"$entry.key\") )\n    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\"$entry.key\") )\n  #else\n    #set( $entryKeyAttributeName = $entry.key )\n  #end\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entryKeyAttributeName\") )\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entryKeyAttributeName\", \":$entryKeyAttributeName\"))\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n    $util.qr($expValues.put(\":$entryKeyAttributeName\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n  #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"$expression ADD\" )\n  #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"$expression REMOVE\" )\n  #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n## Begin - key condition **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyConditionExpr = {} )\n  #set( $keyConditionExprNames = {} )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyConditionExpr.put(\"keyCondition$velocityCount\", {\n  \"attributeExists\": true\n}))\n    $util.qr($keyConditionExprNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n  #end\n  $util.qr($ctx.stash.conditions.add($keyConditionExpr))\n#else\n  $util.qr($ctx.stash.conditions.add({\n  \"id\": {\n      \"attributeExists\": true\n  }\n}))\n#end\n## End - key condition **\n#if( $args.condition )\n  $util.qr($ctx.stash.conditions.add($args.condition))\n#end\n## Start condition block **\n#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )\n  #set( $mergedConditions = {\n  \"and\": $ctx.stash.conditions\n} )\n  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )\n  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )\n    #set( $Conditions = {\n  \"expression\": $Conditions.expression,\n  \"expressionNames\": $Conditions.expressionNames\n} )\n  #end\n  ## End condition block **\n#end\n#set( $UpdateItem = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"UpdateItem\",\n  \"key\": $Key,\n  \"update\": $update\n} )\n#if( $Conditions )\n  #if( $keyConditionExprNames )\n    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))\n  #end\n  $util.qr($UpdateItem.put(\"condition\", $Conditions))\n#end\n$util.toJson($UpdateItem)\n## [End] Mutation Update resolver. **",
                        "responseMappingTemplate": "## [Start] ResponseTemplate. **\n$util.qr($ctx.result.put(\"__operation\", \"Mutation\"))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutationdelete-imageauth0-function": {
                "id": "demo-mutationdelete-imageauth0-function",
                "path": "demo-stack/demo-appsync/demo-mutationdelete-imageauth0-function",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutationdelete-imageauth0-function/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "ImageDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "MutationdeleteImageauth0Function",
                        "requestMappingTemplate": "## [Start] Get Request template. **\n#set( $GetRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"GetItem\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $key = $ctx.stash.metadata.modelObjectKey )\n#else\n  #set( $key = {\n  \"id\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)\n} )\n#end\n$util.qr($GetRequest.put(\"key\", $key))\n$util.toJson($GetRequest)\n## [End] Get Request template. **",
                        "responseMappingTemplate": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutation-delete-image-data-resolver-fn": {
                "id": "demo-mutation-delete-image-data-resolver-fn",
                "path": "demo-stack/demo-appsync/demo-mutation-delete-image-data-resolver-fn",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutation-delete-image-data-resolver-fn/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "ImageDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "MutationDeleteImageDataResolverFn",
                        "requestMappingTemplate": "## [Start] Delete Request template. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n#set( $DeleteRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"DeleteItem\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $Key = $ctx.stash.metadata.modelObjectKey )\n#else\n  #set( $Key = {\n  \"id\":   $util.dynamodb.toDynamoDB($args.input.id)\n} )\n#end\n$util.qr($DeleteRequest.put(\"key\", $Key))\n## Begin - key condition **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyConditionExpr = {} )\n  #set( $keyConditionExprNames = {} )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyConditionExpr.put(\"keyCondition$velocityCount\", {\n  \"attributeExists\": true\n}))\n    $util.qr($keyConditionExprNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n  #end\n  $util.qr($ctx.stash.conditions.add($keyConditionExpr))\n#else\n  $util.qr($ctx.stash.conditions.add({\n  \"id\": {\n      \"attributeExists\": true\n  }\n}))\n#end\n## End - key condition **\n#if( $args.condition )\n  $util.qr($ctx.stash.conditions.add($args.condition))\n#end\n## Start condition block **\n#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )\n  #set( $mergedConditions = {\n  \"and\": $ctx.stash.conditions\n} )\n  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )\n  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )\n    #set( $Conditions = {\n  \"expression\": $Conditions.expression,\n  \"expressionNames\": $Conditions.expressionNames\n} )\n  #end\n  ## End condition block **\n#end\n#if( $Conditions )\n  #if( $keyConditionExprNames )\n    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))\n  #end\n  $util.qr($DeleteRequest.put(\"condition\", $Conditions))\n#end\n$util.toJson($DeleteRequest)\n## [End] Delete Request template. **",
                        "responseMappingTemplate": "## [Start] ResponseTemplate. **\n$util.qr($ctx.result.put(\"__operation\", \"Mutation\"))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-query-get-shared-with-data-resolver-fn": {
                "id": "demo-query-get-shared-with-data-resolver-fn",
                "path": "demo-stack/demo-appsync/demo-query-get-shared-with-data-resolver-fn",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-query-get-shared-with-data-resolver-fn/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "SharedWithDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "QueryGetSharedWithDataResolverFn",
                        "requestMappingTemplate": "## [Start] Get Request template. **\n#set( $GetRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"Query\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $expression = \"\" )\n  #set( $expressionNames = {} )\n  #set( $expressionValues = {} )\n  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    #set( $expression = \"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \" )\n    $util.qr($expressionNames.put(\"#keyCount$velocityCount\", $item.key))\n    $util.qr($expressionValues.put(\":valueCount$velocityCount\", $item.value))\n  #end\n  #set( $expression = $expression.replaceAll(\"AND $\", \"\") )\n  #set( $query = {\n  \"expression\": $expression,\n  \"expressionNames\": $expressionNames,\n  \"expressionValues\": $expressionValues\n} )\n#else\n  #set( $query = {\n  \"expression\": \"id = :id\",\n  \"expressionValues\": {\n      \":id\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))\n  }\n} )\n#end\n$util.qr($GetRequest.put(\"query\", $query))\n#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n  $util.qr($GetRequest.put(\"filter\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))\n#end\n$util.toJson($GetRequest)\n## [End] Get Request template. **",
                        "responseMappingTemplate": "## [Start] Get Response template. **\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#end\n#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )\n  $util.toJson($ctx.result.items[0])\n#else\n  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )\n$util.unauthorized()\n  #end\n  $util.toJson(null)\n#end\n## [End] Get Response template. **"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-query-list-shared-withs-data-resolver-fn": {
                "id": "demo-query-list-shared-withs-data-resolver-fn",
                "path": "demo-stack/demo-appsync/demo-query-list-shared-withs-data-resolver-fn",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-query-list-shared-withs-data-resolver-fn/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "SharedWithDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "QueryListSharedWithsDataResolverFn",
                        "requestMappingTemplate": "## [Start] List Request. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n#set( $limit = $util.defaultIfNull($args.limit, 100) )\n#set( $ListRequest = {\n  \"version\": \"2018-05-29\",\n  \"limit\": $limit\n} )\n#if( $args.nextToken )\n  #set( $ListRequest.nextToken = $args.nextToken )\n#end\n#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n  #set( $filter = $ctx.stash.authFilter )\n  #if( !$util.isNullOrEmpty($args.filter) )\n    #set( $filter = {\n  \"and\":   [$filter, $args.filter]\n} )\n  #end\n#else\n  #if( !$util.isNullOrEmpty($args.filter) )\n    #set( $filter = $args.filter )\n  #end\n#end\n#if( !$util.isNullOrEmpty($filter) )\n  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )\n  #if( $util.isNullOrEmpty($filterExpression) )\n    $util.error(\"Unable to process the filter expression\", \"Unrecognized Filter\")\n  #end\n  #if( !$util.isNullOrBlank($filterExpression.expression) )\n    #if( $filterExpression.expressionValues.size() == 0 )\n      $util.qr($filterExpression.remove(\"expressionValues\"))\n    #end\n    #set( $ListRequest.filter = $filterExpression )\n  #end\n#end\n#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"query\", $ctx.stash.modelQueryExpression))\n  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \"DESC\" )\n    #set( $ListRequest.scanIndexForward = false )\n  #else\n    #set( $ListRequest.scanIndexForward = true )\n  #end\n#else\n  $util.qr($ListRequest.put(\"operation\", \"Scan\"))\n#end\n#if( !$util.isNull($ctx.stash.metadata.index) )\n  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )\n#end\n$util.toJson($ListRequest)\n## [End] List Request. **",
                        "responseMappingTemplate": "## [Start] ResponseTemplate. **\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-invoke-share-task-lambda-data-source": {
                "id": "demo-invoke-share-task-lambda-data-source",
                "path": "demo-stack/demo-appsync/demo-invoke-share-task-lambda-data-source",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-invoke-share-task-lambda-data-source/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "ShareTaskLambdaDataSource",
                        "functionVersion": "2018-05-29",
                        "name": "InvokeShareTaskLambdaDataSource",
                        "requestMappingTemplate": "## [Start] Invoke AWS Lambda data source: ShareTaskLambdaDataSource. **\n{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"Invoke\",\n  \"payload\": {\n      \"typeName\": $util.toJson($ctx.stash.get(\"typeName\")),\n      \"fieldName\": $util.toJson($ctx.stash.get(\"fieldName\")),\n      \"arguments\": $util.toJson($ctx.arguments),\n      \"identity\": $util.toJson($ctx.identity),\n      \"source\": $util.toJson($ctx.source),\n      \"request\": $util.toJson($ctx.request),\n      \"prev\": $util.toJson($ctx.prev)\n  }\n}\n## [End] Invoke AWS Lambda data source: ShareTaskLambdaDataSource. **",
                        "responseMappingTemplate": "## [Start] Handle error or return result. **\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.toJson($ctx.result)\n## [End] Handle error or return result. **"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-todo-taskimageauth0-function": {
                "id": "demo-todo-taskimageauth0-function",
                "path": "demo-stack/demo-appsync/demo-todo-taskimageauth0-function",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-todo-taskimageauth0-function/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "NONE",
                        "functionVersion": "2018-05-29",
                        "name": "TodoTaskimageauth0Function",
                        "requestMappingTemplate": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
                        "responseMappingTemplate": "$util.toJson({})"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-todo-task-image-data-resolver-fn": {
                "id": "demo-todo-task-image-data-resolver-fn",
                "path": "demo-stack/demo-appsync/demo-todo-task-image-data-resolver-fn",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-todo-task-image-data-resolver-fn/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "NONE",
                        "functionVersion": "2018-05-29",
                        "name": "TodoTaskImageDataResolverFn",
                        "requestMappingTemplate": "#if( $ctx.source.deniedField )\n  #return($util.toJson(null))\n#end\n#if( $util.isNull($ctx.source.imageId) )\n  #return\n#else\n  #set( $GetRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"Query\"\n} )\n  $util.qr($GetRequest.put(\"query\", {\n  \"expression\": \"#partitionKey = :partitionValue\",\n  \"expressionNames\": {\n      \"#partitionKey\": \"id\"\n  },\n  \"expressionValues\": {\n      \":partitionValue\": $util.parseJson($util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.imageId, \"___xamznone____\")))\n  }\n}))\n  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n    $util.qr($GetRequest.put(\"filter\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))\n  #end\n  $util.toJson($GetRequest)\n#end",
                        "responseMappingTemplate": "#if( $ctx.error )\n$util.error($ctx.error.message, $ctx.error.type)\n#else\n  #if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )\n    $util.toJson($ctx.result.items[0])\n  #else\n    #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )\n$util.unauthorized()\n    #end\n    $util.toJson(null)\n  #end\n#end"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-todo-task-shared-with-data-resolver-fn": {
                "id": "demo-todo-task-shared-with-data-resolver-fn",
                "path": "demo-stack/demo-appsync/demo-todo-task-shared-with-data-resolver-fn",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-todo-task-shared-with-data-resolver-fn/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::FunctionConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "dataSourceName": "NONE",
                        "functionVersion": "2018-05-29",
                        "name": "TodoTaskSharedWithDataResolverFn",
                        "requestMappingTemplate": "#if( $ctx.source.deniedField )\n  #return($util.toJson(null))\n#end\n#if( $util.isNull($ctx.source.id) )\n  #set( $result = {\n  \"items\":   []\n} )\n  #return($result)\n#else\n  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )\n  #set( $query = {\n  \"expression\": \"#partitionKey = :partitionKey\",\n  \"expressionNames\": {\n      \"#partitionKey\": \"todoTaskSharedWithId\"\n  },\n  \"expressionValues\": {\n      \":partitionKey\": $util.dynamodb.toDynamoDB($context.source.id)\n  }\n} )\n  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n    #set( $filter = $ctx.stash.authFilter )\n    #if( !$util.isNullOrEmpty($args.filter) )\n      #set( $filter = {\n  \"and\":   [$filter, $args.filter]\n} )\n    #end\n  #else\n    #if( !$util.isNullOrEmpty($args.filter) )\n      #set( $filter = $args.filter )\n    #end\n  #end\n  #if( !$util.isNullOrEmpty($filter) )\n    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )\n    #if( !$util.isNullOrBlank($filterExpression.expression) )\n      #if( $filterExpression.expressionValues.size() == 0 )\n        $util.qr($filterExpression.remove(\"expressionValues\"))\n      #end\n      #set( $filter = $filterExpression )\n    #end\n  #end\n{\n      \"version\": \"2018-05-29\",\n      \"operation\": \"Query\",\n      \"query\":     $util.toJson($query),\n      \"scanIndexForward\":     #if( $context.args.sortDirection )\n      #if( $context.args.sortDirection == \"ASC\" )\ntrue\n      #else\nfalse\n      #end\n    #else\ntrue\n    #end,\n      \"filter\":     #if( $filter )\n$util.toJson($filter)\n    #else\nnull\n    #end,\n      \"limit\": $limit,\n      \"nextToken\":     #if( $context.args.nextToken )\n$util.toJson($context.args.nextToken)\n    #else\nnull\n    #end,\n      \"index\": \"gsi-TodoTask.sharedWith\"\n  }\n#end",
                        "responseMappingTemplate": "#if( $ctx.error )\n$util.error($ctx.error.message, $ctx.error.type)\n#else\n  #if( !$result )\n    #set( $result = $ctx.result )\n  #end\n  $util.toJson($result)\n#end"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnFunctionConfiguration",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-query-get-todo-task-resolver": {
                "id": "demo-query-get-todo-task-resolver",
                "path": "demo-stack/demo-appsync/demo-query-get-todo-task-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-query-get-todo-task-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "getTodoTask",
                        "typeName": "Query",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": [
                            {
                              "Fn::GetAtt": [
                                "demoquerygettodotaskauth0function201FA8B7",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demoquerygettodotaskpostauth0function72EBEE8E",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demoquerygettodotaskdataresolverfnE6BF4BF8",
                                "FunctionId"
                              ]
                            }
                          ]
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"Query\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"getTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-todo-task-table\"))\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-query-list-todo-tasks-resolver": {
                "id": "demo-query-list-todo-tasks-resolver",
                "path": "demo-stack/demo-appsync/demo-query-list-todo-tasks-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-query-list-todo-tasks-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "listTodoTasks",
                        "typeName": "Query",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": [
                            {
                              "Fn::GetAtt": [
                                "demoquerygettodotaskauth0function201FA8B7",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demoquerygettodotaskpostauth0function72EBEE8E",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demoquerylisttodotasksdataresolverfnF2669A16",
                                "FunctionId"
                              ]
                            }
                          ]
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"Query\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"listTodoTasks\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-todo-task-table\"))\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutation-create-todo-task-resolver": {
                "id": "demo-mutation-create-todo-task-resolver",
                "path": "demo-stack/demo-appsync/demo-mutation-create-todo-task-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutation-create-todo-task-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "createTodoTask",
                        "typeName": "Mutation",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": [
                            {
                              "Fn::GetAtt": [
                                "demomutationcreatetodotaskinit0function3E1EA1CF",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demomutationcreatetodotaskauth0functionF9B56BDD",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demoquerygettodotaskpostauth0function72EBEE8E",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demomutationcreatetodotaskdataresolverfnB0CBE727",
                                "FunctionId"
                              ]
                            }
                          ]
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"Mutation\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"createTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-todo-task-table\"))\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutation-update-todo-task-resolver": {
                "id": "demo-mutation-update-todo-task-resolver",
                "path": "demo-stack/demo-appsync/demo-mutation-update-todo-task-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutation-update-todo-task-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "updateTodoTask",
                        "typeName": "Mutation",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": [
                            {
                              "Fn::GetAtt": [
                                "demomutationupdatetodotaskinit0function3793280E",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demomutationupdatetodotaskauth0function8427D4CB",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demoquerygettodotaskpostauth0function72EBEE8E",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demomutationupdatetodotaskdataresolverfn10797A29",
                                "FunctionId"
                              ]
                            }
                          ]
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"Mutation\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"updateTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-todo-task-table\"))\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutation-delete-todo-task-resolver": {
                "id": "demo-mutation-delete-todo-task-resolver",
                "path": "demo-stack/demo-appsync/demo-mutation-delete-todo-task-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutation-delete-todo-task-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "deleteTodoTask",
                        "typeName": "Mutation",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": [
                            {
                              "Fn::GetAtt": [
                                "demomutationdeletetodotaskauth0functionDD3649CA",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demoquerygettodotaskpostauth0function72EBEE8E",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demomutationdeletetodotaskdataresolverfn6EC7E4C1",
                                "FunctionId"
                              ]
                            }
                          ]
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"Mutation\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"deleteTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-todo-task-table\"))\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-subscription-on-create-todo-task-resolver": {
                "id": "demo-subscription-on-create-todo-task-resolver",
                "path": "demo-stack/demo-appsync/demo-subscription-on-create-todo-task-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-subscription-on-create-todo-task-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "onCreateTodoTask",
                        "typeName": "Subscription",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": [
                            {
                              "Fn::GetAtt": [
                                "demosubscriptiononcreatetodotaskauth0function3370D7E1",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demoquerygettodotaskpostauth0function72EBEE8E",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demosubscriptiononcreatetodotaskdataresolverfnF10A94A2",
                                "FunctionId"
                              ]
                            }
                          ]
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"Subscription\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"onCreateTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"NONE\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-subscription-on-update-todo-task-resolver": {
                "id": "demo-subscription-on-update-todo-task-resolver",
                "path": "demo-stack/demo-appsync/demo-subscription-on-update-todo-task-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-subscription-on-update-todo-task-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "onUpdateTodoTask",
                        "typeName": "Subscription",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": [
                            {
                              "Fn::GetAtt": [
                                "demosubscriptiononcreatetodotaskauth0function3370D7E1",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demoquerygettodotaskpostauth0function72EBEE8E",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demosubscriptiononcreatetodotaskdataresolverfnF10A94A2",
                                "FunctionId"
                              ]
                            }
                          ]
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"Subscription\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"onUpdateTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"NONE\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-subscription-on-delete-todo-task-resolver": {
                "id": "demo-subscription-on-delete-todo-task-resolver",
                "path": "demo-stack/demo-appsync/demo-subscription-on-delete-todo-task-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-subscription-on-delete-todo-task-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "onDeleteTodoTask",
                        "typeName": "Subscription",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": [
                            {
                              "Fn::GetAtt": [
                                "demosubscriptiononcreatetodotaskauth0function3370D7E1",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demoquerygettodotaskpostauth0function72EBEE8E",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demosubscriptiononcreatetodotaskdataresolverfnF10A94A2",
                                "FunctionId"
                              ]
                            }
                          ]
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"Subscription\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"onDeleteTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"NONE\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-query-get-image-resolver": {
                "id": "demo-query-get-image-resolver",
                "path": "demo-stack/demo-appsync/demo-query-get-image-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-query-get-image-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "getImage",
                        "typeName": "Query",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": [
                            {
                              "Fn::GetAtt": [
                                "demoquerygetimagedataresolverfn375F499C",
                                "FunctionId"
                              ]
                            }
                          ]
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"Query\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"getImage\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-image-table\"))\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-query-list-images-resolver": {
                "id": "demo-query-list-images-resolver",
                "path": "demo-stack/demo-appsync/demo-query-list-images-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-query-list-images-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "listImages",
                        "typeName": "Query",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": [
                            {
                              "Fn::GetAtt": [
                                "demoquerylistimagesdataresolverfn6C61E90D",
                                "FunctionId"
                              ]
                            }
                          ]
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"Query\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"listImages\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-image-table\"))\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutation-create-image-resolver": {
                "id": "demo-mutation-create-image-resolver",
                "path": "demo-stack/demo-appsync/demo-mutation-create-image-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutation-create-image-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "createImage",
                        "typeName": "Mutation",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": [
                            {
                              "Fn::GetAtt": [
                                "demomutationcreateimagedataresolverfnFF698A32",
                                "FunctionId"
                              ]
                            }
                          ]
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"Mutation\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"createImage\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-image-table\"))\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutation-update-image-resolver": {
                "id": "demo-mutation-update-image-resolver",
                "path": "demo-stack/demo-appsync/demo-mutation-update-image-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutation-update-image-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "updateImage",
                        "typeName": "Mutation",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": [
                            {
                              "Fn::GetAtt": [
                                "demomutationupdateimageauth0function03192D1A",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demomutationupdateimagedataresolverfnE86BCA18",
                                "FunctionId"
                              ]
                            }
                          ]
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"Mutation\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"updateImage\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-image-table\"))\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutation-delete-image-resolver": {
                "id": "demo-mutation-delete-image-resolver",
                "path": "demo-stack/demo-appsync/demo-mutation-delete-image-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutation-delete-image-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "deleteImage",
                        "typeName": "Mutation",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": [
                            {
                              "Fn::GetAtt": [
                                "demomutationdeleteimageauth0function44AE95D7",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demomutationdeleteimagedataresolverfn06212B3A",
                                "FunctionId"
                              ]
                            }
                          ]
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"Mutation\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"deleteImage\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-image-table\"))\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-subscription-on-create-image-resolver": {
                "id": "demo-subscription-on-create-image-resolver",
                "path": "demo-stack/demo-appsync/demo-subscription-on-create-image-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-subscription-on-create-image-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "onCreateImage",
                        "typeName": "Subscription",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": []
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"Subscription\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"onCreateImage\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"NONE\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-subscription-on-update-image-resolver": {
                "id": "demo-subscription-on-update-image-resolver",
                "path": "demo-stack/demo-appsync/demo-subscription-on-update-image-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-subscription-on-update-image-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "onUpdateImage",
                        "typeName": "Subscription",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": []
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"Subscription\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"onUpdateImage\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"NONE\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-subscription-on-delete-image-resolver": {
                "id": "demo-subscription-on-delete-image-resolver",
                "path": "demo-stack/demo-appsync/demo-subscription-on-delete-image-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-subscription-on-delete-image-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "onDeleteImage",
                        "typeName": "Subscription",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": []
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"Subscription\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"onDeleteImage\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"NONE\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-query-get-shared-with-resolver": {
                "id": "demo-query-get-shared-with-resolver",
                "path": "demo-stack/demo-appsync/demo-query-get-shared-with-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-query-get-shared-with-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "getSharedWith",
                        "typeName": "Query",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": [
                            {
                              "Fn::GetAtt": [
                                "demoquerygetsharedwithdataresolverfn9B666666",
                                "FunctionId"
                              ]
                            }
                          ]
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"Query\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"getSharedWith\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-shared-with-table\"))\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-query-list-shared-withs-resolver": {
                "id": "demo-query-list-shared-withs-resolver",
                "path": "demo-stack/demo-appsync/demo-query-list-shared-withs-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-query-list-shared-withs-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "listSharedWiths",
                        "typeName": "Query",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": [
                            {
                              "Fn::GetAtt": [
                                "demoquerylistsharedwithsdataresolverfn1AD9AE81",
                                "FunctionId"
                              ]
                            }
                          ]
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"Query\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"listSharedWiths\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-shared-with-table\"))\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-mutation-share-task-resolver": {
                "id": "demo-mutation-share-task-resolver",
                "path": "demo-stack/demo-appsync/demo-mutation-share-task-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-mutation-share-task-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "shareTask",
                        "typeName": "Mutation",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": [
                            {
                              "Fn::GetAtt": [
                                "demoinvokesharetasklambdadatasource09FA16DE",
                                "FunctionId"
                              ]
                            }
                          ]
                        },
                        "requestMappingTemplate": "## [Start] Stash resolver specific context.. **\n$util.qr($ctx.stash.put(\"typeName\", \"Mutation\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"shareTask\"))\n{}\n## [End] Stash resolver specific context.. **",
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-todo-task-image-resolver": {
                "id": "demo-todo-task-image-resolver",
                "path": "demo-stack/demo-appsync/demo-todo-task-image-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-todo-task-image-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "image",
                        "typeName": "TodoTask",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": [
                            {
                              "Fn::GetAtt": [
                                "demotodotaskimageauth0function65A4EB65",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demotodotaskimagedataresolverfnDCD4A73B",
                                "FunctionId"
                              ]
                            }
                          ]
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"TodoTask\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"image\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-referencetotransformerrootstack-image-nested-stack-image-nested-stack-resource64-de1-ec9-outputstransformerrootstack-image-image-table573568-d3-ref\"))\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "demo-todo-task-shared-with-resolver": {
                "id": "demo-todo-task-shared-with-resolver",
                "path": "demo-stack/demo-appsync/demo-todo-task-shared-with-resolver",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "demo-stack/demo-appsync/demo-todo-task-shared-with-resolver/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AppSync::Resolver",
                      "aws:cdk:cloudformation:props": {
                        "apiId": {
                          "Fn::GetAtt": [
                            "demographqlapiDA442B10",
                            "ApiId"
                          ]
                        },
                        "fieldName": "sharedWith",
                        "typeName": "TodoTask",
                        "kind": "PIPELINE",
                        "pipelineConfig": {
                          "functions": [
                            {
                              "Fn::GetAtt": [
                                "demotodotaskimageauth0function65A4EB65",
                                "FunctionId"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "demotodotasksharedwithdataresolverfn9C64F0FA",
                                "FunctionId"
                              ]
                            }
                          ]
                        },
                        "requestMappingTemplate": {
                          "Fn::Join": [
                            "",
                            [
                              "$util.qr($ctx.stash.put(\"typeName\", \"TodoTask\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"sharedWith\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                              {
                                "Fn::GetAtt": [
                                  "demographqlapiDA442B10",
                                  "ApiId"
                                ]
                              },
                              "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"demo-referencetotransformerrootstack-shared-with-nested-stack-shared-with-nested-stack-resource-ca833-e8-e-outputstransformerrootstack-shared-with-shared-with-table8942-f526-ref\"))\n$util.toJson({})"
                            ]
                          ]
                        },
                        "responseMappingTemplate": "$util.toJson($ctx.prev.result)"
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_appsync.CfnResolver",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
                  "version": "2.41.0-alpha.0"
                }
              },
              "CDKMetadata": {
                "id": "CDKMetadata",
                "path": "demo-stack/demo-appsync/CDKMetadata",
                "children": {
                  "Default": {
                    "id": "Default",
                    "path": "demo-stack/demo-appsync/CDKMetadata/Default",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.CfnResource",
                      "version": "2.41.0"
                    }
                  },
                  "Condition": {
                    "id": "Condition",
                    "path": "demo-stack/demo-appsync/CDKMetadata/Condition",
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.CfnCondition",
                      "version": "2.41.0"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "constructs.Construct",
                  "version": "10.1.104"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.NestedStack",
              "version": "2.41.0"
            }
          },
          "demo-appsync.NestedStack": {
            "id": "demo-appsync.NestedStack",
            "path": "demo-stack/demo-appsync.NestedStack",
            "children": {
              "demo-appsync.NestedStackResource": {
                "id": "demo-appsync.NestedStackResource",
                "path": "demo-stack/demo-appsync.NestedStack/demo-appsync.NestedStackResource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::CloudFormation::Stack",
                  "aws:cdk:cloudformation:props": {
                    "templateUrl": {
                      "Fn::Join": [
                        "",
                        [
                          "https://s3.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/",
                          {
                            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
                          },
                          "/9bb307b1248356087338d483c0b56bc4d9a0469ec673396c73e2faf5dd64a0e8.json"
                        ]
                      ]
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CfnStack",
                  "version": "2.41.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "constructs.Construct",
              "version": "10.1.104"
            }
          },
          "CDKMetadata": {
            "id": "CDKMetadata",
            "path": "demo-stack/CDKMetadata",
            "children": {
              "Default": {
                "id": "Default",
                "path": "demo-stack/CDKMetadata/Default",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CfnResource",
                  "version": "2.41.0"
                }
              },
              "Condition": {
                "id": "Condition",
                "path": "demo-stack/CDKMetadata/Condition",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CfnCondition",
                  "version": "2.41.0"
                }
              }
            },
            "constructInfo": {
              "fqn": "constructs.Construct",
              "version": "10.1.104"
            }
          }
        },
        "constructInfo": {
          "fqn": "aws-cdk-lib.Stack",
          "version": "2.41.0"
        }
      }
    },
    "constructInfo": {
      "fqn": "aws-cdk-lib.App",
      "version": "2.41.0"
    }
  }
}