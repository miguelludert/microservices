{
  "userOverriddenSlots": [],
  "functions": {},
  "pipelineFunctions": {},
  "stackMapping": {},
  "resolvers": {
    "InvokeShareTaskLambdaDataSource.req.vtl": "## [Start] Invoke AWS Lambda data source: ShareTaskLambdaDataSource. **\n{\n  \"version\": \"2018-05-29\",\n  \"operation\": \"Invoke\",\n  \"payload\": {\n      \"typeName\": $util.toJson($ctx.stash.get(\"typeName\")),\n      \"fieldName\": $util.toJson($ctx.stash.get(\"fieldName\")),\n      \"arguments\": $util.toJson($ctx.arguments),\n      \"identity\": $util.toJson($ctx.identity),\n      \"source\": $util.toJson($ctx.source),\n      \"request\": $util.toJson($ctx.request),\n      \"prev\": $util.toJson($ctx.prev)\n  }\n}\n## [End] Invoke AWS Lambda data source: ShareTaskLambdaDataSource. **",
    "InvokeShareTaskLambdaDataSource.res.vtl": "## [Start] Handle error or return result. **\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#end\n$util.toJson($ctx.result)\n## [End] Handle error or return result. **",
    "Mutation.shareTask.res.vtl": "$util.toJson($ctx.prev.result)",
    "Query.getTodoTask.auth.1.req.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#set( $primaryFieldMap = {} )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
    "Query.getTodoTask.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "Query.getTodoTask.req.vtl": "## [Start] Get Request template. **\n#set( $GetRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"Query\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $expression = \"\" )\n  #set( $expressionNames = {} )\n  #set( $expressionValues = {} )\n  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    #set( $expression = \"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \" )\n    $util.qr($expressionNames.put(\"#keyCount$velocityCount\", $item.key))\n    $util.qr($expressionValues.put(\":valueCount$velocityCount\", $item.value))\n  #end\n  #set( $expression = $expression.replaceAll(\"AND $\", \"\") )\n  #set( $query = {\n  \"expression\": $expression,\n  \"expressionNames\": $expressionNames,\n  \"expressionValues\": $expressionValues\n} )\n#else\n  #set( $query = {\n  \"expression\": \"id = :id\",\n  \"expressionValues\": {\n      \":id\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))\n  }\n} )\n#end\n$util.qr($GetRequest.put(\"query\", $query))\n#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n  $util.qr($GetRequest.put(\"filter\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))\n#end\n$util.toJson($GetRequest)\n## [End] Get Request template. **",
    "Query.getTodoTask.res.vtl": "## [Start] Get Response template. **\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#end\n#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )\n  $util.toJson($ctx.result.items[0])\n#else\n  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )\n$util.unauthorized()\n  #end\n  $util.toJson(null)\n#end\n## [End] Get Response template. **",
    "Query.listTodoTasks.auth.1.req.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#set( $primaryFieldMap = {} )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
    "Query.listTodoTasks.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "Query.listTodoTasks.req.vtl": "## [Start] List Request. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n#set( $limit = $util.defaultIfNull($args.limit, 100) )\n#set( $ListRequest = {\n  \"version\": \"2018-05-29\",\n  \"limit\": $limit\n} )\n#if( $args.nextToken )\n  #set( $ListRequest.nextToken = $args.nextToken )\n#end\n#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n  #set( $filter = $ctx.stash.authFilter )\n  #if( !$util.isNullOrEmpty($args.filter) )\n    #set( $filter = {\n  \"and\":   [$filter, $args.filter]\n} )\n  #end\n#else\n  #if( !$util.isNullOrEmpty($args.filter) )\n    #set( $filter = $args.filter )\n  #end\n#end\n#if( !$util.isNullOrEmpty($filter) )\n  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )\n  #if( $util.isNullOrEmpty($filterExpression) )\n    $util.error(\"Unable to process the filter expression\", \"Unrecognized Filter\")\n  #end\n  #if( !$util.isNullOrBlank($filterExpression.expression) )\n    #if( $filterExpression.expressionValues.size() == 0 )\n      $util.qr($filterExpression.remove(\"expressionValues\"))\n    #end\n    #set( $ListRequest.filter = $filterExpression )\n  #end\n#end\n#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"query\", $ctx.stash.modelQueryExpression))\n  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \"DESC\" )\n    #set( $ListRequest.scanIndexForward = false )\n  #else\n    #set( $ListRequest.scanIndexForward = true )\n  #end\n#else\n  $util.qr($ListRequest.put(\"operation\", \"Scan\"))\n#end\n#if( !$util.isNull($ctx.stash.metadata.index) )\n  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )\n#end\n$util.toJson($ListRequest)\n## [End] List Request. **",
    "Query.listTodoTasks.res.vtl": "## [Start] ResponseTemplate. **\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **",
    "Mutation.createTodoTask.init.1.req.vtl": "## [Start] Initialization default values. **\n$util.qr($ctx.stash.put(\"defaultValues\", $util.defaultIfNull($ctx.stash.defaultValues, {})))\n#set( $createdAt = $util.time.nowISO8601() )\n$util.qr($ctx.stash.defaultValues.put(\"id\", $util.autoId()))\n$util.qr($ctx.stash.defaultValues.put(\"createdAt\", $createdAt))\n$util.qr($ctx.stash.defaultValues.put(\"updatedAt\", $createdAt))\n$util.toJson({\n  \"version\": \"2018-05-29\",\n  \"payload\": {}\n})\n## [End] Initialization default values. **",
    "Mutation.createTodoTask.auth.1.req.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $inputFields = $util.parseJson($util.toJson($ctx.args.input.keySet())) )\n#set( $isAuthorized = false )\n#set( $allowedFields = [] )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized && $allowedFields.isEmpty() )\n$util.unauthorized()\n#end\n#if( !$isAuthorized )\n  #set( $deniedFields = $util.list.copyAndRemoveAll($inputFields, $allowedFields) )\n  #if( $deniedFields.size() > 0 )\n    $util.error(\"Unauthorized on ${deniedFields}\", \"Unauthorized\")\n  #end\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
    "Mutation.createTodoTask.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "Mutation.createTodoTask.req.vtl": "## [Start] Create Request template. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n## Set the default values to put request **\n#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )\n## copy the values from input **\n$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))\n## set the typename **\n$util.qr($mergedValues.put(\"__typename\", \"TodoTask\"))\n#set( $PutObject = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"attributeValues\":   $util.dynamodb.toMapValues($mergedValues),\n  \"condition\": $condition\n} )\n#if( $args.condition )\n  $util.qr($ctx.stash.conditions.add($args.condition))\n#end\n## Begin - key condition **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyConditionExpr = {} )\n  #set( $keyConditionExprNames = {} )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyConditionExpr.put(\"keyCondition$velocityCount\", {\n  \"attributeExists\": false\n}))\n    $util.qr($keyConditionExprNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n  #end\n  $util.qr($ctx.stash.conditions.add($keyConditionExpr))\n#else\n  $util.qr($ctx.stash.conditions.add({\n  \"id\": {\n      \"attributeExists\": false\n  }\n}))\n#end\n## End - key condition **\n## Start condition block **\n#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )\n  #set( $mergedConditions = {\n  \"and\": $ctx.stash.conditions\n} )\n  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )\n  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )\n    #set( $Conditions = {\n  \"expression\": $Conditions.expression,\n  \"expressionNames\": $Conditions.expressionNames\n} )\n  #end\n  ## End condition block **\n#end\n#if( $Conditions )\n  #if( $keyConditionExprNames )\n    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))\n  #end\n  $util.qr($PutObject.put(\"condition\", $Conditions))\n#end\n#if( $ctx.stash.metadata.modelObjectKey )\n  $util.qr($PutObject.put(\"key\", $ctx.stash.metadata.modelObjectKey))\n#else\n  #set( $Key = {\n  \"id\":   $util.dynamodb.toDynamoDB($mergedValues.id)\n} )\n  $util.qr($PutObject.put(\"key\", $Key))\n#end\n$util.toJson($PutObject)\n## [End] Create Request template. **",
    "Mutation.createTodoTask.res.vtl": "## [Start] ResponseTemplate. **\n$util.qr($ctx.result.put(\"__operation\", \"Mutation\"))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **",
    "Mutation.updateTodoTask.init.1.req.vtl": "## [Start] Initialization default values. **\n$util.qr($ctx.stash.put(\"defaultValues\", $util.defaultIfNull($ctx.stash.defaultValues, {})))\n#set( $updatedAt = $util.time.nowISO8601() )\n$util.qr($ctx.stash.defaultValues.put(\"updatedAt\", $updatedAt))\n$util.toJson({\n  \"version\": \"2018-05-29\",\n  \"payload\": {}\n})\n## [End] Initialization default values. **",
    "Mutation.updateTodoTask.auth.1.req.vtl": "## [Start] Get Request template. **\n#set( $GetRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"GetItem\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $key = $ctx.stash.metadata.modelObjectKey )\n#else\n  #set( $key = {\n  \"id\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)\n} )\n#end\n$util.qr($GetRequest.put(\"key\", $key))\n$util.toJson($GetRequest)\n## [End] Get Request template. **",
    "Mutation.updateTodoTask.auth.1.res.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#end\n#set( $inputFields = $util.parseJson($util.toJson($ctx.args.input.keySet())) )\n#set( $isAuthorized = false )\n#set( $allowedFields = [] )\n#set( $nullAllowedFields = [] )\n#set( $deniedFields = {} )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized && $allowedFields.isEmpty() && $nullAllowedFields.isEmpty() )\n$util.unauthorized()\n#end\n#if( !$isAuthorized )\n  #foreach( $entry in $util.map.copyAndRetainAllKeys($ctx.args.input, $inputFields).entrySet() )\n    #if( $util.isNull($entry.value) && !$nullAllowedFields.contains($entry.key) )\n      $util.qr($deniedFields.put($entry.key, \"\"))\n    #end\n  #end\n  #foreach( $deniedField in $util.list.copyAndRemoveAll($inputFields, $allowedFields) )\n    $util.qr($deniedFields.put($deniedField, \"\"))\n  #end\n#end\n#if( $deniedFields.keySet().size() > 0 )\n  $util.error(\"Unauthorized on ${deniedFields.keySet()}\", \"Unauthorized\")\n#end\n$util.toJson({})\n## [End] Authorization Steps. **",
    "Mutation.updateTodoTask.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "Mutation.updateTodoTask.req.vtl": "## [Start] Mutation Update resolver. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n## Set the default values to put request **\n#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )\n## copy the values from input **\n$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))\n## set the typename **\n## Initialize the vars for creating ddb expression **\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $Key = $ctx.stash.metadata.modelObjectKey )\n#else\n  #set( $Key = {\n  \"id\":   $util.dynamodb.toDynamoDB($args.input.id)\n} )\n#end\n## Model key **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyFields = [] )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyFields.add(\"$entry.key\"))\n  #end\n#else\n  #set( $keyFields = [\"id\"] )\n#end\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )\n  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\"$entry.key\") )\n    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\"$entry.key\") )\n  #else\n    #set( $entryKeyAttributeName = $entry.key )\n  #end\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entryKeyAttributeName\") )\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entryKeyAttributeName\", \":$entryKeyAttributeName\"))\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n    $util.qr($expValues.put(\":$entryKeyAttributeName\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n  #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"$expression ADD\" )\n  #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"$expression REMOVE\" )\n  #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n## Begin - key condition **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyConditionExpr = {} )\n  #set( $keyConditionExprNames = {} )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyConditionExpr.put(\"keyCondition$velocityCount\", {\n  \"attributeExists\": true\n}))\n    $util.qr($keyConditionExprNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n  #end\n  $util.qr($ctx.stash.conditions.add($keyConditionExpr))\n#else\n  $util.qr($ctx.stash.conditions.add({\n  \"id\": {\n      \"attributeExists\": true\n  }\n}))\n#end\n## End - key condition **\n#if( $args.condition )\n  $util.qr($ctx.stash.conditions.add($args.condition))\n#end\n## Start condition block **\n#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )\n  #set( $mergedConditions = {\n  \"and\": $ctx.stash.conditions\n} )\n  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )\n  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )\n    #set( $Conditions = {\n  \"expression\": $Conditions.expression,\n  \"expressionNames\": $Conditions.expressionNames\n} )\n  #end\n  ## End condition block **\n#end\n#set( $UpdateItem = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"UpdateItem\",\n  \"key\": $Key,\n  \"update\": $update\n} )\n#if( $Conditions )\n  #if( $keyConditionExprNames )\n    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))\n  #end\n  $util.qr($UpdateItem.put(\"condition\", $Conditions))\n#end\n$util.toJson($UpdateItem)\n## [End] Mutation Update resolver. **",
    "Mutation.updateTodoTask.res.vtl": "## [Start] ResponseTemplate. **\n$util.qr($ctx.result.put(\"__operation\", \"Mutation\"))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **",
    "Mutation.deleteTodoTask.auth.1.req.vtl": "## [Start] Get Request template. **\n#set( $GetRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"GetItem\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $key = $ctx.stash.metadata.modelObjectKey )\n#else\n  #set( $key = {\n  \"id\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)\n} )\n#end\n$util.qr($GetRequest.put(\"key\", $key))\n$util.toJson($GetRequest)\n## [End] Get Request template. **",
    "Mutation.deleteTodoTask.auth.1.res.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
    "Mutation.deleteTodoTask.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "Mutation.deleteTodoTask.req.vtl": "## [Start] Delete Request template. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n#set( $DeleteRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"DeleteItem\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $Key = $ctx.stash.metadata.modelObjectKey )\n#else\n  #set( $Key = {\n  \"id\":   $util.dynamodb.toDynamoDB($args.input.id)\n} )\n#end\n$util.qr($DeleteRequest.put(\"key\", $Key))\n## Begin - key condition **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyConditionExpr = {} )\n  #set( $keyConditionExprNames = {} )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyConditionExpr.put(\"keyCondition$velocityCount\", {\n  \"attributeExists\": true\n}))\n    $util.qr($keyConditionExprNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n  #end\n  $util.qr($ctx.stash.conditions.add($keyConditionExpr))\n#else\n  $util.qr($ctx.stash.conditions.add({\n  \"id\": {\n      \"attributeExists\": true\n  }\n}))\n#end\n## End - key condition **\n#if( $args.condition )\n  $util.qr($ctx.stash.conditions.add($args.condition))\n#end\n## Start condition block **\n#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )\n  #set( $mergedConditions = {\n  \"and\": $ctx.stash.conditions\n} )\n  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )\n  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )\n    #set( $Conditions = {\n  \"expression\": $Conditions.expression,\n  \"expressionNames\": $Conditions.expressionNames\n} )\n  #end\n  ## End condition block **\n#end\n#if( $Conditions )\n  #if( $keyConditionExprNames )\n    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))\n  #end\n  $util.qr($DeleteRequest.put(\"condition\", $Conditions))\n#end\n$util.toJson($DeleteRequest)\n## [End] Delete Request template. **",
    "Mutation.deleteTodoTask.res.vtl": "## [Start] ResponseTemplate. **\n$util.qr($ctx.result.put(\"__operation\", \"Mutation\"))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **",
    "Subscription.onCreateTodoTask.auth.1.req.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
    "Subscription.onCreateTodoTask.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "Subscription.onCreateTodoTask.req.vtl": "## [Start] Subscription Request template. **\n$util.toJson({\n  \"version\": \"2018-05-29\",\n  \"payload\": {}\n})\n## [End] Subscription Request template. **",
    "Subscription.onCreateTodoTask.res.vtl": "## [Start] Subscription Response template. **\n$util.toJson(null)\n## [End] Subscription Response template. **",
    "Subscription.onUpdateTodoTask.auth.1.req.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
    "Subscription.onUpdateTodoTask.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "Subscription.onUpdateTodoTask.req.vtl": "## [Start] Subscription Request template. **\n$util.toJson({\n  \"version\": \"2018-05-29\",\n  \"payload\": {}\n})\n## [End] Subscription Request template. **",
    "Subscription.onUpdateTodoTask.res.vtl": "## [Start] Subscription Response template. **\n$util.toJson(null)\n## [End] Subscription Response template. **",
    "Subscription.onDeleteTodoTask.auth.1.req.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
    "Subscription.onDeleteTodoTask.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "Subscription.onDeleteTodoTask.req.vtl": "## [Start] Subscription Request template. **\n$util.toJson({\n  \"version\": \"2018-05-29\",\n  \"payload\": {}\n})\n## [End] Subscription Request template. **",
    "Subscription.onDeleteTodoTask.res.vtl": "## [Start] Subscription Response template. **\n$util.toJson(null)\n## [End] Subscription Response template. **",
    "Query.getImage.auth.1.req.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#set( $primaryFieldMap = {} )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
    "Query.getImage.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "Query.getImage.req.vtl": "## [Start] Get Request template. **\n#set( $GetRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"Query\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $expression = \"\" )\n  #set( $expressionNames = {} )\n  #set( $expressionValues = {} )\n  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    #set( $expression = \"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \" )\n    $util.qr($expressionNames.put(\"#keyCount$velocityCount\", $item.key))\n    $util.qr($expressionValues.put(\":valueCount$velocityCount\", $item.value))\n  #end\n  #set( $expression = $expression.replaceAll(\"AND $\", \"\") )\n  #set( $query = {\n  \"expression\": $expression,\n  \"expressionNames\": $expressionNames,\n  \"expressionValues\": $expressionValues\n} )\n#else\n  #set( $query = {\n  \"expression\": \"id = :id\",\n  \"expressionValues\": {\n      \":id\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))\n  }\n} )\n#end\n$util.qr($GetRequest.put(\"query\", $query))\n#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n  $util.qr($GetRequest.put(\"filter\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))\n#end\n$util.toJson($GetRequest)\n## [End] Get Request template. **",
    "Query.getImage.res.vtl": "## [Start] Get Response template. **\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#end\n#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )\n  $util.toJson($ctx.result.items[0])\n#else\n  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )\n$util.unauthorized()\n  #end\n  $util.toJson(null)\n#end\n## [End] Get Response template. **",
    "Query.listImages.auth.1.req.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#set( $primaryFieldMap = {} )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
    "Query.listImages.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "Query.listImages.req.vtl": "## [Start] List Request. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n#set( $limit = $util.defaultIfNull($args.limit, 100) )\n#set( $ListRequest = {\n  \"version\": \"2018-05-29\",\n  \"limit\": $limit\n} )\n#if( $args.nextToken )\n  #set( $ListRequest.nextToken = $args.nextToken )\n#end\n#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n  #set( $filter = $ctx.stash.authFilter )\n  #if( !$util.isNullOrEmpty($args.filter) )\n    #set( $filter = {\n  \"and\":   [$filter, $args.filter]\n} )\n  #end\n#else\n  #if( !$util.isNullOrEmpty($args.filter) )\n    #set( $filter = $args.filter )\n  #end\n#end\n#if( !$util.isNullOrEmpty($filter) )\n  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )\n  #if( $util.isNullOrEmpty($filterExpression) )\n    $util.error(\"Unable to process the filter expression\", \"Unrecognized Filter\")\n  #end\n  #if( !$util.isNullOrBlank($filterExpression.expression) )\n    #if( $filterExpression.expressionValues.size() == 0 )\n      $util.qr($filterExpression.remove(\"expressionValues\"))\n    #end\n    #set( $ListRequest.filter = $filterExpression )\n  #end\n#end\n#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"query\", $ctx.stash.modelQueryExpression))\n  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \"DESC\" )\n    #set( $ListRequest.scanIndexForward = false )\n  #else\n    #set( $ListRequest.scanIndexForward = true )\n  #end\n#else\n  $util.qr($ListRequest.put(\"operation\", \"Scan\"))\n#end\n#if( !$util.isNull($ctx.stash.metadata.index) )\n  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )\n#end\n$util.toJson($ListRequest)\n## [End] List Request. **",
    "Query.listImages.res.vtl": "## [Start] ResponseTemplate. **\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **",
    "Mutation.createImage.init.1.req.vtl": "## [Start] Initialization default values. **\n$util.qr($ctx.stash.put(\"defaultValues\", $util.defaultIfNull($ctx.stash.defaultValues, {})))\n#set( $createdAt = $util.time.nowISO8601() )\n$util.qr($ctx.stash.defaultValues.put(\"id\", $util.autoId()))\n$util.qr($ctx.stash.defaultValues.put(\"createdAt\", $createdAt))\n$util.qr($ctx.stash.defaultValues.put(\"updatedAt\", $createdAt))\n$util.toJson({\n  \"version\": \"2018-05-29\",\n  \"payload\": {}\n})\n## [End] Initialization default values. **",
    "Mutation.createImage.auth.1.req.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $inputFields = $util.parseJson($util.toJson($ctx.args.input.keySet())) )\n#set( $isAuthorized = false )\n#set( $allowedFields = [] )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized && $allowedFields.isEmpty() )\n$util.unauthorized()\n#end\n#if( !$isAuthorized )\n  #set( $deniedFields = $util.list.copyAndRemoveAll($inputFields, $allowedFields) )\n  #if( $deniedFields.size() > 0 )\n    $util.error(\"Unauthorized on ${deniedFields}\", \"Unauthorized\")\n  #end\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
    "Mutation.createImage.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "Mutation.createImage.req.vtl": "## [Start] Create Request template. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n## Set the default values to put request **\n#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )\n## copy the values from input **\n$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))\n## set the typename **\n$util.qr($mergedValues.put(\"__typename\", \"Image\"))\n#set( $PutObject = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"PutItem\",\n  \"attributeValues\":   $util.dynamodb.toMapValues($mergedValues),\n  \"condition\": $condition\n} )\n#if( $args.condition )\n  $util.qr($ctx.stash.conditions.add($args.condition))\n#end\n## Begin - key condition **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyConditionExpr = {} )\n  #set( $keyConditionExprNames = {} )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyConditionExpr.put(\"keyCondition$velocityCount\", {\n  \"attributeExists\": false\n}))\n    $util.qr($keyConditionExprNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n  #end\n  $util.qr($ctx.stash.conditions.add($keyConditionExpr))\n#else\n  $util.qr($ctx.stash.conditions.add({\n  \"id\": {\n      \"attributeExists\": false\n  }\n}))\n#end\n## End - key condition **\n## Start condition block **\n#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )\n  #set( $mergedConditions = {\n  \"and\": $ctx.stash.conditions\n} )\n  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )\n  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )\n    #set( $Conditions = {\n  \"expression\": $Conditions.expression,\n  \"expressionNames\": $Conditions.expressionNames\n} )\n  #end\n  ## End condition block **\n#end\n#if( $Conditions )\n  #if( $keyConditionExprNames )\n    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))\n  #end\n  $util.qr($PutObject.put(\"condition\", $Conditions))\n#end\n#if( $ctx.stash.metadata.modelObjectKey )\n  $util.qr($PutObject.put(\"key\", $ctx.stash.metadata.modelObjectKey))\n#else\n  #set( $Key = {\n  \"id\":   $util.dynamodb.toDynamoDB($mergedValues.id)\n} )\n  $util.qr($PutObject.put(\"key\", $Key))\n#end\n$util.toJson($PutObject)\n## [End] Create Request template. **",
    "Mutation.createImage.res.vtl": "## [Start] ResponseTemplate. **\n$util.qr($ctx.result.put(\"__operation\", \"Mutation\"))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **",
    "Mutation.updateImage.init.1.req.vtl": "## [Start] Initialization default values. **\n$util.qr($ctx.stash.put(\"defaultValues\", $util.defaultIfNull($ctx.stash.defaultValues, {})))\n#set( $updatedAt = $util.time.nowISO8601() )\n$util.qr($ctx.stash.defaultValues.put(\"updatedAt\", $updatedAt))\n$util.toJson({\n  \"version\": \"2018-05-29\",\n  \"payload\": {}\n})\n## [End] Initialization default values. **",
    "Mutation.updateImage.auth.1.req.vtl": "## [Start] Get Request template. **\n#set( $GetRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"GetItem\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $key = $ctx.stash.metadata.modelObjectKey )\n#else\n  #set( $key = {\n  \"id\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)\n} )\n#end\n$util.qr($GetRequest.put(\"key\", $key))\n$util.toJson($GetRequest)\n## [End] Get Request template. **",
    "Mutation.updateImage.auth.1.res.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#end\n#set( $inputFields = $util.parseJson($util.toJson($ctx.args.input.keySet())) )\n#set( $isAuthorized = false )\n#set( $allowedFields = [] )\n#set( $nullAllowedFields = [] )\n#set( $deniedFields = {} )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized && $allowedFields.isEmpty() && $nullAllowedFields.isEmpty() )\n$util.unauthorized()\n#end\n#if( !$isAuthorized )\n  #foreach( $entry in $util.map.copyAndRetainAllKeys($ctx.args.input, $inputFields).entrySet() )\n    #if( $util.isNull($entry.value) && !$nullAllowedFields.contains($entry.key) )\n      $util.qr($deniedFields.put($entry.key, \"\"))\n    #end\n  #end\n  #foreach( $deniedField in $util.list.copyAndRemoveAll($inputFields, $allowedFields) )\n    $util.qr($deniedFields.put($deniedField, \"\"))\n  #end\n#end\n#if( $deniedFields.keySet().size() > 0 )\n  $util.error(\"Unauthorized on ${deniedFields.keySet()}\", \"Unauthorized\")\n#end\n$util.toJson({})\n## [End] Authorization Steps. **",
    "Mutation.updateImage.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "Mutation.updateImage.req.vtl": "## [Start] Mutation Update resolver. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n## Set the default values to put request **\n#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )\n## copy the values from input **\n$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))\n## set the typename **\n## Initialize the vars for creating ddb expression **\n#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $Key = $ctx.stash.metadata.modelObjectKey )\n#else\n  #set( $Key = {\n  \"id\":   $util.dynamodb.toDynamoDB($args.input.id)\n} )\n#end\n## Model key **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyFields = [] )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyFields.add(\"$entry.key\"))\n  #end\n#else\n  #set( $keyFields = [\"id\"] )\n#end\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )\n  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\"$entry.key\") )\n    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\"$entry.key\") )\n  #else\n    #set( $entryKeyAttributeName = $entry.key )\n  #end\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#$entryKeyAttributeName\") )\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n  #else\n    $util.qr($expSet.put(\"#$entryKeyAttributeName\", \":$entryKeyAttributeName\"))\n    $util.qr($expNames.put(\"#$entryKeyAttributeName\", \"$entry.key\"))\n    $util.qr($expValues.put(\":$entryKeyAttributeName\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n  #foreach( $entry in $expSet.entrySet() )\n    #set( $expression = \"$expression $entry.key = $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"$expression ADD\" )\n  #foreach( $entry in $expAdd.entrySet() )\n    #set( $expression = \"$expression $entry.key $entry.value\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"$expression REMOVE\" )\n  #foreach( $entry in $expRemove )\n    #set( $expression = \"$expression $entry\" )\n    #if( $foreach.hasNext() )\n      #set( $expression = \"$expression,\" )\n    #end\n  #end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !$expNames.isEmpty() )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !$expValues.isEmpty() )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n## Begin - key condition **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyConditionExpr = {} )\n  #set( $keyConditionExprNames = {} )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyConditionExpr.put(\"keyCondition$velocityCount\", {\n  \"attributeExists\": true\n}))\n    $util.qr($keyConditionExprNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n  #end\n  $util.qr($ctx.stash.conditions.add($keyConditionExpr))\n#else\n  $util.qr($ctx.stash.conditions.add({\n  \"id\": {\n      \"attributeExists\": true\n  }\n}))\n#end\n## End - key condition **\n#if( $args.condition )\n  $util.qr($ctx.stash.conditions.add($args.condition))\n#end\n## Start condition block **\n#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )\n  #set( $mergedConditions = {\n  \"and\": $ctx.stash.conditions\n} )\n  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )\n  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )\n    #set( $Conditions = {\n  \"expression\": $Conditions.expression,\n  \"expressionNames\": $Conditions.expressionNames\n} )\n  #end\n  ## End condition block **\n#end\n#set( $UpdateItem = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"UpdateItem\",\n  \"key\": $Key,\n  \"update\": $update\n} )\n#if( $Conditions )\n  #if( $keyConditionExprNames )\n    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))\n  #end\n  $util.qr($UpdateItem.put(\"condition\", $Conditions))\n#end\n$util.toJson($UpdateItem)\n## [End] Mutation Update resolver. **",
    "Mutation.updateImage.res.vtl": "## [Start] ResponseTemplate. **\n$util.qr($ctx.result.put(\"__operation\", \"Mutation\"))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **",
    "Mutation.deleteImage.auth.1.req.vtl": "## [Start] Get Request template. **\n#set( $GetRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"GetItem\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $key = $ctx.stash.metadata.modelObjectKey )\n#else\n  #set( $key = {\n  \"id\":   $util.dynamodb.toDynamoDB($ctx.args.input.id)\n} )\n#end\n$util.qr($GetRequest.put(\"key\", $key))\n$util.toJson($GetRequest)\n## [End] Get Request template. **",
    "Mutation.deleteImage.auth.1.res.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
    "Mutation.deleteImage.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "Mutation.deleteImage.req.vtl": "## [Start] Delete Request template. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n#set( $DeleteRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"DeleteItem\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $Key = $ctx.stash.metadata.modelObjectKey )\n#else\n  #set( $Key = {\n  \"id\":   $util.dynamodb.toDynamoDB($args.input.id)\n} )\n#end\n$util.qr($DeleteRequest.put(\"key\", $Key))\n## Begin - key condition **\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $keyConditionExpr = {} )\n  #set( $keyConditionExprNames = {} )\n  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    $util.qr($keyConditionExpr.put(\"keyCondition$velocityCount\", {\n  \"attributeExists\": true\n}))\n    $util.qr($keyConditionExprNames.put(\"#keyCondition$velocityCount\", \"$entry.key\"))\n  #end\n  $util.qr($ctx.stash.conditions.add($keyConditionExpr))\n#else\n  $util.qr($ctx.stash.conditions.add({\n  \"id\": {\n      \"attributeExists\": true\n  }\n}))\n#end\n## End - key condition **\n#if( $args.condition )\n  $util.qr($ctx.stash.conditions.add($args.condition))\n#end\n## Start condition block **\n#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )\n  #set( $mergedConditions = {\n  \"and\": $ctx.stash.conditions\n} )\n  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )\n  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )\n    #set( $Conditions = {\n  \"expression\": $Conditions.expression,\n  \"expressionNames\": $Conditions.expressionNames\n} )\n  #end\n  ## End condition block **\n#end\n#if( $Conditions )\n  #if( $keyConditionExprNames )\n    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))\n  #end\n  $util.qr($DeleteRequest.put(\"condition\", $Conditions))\n#end\n$util.toJson($DeleteRequest)\n## [End] Delete Request template. **",
    "Mutation.deleteImage.res.vtl": "## [Start] ResponseTemplate. **\n$util.qr($ctx.result.put(\"__operation\", \"Mutation\"))\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **",
    "Subscription.onCreateImage.auth.1.req.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
    "Subscription.onCreateImage.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "Subscription.onCreateImage.req.vtl": "## [Start] Subscription Request template. **\n$util.toJson({\n  \"version\": \"2018-05-29\",\n  \"payload\": {}\n})\n## [End] Subscription Request template. **",
    "Subscription.onCreateImage.res.vtl": "## [Start] Subscription Response template. **\n$util.toJson(null)\n## [End] Subscription Response template. **",
    "Subscription.onUpdateImage.auth.1.req.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
    "Subscription.onUpdateImage.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "Subscription.onUpdateImage.req.vtl": "## [Start] Subscription Request template. **\n$util.toJson({\n  \"version\": \"2018-05-29\",\n  \"payload\": {}\n})\n## [End] Subscription Request template. **",
    "Subscription.onUpdateImage.res.vtl": "## [Start] Subscription Response template. **\n$util.toJson(null)\n## [End] Subscription Response template. **",
    "Subscription.onDeleteImage.auth.1.req.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
    "Subscription.onDeleteImage.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "Subscription.onDeleteImage.req.vtl": "## [Start] Subscription Request template. **\n$util.toJson({\n  \"version\": \"2018-05-29\",\n  \"payload\": {}\n})\n## [End] Subscription Request template. **",
    "Subscription.onDeleteImage.res.vtl": "## [Start] Subscription Response template. **\n$util.toJson(null)\n## [End] Subscription Response template. **",
    "Query.getSharedWith.auth.1.req.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#set( $primaryFieldMap = {} )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
    "Query.getSharedWith.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "Query.getSharedWith.req.vtl": "## [Start] Get Request template. **\n#set( $GetRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"Query\"\n} )\n#if( $ctx.stash.metadata.modelObjectKey )\n  #set( $expression = \"\" )\n  #set( $expressionNames = {} )\n  #set( $expressionValues = {} )\n  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )\n    #set( $expression = \"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \" )\n    $util.qr($expressionNames.put(\"#keyCount$velocityCount\", $item.key))\n    $util.qr($expressionValues.put(\":valueCount$velocityCount\", $item.value))\n  #end\n  #set( $expression = $expression.replaceAll(\"AND $\", \"\") )\n  #set( $query = {\n  \"expression\": $expression,\n  \"expressionNames\": $expressionNames,\n  \"expressionValues\": $expressionValues\n} )\n#else\n  #set( $query = {\n  \"expression\": \"id = :id\",\n  \"expressionValues\": {\n      \":id\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))\n  }\n} )\n#end\n$util.qr($GetRequest.put(\"query\", $query))\n#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n  $util.qr($GetRequest.put(\"filter\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))\n#end\n$util.toJson($GetRequest)\n## [End] Get Request template. **",
    "Query.getSharedWith.res.vtl": "## [Start] Get Response template. **\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#end\n#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )\n  $util.toJson($ctx.result.items[0])\n#else\n  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )\n$util.unauthorized()\n  #end\n  $util.toJson(null)\n#end\n## [End] Get Response template. **",
    "Query.listSharedWiths.auth.1.req.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#set( $primaryFieldMap = {} )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
    "Query.listSharedWiths.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **\n#if( !$ctx.stash.get(\"hasAuth\") )\n  $util.unauthorized()\n#end\n$util.toJson({})\n## [End] Sandbox Mode Disabled. **",
    "Query.listSharedWiths.req.vtl": "## [Start] List Request. **\n#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n#set( $limit = $util.defaultIfNull($args.limit, 100) )\n#set( $ListRequest = {\n  \"version\": \"2018-05-29\",\n  \"limit\": $limit\n} )\n#if( $args.nextToken )\n  #set( $ListRequest.nextToken = $args.nextToken )\n#end\n#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n  #set( $filter = $ctx.stash.authFilter )\n  #if( !$util.isNullOrEmpty($args.filter) )\n    #set( $filter = {\n  \"and\":   [$filter, $args.filter]\n} )\n  #end\n#else\n  #if( !$util.isNullOrEmpty($args.filter) )\n    #set( $filter = $args.filter )\n  #end\n#end\n#if( !$util.isNullOrEmpty($filter) )\n  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )\n  #if( $util.isNullOrEmpty($filterExpression) )\n    $util.error(\"Unable to process the filter expression\", \"Unrecognized Filter\")\n  #end\n  #if( !$util.isNullOrBlank($filterExpression.expression) )\n    #if( $filterExpression.expressionValues.size() == 0 )\n      $util.qr($filterExpression.remove(\"expressionValues\"))\n    #end\n    #set( $ListRequest.filter = $filterExpression )\n  #end\n#end\n#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"query\", $ctx.stash.modelQueryExpression))\n  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \"DESC\" )\n    #set( $ListRequest.scanIndexForward = false )\n  #else\n    #set( $ListRequest.scanIndexForward = true )\n  #end\n#else\n  $util.qr($ListRequest.put(\"operation\", \"Scan\"))\n#end\n#if( !$util.isNull($ctx.stash.metadata.index) )\n  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )\n#end\n$util.toJson($ListRequest)\n## [End] List Request. **",
    "Query.listSharedWiths.res.vtl": "## [Start] ResponseTemplate. **\n#if( $ctx.error )\n  $util.error($ctx.error.message, $ctx.error.type)\n#else\n  $util.toJson($ctx.result)\n#end\n## [End] ResponseTemplate. **",
    "TodoTask.image.auth.1.req.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
    "TodoTask.image.req.vtl": "#if( $ctx.source.deniedField )\n  #return($util.toJson(null))\n#end\n#if( $util.isNull($ctx.source.imageId) )\n  #return\n#else\n  #set( $GetRequest = {\n  \"version\": \"2018-05-29\",\n  \"operation\": \"Query\"\n} )\n  $util.qr($GetRequest.put(\"query\", {\n  \"expression\": \"#partitionKey = :partitionValue\",\n  \"expressionNames\": {\n      \"#partitionKey\": \"id\"\n  },\n  \"expressionValues\": {\n      \":partitionValue\": $util.parseJson($util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.imageId, \"___xamznone____\")))\n  }\n}))\n  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n    $util.qr($GetRequest.put(\"filter\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))\n  #end\n  $util.toJson($GetRequest)\n#end",
    "TodoTask.image.res.vtl": "#if( $ctx.error )\n$util.error($ctx.error.message, $ctx.error.type)\n#else\n  #if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )\n    $util.toJson($ctx.result.items[0])\n  #else\n    #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )\n$util.unauthorized()\n    #end\n    $util.toJson(null)\n  #end\n#end",
    "TodoTask.sharedWith.auth.1.req.vtl": "## [Start] Authorization Steps. **\n$util.qr($ctx.stash.put(\"hasAuth\", true))\n#set( $isAuthorized = false )\n#if( $util.authType() == \"API Key Authorization\" )\n  #set( $isAuthorized = true )\n#end\n#if( !$isAuthorized && $util.isNull($ctx.stash.authFilter) )\n$util.unauthorized()\n#end\n$util.toJson({\"version\":\"2018-05-29\",\"payload\":{}})\n## [End] Authorization Steps. **",
    "TodoTask.sharedWith.req.vtl": "#if( $ctx.source.deniedField )\n  #return($util.toJson(null))\n#end\n#if( $util.isNull($ctx.source.id) )\n  #set( $result = {\n  \"items\":   []\n} )\n  #return($result)\n#else\n  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )\n  #set( $query = {\n  \"expression\": \"#partitionKey = :partitionKey\",\n  \"expressionNames\": {\n      \"#partitionKey\": \"todoTaskSharedWithId\"\n  },\n  \"expressionValues\": {\n      \":partitionKey\": $util.dynamodb.toDynamoDB($context.source.id)\n  }\n} )\n  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )\n  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )\n    #set( $filter = $ctx.stash.authFilter )\n    #if( !$util.isNullOrEmpty($args.filter) )\n      #set( $filter = {\n  \"and\":   [$filter, $args.filter]\n} )\n    #end\n  #else\n    #if( !$util.isNullOrEmpty($args.filter) )\n      #set( $filter = $args.filter )\n    #end\n  #end\n  #if( !$util.isNullOrEmpty($filter) )\n    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )\n    #if( !$util.isNullOrBlank($filterExpression.expression) )\n      #if( $filterExpression.expressionValues.size() == 0 )\n        $util.qr($filterExpression.remove(\"expressionValues\"))\n      #end\n      #set( $filter = $filterExpression )\n    #end\n  #end\n{\n      \"version\": \"2018-05-29\",\n      \"operation\": \"Query\",\n      \"query\":     $util.toJson($query),\n      \"scanIndexForward\":     #if( $context.args.sortDirection )\n      #if( $context.args.sortDirection == \"ASC\" )\ntrue\n      #else\nfalse\n      #end\n    #else\ntrue\n    #end,\n      \"filter\":     #if( $filter )\n$util.toJson($filter)\n    #else\nnull\n    #end,\n      \"limit\": $limit,\n      \"nextToken\":     #if( $context.args.nextToken )\n$util.toJson($context.args.nextToken)\n    #else\nnull\n    #end,\n      \"index\": \"gsi-TodoTask.sharedWith\"\n  }\n#end",
    "TodoTask.sharedWith.res.vtl": "#if( $ctx.error )\n$util.error($ctx.error.message, $ctx.error.type)\n#else\n  #if( !$result )\n    #set( $result = $ctx.result )\n  #end\n  $util.toJson($result)\n#end"
  },
  "schema": "\nenum TodoStatusEnum {\n  New\n  Active\n  Complete\n  Deleted\n}\n\ntype TodoTask {\n  description: String!\n  completedDate: AWSDateTime\n  status: TodoStatusEnum!\n  sharedWith(filter: ModelSharedWithFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelSharedWithConnection\n  image: Image\n  imageId: ID\n  id: ID!\n  createdAt: AWSDateTime!\n  updatedAt: AWSDateTime!\n}\n\ntype Image {\n  url: String!\n  id: ID!\n  createdAt: AWSDateTime!\n  updatedAt: AWSDateTime!\n}\n\ninput TaskCompletedInput {\n  id: ID!\n  emailAddress: String!\n}\n\ntype SharedWith {\n  emailAddress: String!\n  date: AWSDateTime!\n  id: ID!\n  createdAt: AWSDateTime!\n  updatedAt: AWSDateTime!\n  todoTaskSharedWithId: ID\n}\n\ntype Mutation {\n  shareTask(id: ID!, emailAddress: String!): Boolean @aws_api_key\n  notifyTaskCompleted(input: TaskCompletedInput): SharedWith\n  createTodoTask(input: CreateTodoTaskInput!, condition: ModelTodoTaskConditionInput): TodoTask\n  updateTodoTask(input: UpdateTodoTaskInput!, condition: ModelTodoTaskConditionInput): TodoTask\n  deleteTodoTask(input: DeleteTodoTaskInput!, condition: ModelTodoTaskConditionInput): TodoTask\n  createImage(input: CreateImageInput!, condition: ModelImageConditionInput): Image\n  updateImage(input: UpdateImageInput!, condition: ModelImageConditionInput): Image\n  deleteImage(input: DeleteImageInput!, condition: ModelImageConditionInput): Image\n}\n\ninput ModelStringInput {\n  ne: String\n  eq: String\n  le: String\n  lt: String\n  ge: String\n  gt: String\n  contains: String\n  notContains: String\n  between: [String]\n  beginsWith: String\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n  size: ModelSizeInput\n}\n\ninput ModelIntInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  between: [Int]\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n}\n\ninput ModelFloatInput {\n  ne: Float\n  eq: Float\n  le: Float\n  lt: Float\n  ge: Float\n  gt: Float\n  between: [Float]\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n}\n\ninput ModelBooleanInput {\n  ne: Boolean\n  eq: Boolean\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n}\n\ninput ModelIDInput {\n  ne: ID\n  eq: ID\n  le: ID\n  lt: ID\n  ge: ID\n  gt: ID\n  contains: ID\n  notContains: ID\n  between: [ID]\n  beginsWith: ID\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n  size: ModelSizeInput\n}\n\ninput ModelSubscriptionStringInput {\n  ne: String\n  eq: String\n  le: String\n  lt: String\n  ge: String\n  gt: String\n  contains: String\n  notContains: String\n  between: [String]\n  beginsWith: String\n  in: [String]\n  notIn: [String]\n}\n\ninput ModelSubscriptionIntInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  between: [Int]\n  in: [Int]\n  notIn: [Int]\n}\n\ninput ModelSubscriptionFloatInput {\n  ne: Float\n  eq: Float\n  le: Float\n  lt: Float\n  ge: Float\n  gt: Float\n  between: [Float]\n  in: [Float]\n  notIn: [Float]\n}\n\ninput ModelSubscriptionBooleanInput {\n  ne: Boolean\n  eq: Boolean\n}\n\ninput ModelSubscriptionIDInput {\n  ne: ID\n  eq: ID\n  le: ID\n  lt: ID\n  ge: ID\n  gt: ID\n  contains: ID\n  notContains: ID\n  between: [ID]\n  beginsWith: ID\n  in: [ID]\n  notIn: [ID]\n}\n\nenum ModelAttributeTypes {\n  binary\n  binarySet\n  bool\n  list\n  map\n  number\n  numberSet\n  string\n  stringSet\n  _null\n}\n\ninput ModelSizeInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  between: [Int]\n}\n\nenum ModelSortDirection {\n  ASC\n  DESC\n}\n\ntype ModelTodoTaskConnection {\n  items: [TodoTask]!\n  nextToken: String\n}\n\ninput ModelTodoStatusEnumInput {\n  eq: TodoStatusEnum\n  ne: TodoStatusEnum\n}\n\ninput ModelTodoTaskFilterInput {\n  description: ModelStringInput\n  completedDate: ModelStringInput\n  status: ModelTodoStatusEnumInput\n  imageId: ModelIDInput\n  and: [ModelTodoTaskFilterInput]\n  or: [ModelTodoTaskFilterInput]\n  not: ModelTodoTaskFilterInput\n}\n\ntype Query {\n  getTodoTask(id: ID!): TodoTask\n  listTodoTasks(filter: ModelTodoTaskFilterInput, limit: Int, nextToken: String): ModelTodoTaskConnection\n  getImage(id: ID!): Image\n  listImages(filter: ModelImageFilterInput, limit: Int, nextToken: String): ModelImageConnection\n  getSharedWith(id: ID!): SharedWith\n  listSharedWiths(filter: ModelSharedWithFilterInput, limit: Int, nextToken: String): ModelSharedWithConnection\n}\n\ninput ModelTodoTaskConditionInput {\n  description: ModelStringInput\n  completedDate: ModelStringInput\n  status: ModelTodoStatusEnumInput\n  imageId: ModelIDInput\n  and: [ModelTodoTaskConditionInput]\n  or: [ModelTodoTaskConditionInput]\n  not: ModelTodoTaskConditionInput\n}\n\ninput CreateTodoTaskInput {\n  description: String!\n  completedDate: AWSDateTime\n  status: TodoStatusEnum!\n  imageId: ID\n  id: ID\n}\n\ninput UpdateTodoTaskInput {\n  description: String\n  completedDate: AWSDateTime\n  status: TodoStatusEnum\n  imageId: ID\n  id: ID!\n}\n\ninput DeleteTodoTaskInput {\n  id: ID!\n}\n\ntype Subscription {\n  onCreateTodoTask: TodoTask @aws_subscribe(mutations: [\"createTodoTask\"])\n  onUpdateTodoTask: TodoTask @aws_subscribe(mutations: [\"updateTodoTask\"])\n  onDeleteTodoTask: TodoTask @aws_subscribe(mutations: [\"deleteTodoTask\"])\n  onCreateImage: Image @aws_subscribe(mutations: [\"createImage\"])\n  onUpdateImage: Image @aws_subscribe(mutations: [\"updateImage\"])\n  onDeleteImage: Image @aws_subscribe(mutations: [\"deleteImage\"])\n}\n\ntype ModelImageConnection {\n  items: [Image]!\n  nextToken: String\n}\n\ninput ModelImageFilterInput {\n  url: ModelStringInput\n  and: [ModelImageFilterInput]\n  or: [ModelImageFilterInput]\n  not: ModelImageFilterInput\n}\n\ninput ModelImageConditionInput {\n  url: ModelStringInput\n  and: [ModelImageConditionInput]\n  or: [ModelImageConditionInput]\n  not: ModelImageConditionInput\n}\n\ninput CreateImageInput {\n  url: String!\n  id: ID\n}\n\ninput UpdateImageInput {\n  url: String\n  id: ID!\n}\n\ninput DeleteImageInput {\n  id: ID!\n}\n\ntype ModelSharedWithConnection {\n  items: [SharedWith]!\n  nextToken: String\n}\n\ninput ModelSharedWithFilterInput {\n  emailAddress: ModelStringInput\n  date: ModelStringInput\n  and: [ModelSharedWithFilterInput]\n  or: [ModelSharedWithFilterInput]\n  not: ModelSharedWithFilterInput\n  todoTaskSharedWithId: ModelIDInput\n}\n\n",
  "stacks": {
    "TodoTask": {
      "Parameters": {
        "DynamoDBModelTableReadIOPS": {
          "Type": "Number",
          "Default": 5,
          "Description": "The number of read IOPS the table should support."
        },
        "DynamoDBModelTableWriteIOPS": {
          "Type": "Number",
          "Default": 5,
          "Description": "The number of write IOPS the table should support."
        },
        "DynamoDBBillingMode": {
          "Type": "String",
          "Default": "PAY_PER_REQUEST",
          "AllowedValues": [
            "PAY_PER_REQUEST",
            "PROVISIONED"
          ],
          "Description": "Configure @model types to create DynamoDB tables with PAY_PER_REQUEST or PROVISIONED billing modes."
        },
        "DynamoDBEnablePointInTimeRecovery": {
          "Type": "String",
          "Default": "false",
          "AllowedValues": [
            "true",
            "false"
          ],
          "Description": "Whether to enable Point in Time Recovery on the table."
        },
        "DynamoDBEnableServerSideEncryption": {
          "Type": "String",
          "Default": "true",
          "AllowedValues": [
            "true",
            "false"
          ],
          "Description": "Enable server side encryption powered by KMS."
        },
        "referencetotransformerrootstackenv10C5A902Ref": {
          "Type": "String"
        },
        "referencetotransformerrootstackGraphQLAPI20497F53ApiId": {
          "Type": "String"
        },
        "referencetotransformerrootstackGraphQLAPINONEDS2BA9D1C8Name": {
          "Type": "String"
        },
        "referencetotransformerrootstackS3DeploymentBucket7592718ARef": {
          "Type": "String"
        },
        "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref": {
          "Type": "String"
        }
      },
      "Conditions": {
        "HasEnvironmentParameter": {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "referencetotransformerrootstackenv10C5A902Ref"
                },
                "NONE"
              ]
            }
          ]
        },
        "ShouldUseServerSideEncryption": {
          "Fn::Equals": [
            {
              "Ref": "DynamoDBEnableServerSideEncryption"
            },
            "true"
          ]
        },
        "ShouldUsePayPerRequestBilling": {
          "Fn::Equals": [
            {
              "Ref": "DynamoDBBillingMode"
            },
            "PAY_PER_REQUEST"
          ]
        },
        "ShouldUsePointInTimeRecovery": {
          "Fn::Equals": [
            {
              "Ref": "DynamoDBEnablePointInTimeRecovery"
            },
            "true"
          ]
        },
        "CDKMetadataAvailable": {
          "Fn::Or": [
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "af-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-east-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-northeast-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-northeast-2"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-southeast-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-southeast-2"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ca-central-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "cn-north-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "cn-northwest-1"
                  ]
                }
              ]
            },
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-central-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-north-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-west-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-west-2"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-west-3"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "me-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "sa-east-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-east-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-east-2"
                  ]
                }
              ]
            },
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-west-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-west-2"
                  ]
                }
              ]
            }
          ]
        }
      },
      "Resources": {
        "TodoTaskTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "BillingMode": {
              "Fn::If": [
                "ShouldUsePayPerRequestBilling",
                "PAY_PER_REQUEST",
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "PointInTimeRecoverySpecification": {
              "Fn::If": [
                "ShouldUsePointInTimeRecovery",
                {
                  "PointInTimeRecoveryEnabled": true
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "ProvisionedThroughput": {
              "Fn::If": [
                "ShouldUsePayPerRequestBilling",
                {
                  "Ref": "AWS::NoValue"
                },
                {
                  "ReadCapacityUnits": {
                    "Ref": "DynamoDBModelTableReadIOPS"
                  },
                  "WriteCapacityUnits": {
                    "Ref": "DynamoDBModelTableWriteIOPS"
                  }
                }
              ]
            },
            "SSESpecification": {
              "SSEEnabled": {
                "Fn::If": [
                  "ShouldUseServerSideEncryption",
                  true,
                  false
                ]
              }
            },
            "StreamSpecification": {
              "StreamViewType": "NEW_AND_OLD_IMAGES"
            },
            "TableName": {
              "Fn::Join": [
                "",
                [
                  "TodoTask-",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "-",
                  {
                    "Ref": "referencetotransformerrootstackenv10C5A902Ref"
                  }
                ]
              ]
            }
          },
          "UpdateReplacePolicy": "Delete",
          "DeletionPolicy": "Delete",
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/TodoTaskTable/Resource"
          }
        },
        "TodoTaskIAMRoleABAC7A55": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Action": "sts:AssumeRole",
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "appsync.amazonaws.com"
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "RoleName": {
              "Fn::Join": [
                "",
                [
                  "TodoTaskIAMRoleea8ea2-",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "-",
                  {
                    "Ref": "referencetotransformerrootstackenv10C5A902Ref"
                  }
                ]
              ]
            }
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/TodoTaskIAMRole/Resource"
          }
        },
        "TodoTaskIAMRoleDefaultPolicyDCD20793": {
          "Type": "AWS::IAM::Policy",
          "Properties": {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:Query",
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:ConditionCheckItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "TodoTaskTable",
                        "Arn"
                      ]
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "TodoTaskIAMRoleDefaultPolicyDCD20793",
            "Roles": [
              {
                "Ref": "TodoTaskIAMRoleABAC7A55"
              }
            ]
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/TodoTaskIAMRole/DefaultPolicy/Resource"
          }
        },
        "DynamoDBAccess71ABE5AE": {
          "Type": "AWS::IAM::Policy",
          "Properties": {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:PutItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:Query",
                    "dynamodb:UpdateItem"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": [
                        "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}",
                        {
                          "tablename": {
                            "Fn::Join": [
                              "",
                              [
                                "TodoTask-",
                                {
                                  "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                                },
                                "-",
                                {
                                  "Ref": "referencetotransformerrootstackenv10C5A902Ref"
                                }
                              ]
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*",
                        {
                          "tablename": {
                            "Fn::Join": [
                              "",
                              [
                                "TodoTask-",
                                {
                                  "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                                },
                                "-",
                                {
                                  "Ref": "referencetotransformerrootstackenv10C5A902Ref"
                                }
                              ]
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "DynamoDBAccess71ABE5AE",
            "Roles": [
              {
                "Ref": "TodoTaskIAMRoleABAC7A55"
              }
            ]
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/DynamoDBAccess/Resource"
          }
        },
        "TodoTaskDataSource": {
          "Type": "AWS::AppSync::DataSource",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "Name": "TodoTaskTable",
            "Type": "AMAZON_DYNAMODB",
            "DynamoDBConfig": {
              "AwsRegion": {
                "Ref": "AWS::Region"
              },
              "TableName": {
                "Ref": "TodoTaskTable"
              }
            },
            "ServiceRoleArn": {
              "Fn::GetAtt": [
                "TodoTaskIAMRoleABAC7A55",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "TodoTaskIAMRoleABAC7A55"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/TodoTaskDataSource/Resource"
          }
        },
        "QuerygetTodoTaskauth0FunctionQuerygetTodoTaskauth0FunctionAppSyncFunction86F90594": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Ref": "referencetotransformerrootstackGraphQLAPINONEDS2BA9D1C8Name"
            },
            "FunctionVersion": "2018-05-29",
            "Name": "QuerygetTodoTaskauth0Function",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Query.getTodoTask.auth.1.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson({})"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/QuerygetTodoTaskauth0Function/QuerygetTodoTaskauth0Function.AppSyncFunction"
          }
        },
        "QuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunctionD5099704": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Ref": "referencetotransformerrootstackGraphQLAPINONEDS2BA9D1C8Name"
            },
            "FunctionVersion": "2018-05-29",
            "Name": "QuerygetTodoTaskpostAuth0Function",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Query.getTodoTask.postAuth.1.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson({})"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/QuerygetTodoTaskpostAuth0Function/QuerygetTodoTaskpostAuth0Function.AppSyncFunction"
          }
        },
        "QueryGetTodoTaskDataResolverFnQueryGetTodoTaskDataResolverFnAppSyncFunction007E51AB": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "TodoTaskDataSource",
                "Name"
              ]
            },
            "FunctionVersion": "2018-05-29",
            "Name": "QueryGetTodoTaskDataResolverFn",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Query.getTodoTask.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Query.getTodoTask.res.vtl"
                ]
              ]
            }
          },
          "DependsOn": [
            "TodoTaskDataSource"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/QueryGetTodoTaskDataResolverFn/QueryGetTodoTaskDataResolverFn.AppSyncFunction"
          }
        },
        "GetTodoTaskResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "getTodoTask",
            "TypeName": "Query",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Fn::GetAtt": [
                    "QuerygetTodoTaskauth0FunctionQuerygetTodoTaskauth0FunctionAppSyncFunction86F90594",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "QuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunctionD5099704",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "QueryGetTodoTaskDataResolverFnQueryGetTodoTaskDataResolverFnAppSyncFunction007E51AB",
                    "FunctionId"
                  ]
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"Query\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"getTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"",
                  {
                    "Ref": "TodoTaskTable"
                  },
                  "\"))\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/queryGetTodoTaskResolver"
          }
        },
        "QueryListTodoTasksDataResolverFnQueryListTodoTasksDataResolverFnAppSyncFunction521C1E2E": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "TodoTaskDataSource",
                "Name"
              ]
            },
            "FunctionVersion": "2018-05-29",
            "Name": "QueryListTodoTasksDataResolverFn",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Query.listTodoTasks.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Query.listTodoTasks.res.vtl"
                ]
              ]
            }
          },
          "DependsOn": [
            "TodoTaskDataSource"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/QueryListTodoTasksDataResolverFn/QueryListTodoTasksDataResolverFn.AppSyncFunction"
          }
        },
        "ListTodoTaskResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "listTodoTasks",
            "TypeName": "Query",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Fn::GetAtt": [
                    "QuerygetTodoTaskauth0FunctionQuerygetTodoTaskauth0FunctionAppSyncFunction86F90594",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "QuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunctionD5099704",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "QueryListTodoTasksDataResolverFnQueryListTodoTasksDataResolverFnAppSyncFunction521C1E2E",
                    "FunctionId"
                  ]
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"Query\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"listTodoTasks\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"",
                  {
                    "Ref": "TodoTaskTable"
                  },
                  "\"))\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/queryListTodoTasksResolver"
          }
        },
        "MutationcreateTodoTaskinit0FunctionMutationcreateTodoTaskinit0FunctionAppSyncFunction82C54390": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Ref": "referencetotransformerrootstackGraphQLAPINONEDS2BA9D1C8Name"
            },
            "FunctionVersion": "2018-05-29",
            "Name": "MutationcreateTodoTaskinit0Function",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.createTodoTask.init.1.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson({})"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/MutationcreateTodoTaskinit0Function/MutationcreateTodoTaskinit0Function.AppSyncFunction"
          }
        },
        "MutationcreateTodoTaskauth0FunctionMutationcreateTodoTaskauth0FunctionAppSyncFunction9AF17A3B": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Ref": "referencetotransformerrootstackGraphQLAPINONEDS2BA9D1C8Name"
            },
            "FunctionVersion": "2018-05-29",
            "Name": "MutationcreateTodoTaskauth0Function",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.createTodoTask.auth.1.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson({})"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/MutationcreateTodoTaskauth0Function/MutationcreateTodoTaskauth0Function.AppSyncFunction"
          }
        },
        "MutationCreateTodoTaskDataResolverFnMutationCreateTodoTaskDataResolverFnAppSyncFunction7474F2E3": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "TodoTaskDataSource",
                "Name"
              ]
            },
            "FunctionVersion": "2018-05-29",
            "Name": "MutationCreateTodoTaskDataResolverFn",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.createTodoTask.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.createTodoTask.res.vtl"
                ]
              ]
            }
          },
          "DependsOn": [
            "TodoTaskDataSource"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/MutationCreateTodoTaskDataResolverFn/MutationCreateTodoTaskDataResolverFn.AppSyncFunction"
          }
        },
        "CreateTodoTaskResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "createTodoTask",
            "TypeName": "Mutation",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Fn::GetAtt": [
                    "MutationcreateTodoTaskinit0FunctionMutationcreateTodoTaskinit0FunctionAppSyncFunction82C54390",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "MutationcreateTodoTaskauth0FunctionMutationcreateTodoTaskauth0FunctionAppSyncFunction9AF17A3B",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "QuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunctionD5099704",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "MutationCreateTodoTaskDataResolverFnMutationCreateTodoTaskDataResolverFnAppSyncFunction7474F2E3",
                    "FunctionId"
                  ]
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"Mutation\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"createTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"",
                  {
                    "Ref": "TodoTaskTable"
                  },
                  "\"))\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/mutationCreateTodoTaskResolver"
          }
        },
        "MutationupdateTodoTaskinit0FunctionMutationupdateTodoTaskinit0FunctionAppSyncFunction890D27CA": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Ref": "referencetotransformerrootstackGraphQLAPINONEDS2BA9D1C8Name"
            },
            "FunctionVersion": "2018-05-29",
            "Name": "MutationupdateTodoTaskinit0Function",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.updateTodoTask.init.1.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson({})"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/MutationupdateTodoTaskinit0Function/MutationupdateTodoTaskinit0Function.AppSyncFunction"
          }
        },
        "MutationupdateTodoTaskauth0FunctionMutationupdateTodoTaskauth0FunctionAppSyncFunctionB63813FC": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "TodoTaskDataSource",
                "Name"
              ]
            },
            "FunctionVersion": "2018-05-29",
            "Name": "MutationupdateTodoTaskauth0Function",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.updateTodoTask.auth.1.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.updateTodoTask.auth.1.res.vtl"
                ]
              ]
            }
          },
          "DependsOn": [
            "TodoTaskDataSource"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/MutationupdateTodoTaskauth0Function/MutationupdateTodoTaskauth0Function.AppSyncFunction"
          }
        },
        "MutationUpdateTodoTaskDataResolverFnMutationUpdateTodoTaskDataResolverFnAppSyncFunction9A800A8B": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "TodoTaskDataSource",
                "Name"
              ]
            },
            "FunctionVersion": "2018-05-29",
            "Name": "MutationUpdateTodoTaskDataResolverFn",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.updateTodoTask.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.updateTodoTask.res.vtl"
                ]
              ]
            }
          },
          "DependsOn": [
            "TodoTaskDataSource"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/MutationUpdateTodoTaskDataResolverFn/MutationUpdateTodoTaskDataResolverFn.AppSyncFunction"
          }
        },
        "UpdateTodoTaskResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "updateTodoTask",
            "TypeName": "Mutation",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Fn::GetAtt": [
                    "MutationupdateTodoTaskinit0FunctionMutationupdateTodoTaskinit0FunctionAppSyncFunction890D27CA",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "MutationupdateTodoTaskauth0FunctionMutationupdateTodoTaskauth0FunctionAppSyncFunctionB63813FC",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "QuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunctionD5099704",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "MutationUpdateTodoTaskDataResolverFnMutationUpdateTodoTaskDataResolverFnAppSyncFunction9A800A8B",
                    "FunctionId"
                  ]
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"Mutation\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"updateTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"",
                  {
                    "Ref": "TodoTaskTable"
                  },
                  "\"))\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/mutationUpdateTodoTaskResolver"
          }
        },
        "MutationdeleteTodoTaskauth0FunctionMutationdeleteTodoTaskauth0FunctionAppSyncFunction30769956": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "TodoTaskDataSource",
                "Name"
              ]
            },
            "FunctionVersion": "2018-05-29",
            "Name": "MutationdeleteTodoTaskauth0Function",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.deleteTodoTask.auth.1.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.deleteTodoTask.auth.1.res.vtl"
                ]
              ]
            }
          },
          "DependsOn": [
            "TodoTaskDataSource"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/MutationdeleteTodoTaskauth0Function/MutationdeleteTodoTaskauth0Function.AppSyncFunction"
          }
        },
        "MutationDeleteTodoTaskDataResolverFnMutationDeleteTodoTaskDataResolverFnAppSyncFunctionCA98F63B": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "TodoTaskDataSource",
                "Name"
              ]
            },
            "FunctionVersion": "2018-05-29",
            "Name": "MutationDeleteTodoTaskDataResolverFn",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.deleteTodoTask.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.deleteTodoTask.res.vtl"
                ]
              ]
            }
          },
          "DependsOn": [
            "TodoTaskDataSource"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/MutationDeleteTodoTaskDataResolverFn/MutationDeleteTodoTaskDataResolverFn.AppSyncFunction"
          }
        },
        "DeleteTodoTaskResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "deleteTodoTask",
            "TypeName": "Mutation",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Fn::GetAtt": [
                    "MutationdeleteTodoTaskauth0FunctionMutationdeleteTodoTaskauth0FunctionAppSyncFunction30769956",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "QuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunctionD5099704",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "MutationDeleteTodoTaskDataResolverFnMutationDeleteTodoTaskDataResolverFnAppSyncFunctionCA98F63B",
                    "FunctionId"
                  ]
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"Mutation\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"deleteTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"",
                  {
                    "Ref": "TodoTaskTable"
                  },
                  "\"))\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/mutationDeleteTodoTaskResolver"
          }
        },
        "SubscriptiononCreateTodoTaskauth0FunctionSubscriptiononCreateTodoTaskauth0FunctionAppSyncFunctionAE72F209": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Ref": "referencetotransformerrootstackGraphQLAPINONEDS2BA9D1C8Name"
            },
            "FunctionVersion": "2018-05-29",
            "Name": "SubscriptiononCreateTodoTaskauth0Function",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Subscription.onCreateTodoTask.auth.1.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson({})"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/SubscriptiononCreateTodoTaskauth0Function/SubscriptiononCreateTodoTaskauth0Function.AppSyncFunction"
          }
        },
        "SubscriptionOnCreateTodoTaskDataResolverFnSubscriptionOnCreateTodoTaskDataResolverFnAppSyncFunction8632E26E": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Ref": "referencetotransformerrootstackGraphQLAPINONEDS2BA9D1C8Name"
            },
            "FunctionVersion": "2018-05-29",
            "Name": "SubscriptionOnCreateTodoTaskDataResolverFn",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Subscription.onCreateTodoTask.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Subscription.onCreateTodoTask.res.vtl"
                ]
              ]
            }
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/SubscriptionOnCreateTodoTaskDataResolverFn/SubscriptionOnCreateTodoTaskDataResolverFn.AppSyncFunction"
          }
        },
        "SubscriptiononCreateTodoTaskResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "onCreateTodoTask",
            "TypeName": "Subscription",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Fn::GetAtt": [
                    "SubscriptiononCreateTodoTaskauth0FunctionSubscriptiononCreateTodoTaskauth0FunctionAppSyncFunctionAE72F209",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "QuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunctionD5099704",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "SubscriptionOnCreateTodoTaskDataResolverFnSubscriptionOnCreateTodoTaskDataResolverFnAppSyncFunction8632E26E",
                    "FunctionId"
                  ]
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"Subscription\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"onCreateTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"NONE\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/subscriptionOnCreateTodoTaskResolver"
          }
        },
        "SubscriptiononUpdateTodoTaskResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "onUpdateTodoTask",
            "TypeName": "Subscription",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Fn::GetAtt": [
                    "SubscriptiononCreateTodoTaskauth0FunctionSubscriptiononCreateTodoTaskauth0FunctionAppSyncFunctionAE72F209",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "QuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunctionD5099704",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "SubscriptionOnCreateTodoTaskDataResolverFnSubscriptionOnCreateTodoTaskDataResolverFnAppSyncFunction8632E26E",
                    "FunctionId"
                  ]
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"Subscription\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"onUpdateTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"NONE\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/subscriptionOnUpdateTodoTaskResolver"
          }
        },
        "SubscriptiononDeleteTodoTaskResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "onDeleteTodoTask",
            "TypeName": "Subscription",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Fn::GetAtt": [
                    "SubscriptiononCreateTodoTaskauth0FunctionSubscriptiononCreateTodoTaskauth0FunctionAppSyncFunctionAE72F209",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "QuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunctionD5099704",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "SubscriptionOnCreateTodoTaskDataResolverFnSubscriptionOnCreateTodoTaskDataResolverFnAppSyncFunction8632E26E",
                    "FunctionId"
                  ]
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"Subscription\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"onDeleteTodoTask\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"NONE\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/subscriptionOnDeleteTodoTaskResolver"
          }
        },
        "CDKMetadata": {
          "Type": "AWS::CDK::Metadata",
          "Properties": {
            "Analytics": "v2:deflate64:H4sIAAAAAAAA/1VPywrCMBD8Fu9xtSJ4FSxeLa0/sE2ipI+kJBulhPy7TXyAp52dYWdmCyh2e9iujvh0ay76TeDGSggNIe/Z6aYrtDhKkjYtJ6OFImU0q6Uz3nKZ2IunyRNbREfWc0rcV48sGQcxaxyNaCFcsR3yVQaRKRwh1ObN5VmZQfE5Z2e0WEyTmzWHUGabsi2RsPnl/29nr3mquNS5qbu3mPt+Kg0PaWOMTBshoXObR7GH4rD83zml1tZrUqOE+j1fC6c6EBwBAAA="
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/TodoTask/CDKMetadata/Default"
          },
          "Condition": "CDKMetadataAvailable"
        }
      },
      "Outputs": {
        "GetAttTodoTaskTableStreamArn": {
          "Description": "Your DynamoDB table StreamArn.",
          "Value": {
            "Fn::GetAtt": [
              "TodoTaskTable",
              "StreamArn"
            ]
          },
          "Export": {
            "Name": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "GetAtt:TodoTaskTable:StreamArn"
                ]
              ]
            }
          }
        },
        "GetAttTodoTaskTableName": {
          "Description": "Your DynamoDB table name.",
          "Value": {
            "Ref": "TodoTaskTable"
          },
          "Export": {
            "Name": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "GetAtt:TodoTaskTable:Name"
                ]
              ]
            }
          }
        },
        "GetAttTodoTaskDataSourceName": {
          "Description": "Your model DataSource name.",
          "Value": {
            "Fn::GetAtt": [
              "TodoTaskDataSource",
              "Name"
            ]
          },
          "Export": {
            "Name": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "GetAtt:TodoTaskDataSource:Name"
                ]
              ]
            }
          }
        },
        "transformerrootstackTodoTaskQuerygetTodoTaskauth0FunctionQuerygetTodoTaskauth0FunctionAppSyncFunction5B23CDC2FunctionId": {
          "Value": {
            "Fn::GetAtt": [
              "QuerygetTodoTaskauth0FunctionQuerygetTodoTaskauth0FunctionAppSyncFunction86F90594",
              "FunctionId"
            ]
          }
        },
        "transformerrootstackTodoTaskQuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunction2AFC2ECDFunctionId": {
          "Value": {
            "Fn::GetAtt": [
              "QuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunctionD5099704",
              "FunctionId"
            ]
          }
        },
        "transformerrootstackTodoTaskMutationcreateTodoTaskinit0FunctionMutationcreateTodoTaskinit0FunctionAppSyncFunction6114EB8FFunctionId": {
          "Value": {
            "Fn::GetAtt": [
              "MutationcreateTodoTaskinit0FunctionMutationcreateTodoTaskinit0FunctionAppSyncFunction82C54390",
              "FunctionId"
            ]
          }
        },
        "transformerrootstackTodoTaskMutationcreateTodoTaskauth0FunctionMutationcreateTodoTaskauth0FunctionAppSyncFunction7B3960D3FunctionId": {
          "Value": {
            "Fn::GetAtt": [
              "MutationcreateTodoTaskauth0FunctionMutationcreateTodoTaskauth0FunctionAppSyncFunction9AF17A3B",
              "FunctionId"
            ]
          }
        },
        "transformerrootstackTodoTaskMutationupdateTodoTaskinit0FunctionMutationupdateTodoTaskinit0FunctionAppSyncFunction24B1ED7DFunctionId": {
          "Value": {
            "Fn::GetAtt": [
              "MutationupdateTodoTaskinit0FunctionMutationupdateTodoTaskinit0FunctionAppSyncFunction890D27CA",
              "FunctionId"
            ]
          }
        },
        "transformerrootstackTodoTaskSubscriptiononCreateTodoTaskauth0FunctionSubscriptiononCreateTodoTaskauth0FunctionAppSyncFunctionC184A739FunctionId": {
          "Value": {
            "Fn::GetAtt": [
              "SubscriptiononCreateTodoTaskauth0FunctionSubscriptiononCreateTodoTaskauth0FunctionAppSyncFunctionAE72F209",
              "FunctionId"
            ]
          }
        },
        "transformerrootstackTodoTaskSubscriptionOnCreateTodoTaskDataResolverFnSubscriptionOnCreateTodoTaskDataResolverFnAppSyncFunctionDD3CF02AFunctionId": {
          "Value": {
            "Fn::GetAtt": [
              "SubscriptionOnCreateTodoTaskDataResolverFnSubscriptionOnCreateTodoTaskDataResolverFnAppSyncFunction8632E26E",
              "FunctionId"
            ]
          }
        }
      }
    },
    "Image": {
      "Parameters": {
        "DynamoDBModelTableReadIOPS": {
          "Type": "Number",
          "Default": 5,
          "Description": "The number of read IOPS the table should support."
        },
        "DynamoDBModelTableWriteIOPS": {
          "Type": "Number",
          "Default": 5,
          "Description": "The number of write IOPS the table should support."
        },
        "DynamoDBBillingMode": {
          "Type": "String",
          "Default": "PAY_PER_REQUEST",
          "AllowedValues": [
            "PAY_PER_REQUEST",
            "PROVISIONED"
          ],
          "Description": "Configure @model types to create DynamoDB tables with PAY_PER_REQUEST or PROVISIONED billing modes."
        },
        "DynamoDBEnablePointInTimeRecovery": {
          "Type": "String",
          "Default": "false",
          "AllowedValues": [
            "true",
            "false"
          ],
          "Description": "Whether to enable Point in Time Recovery on the table."
        },
        "DynamoDBEnableServerSideEncryption": {
          "Type": "String",
          "Default": "true",
          "AllowedValues": [
            "true",
            "false"
          ],
          "Description": "Enable server side encryption powered by KMS."
        },
        "referencetotransformerrootstackenv10C5A902Ref": {
          "Type": "String"
        },
        "referencetotransformerrootstackGraphQLAPI20497F53ApiId": {
          "Type": "String"
        },
        "referencetotransformerrootstackS3DeploymentBucket7592718ARef": {
          "Type": "String"
        },
        "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref": {
          "Type": "String"
        },
        "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskauth0FunctionQuerygetTodoTaskauth0FunctionAppSyncFunction5B23CDC2FunctionId": {
          "Type": "String"
        },
        "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunction2AFC2ECDFunctionId": {
          "Type": "String"
        },
        "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskMutationcreateTodoTaskinit0FunctionMutationcreateTodoTaskinit0FunctionAppSyncFunction6114EB8FFunctionId": {
          "Type": "String"
        },
        "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskMutationcreateTodoTaskauth0FunctionMutationcreateTodoTaskauth0FunctionAppSyncFunction7B3960D3FunctionId": {
          "Type": "String"
        },
        "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskMutationupdateTodoTaskinit0FunctionMutationupdateTodoTaskinit0FunctionAppSyncFunction24B1ED7DFunctionId": {
          "Type": "String"
        },
        "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskSubscriptiononCreateTodoTaskauth0FunctionSubscriptiononCreateTodoTaskauth0FunctionAppSyncFunctionC184A739FunctionId": {
          "Type": "String"
        },
        "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskSubscriptionOnCreateTodoTaskDataResolverFnSubscriptionOnCreateTodoTaskDataResolverFnAppSyncFunctionDD3CF02AFunctionId": {
          "Type": "String"
        }
      },
      "Conditions": {
        "HasEnvironmentParameter": {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "referencetotransformerrootstackenv10C5A902Ref"
                },
                "NONE"
              ]
            }
          ]
        },
        "ShouldUseServerSideEncryption": {
          "Fn::Equals": [
            {
              "Ref": "DynamoDBEnableServerSideEncryption"
            },
            "true"
          ]
        },
        "ShouldUsePayPerRequestBilling": {
          "Fn::Equals": [
            {
              "Ref": "DynamoDBBillingMode"
            },
            "PAY_PER_REQUEST"
          ]
        },
        "ShouldUsePointInTimeRecovery": {
          "Fn::Equals": [
            {
              "Ref": "DynamoDBEnablePointInTimeRecovery"
            },
            "true"
          ]
        },
        "CDKMetadataAvailable": {
          "Fn::Or": [
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "af-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-east-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-northeast-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-northeast-2"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-southeast-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-southeast-2"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ca-central-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "cn-north-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "cn-northwest-1"
                  ]
                }
              ]
            },
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-central-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-north-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-west-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-west-2"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-west-3"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "me-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "sa-east-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-east-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-east-2"
                  ]
                }
              ]
            },
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-west-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-west-2"
                  ]
                }
              ]
            }
          ]
        }
      },
      "Resources": {
        "ImageTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "BillingMode": {
              "Fn::If": [
                "ShouldUsePayPerRequestBilling",
                "PAY_PER_REQUEST",
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "PointInTimeRecoverySpecification": {
              "Fn::If": [
                "ShouldUsePointInTimeRecovery",
                {
                  "PointInTimeRecoveryEnabled": true
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "ProvisionedThroughput": {
              "Fn::If": [
                "ShouldUsePayPerRequestBilling",
                {
                  "Ref": "AWS::NoValue"
                },
                {
                  "ReadCapacityUnits": {
                    "Ref": "DynamoDBModelTableReadIOPS"
                  },
                  "WriteCapacityUnits": {
                    "Ref": "DynamoDBModelTableWriteIOPS"
                  }
                }
              ]
            },
            "SSESpecification": {
              "SSEEnabled": {
                "Fn::If": [
                  "ShouldUseServerSideEncryption",
                  true,
                  false
                ]
              }
            },
            "StreamSpecification": {
              "StreamViewType": "NEW_AND_OLD_IMAGES"
            },
            "TableName": {
              "Fn::Join": [
                "",
                [
                  "Image-",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "-",
                  {
                    "Ref": "referencetotransformerrootstackenv10C5A902Ref"
                  }
                ]
              ]
            }
          },
          "UpdateReplacePolicy": "Delete",
          "DeletionPolicy": "Delete",
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/ImageTable/Resource"
          }
        },
        "ImageIAMRoleBCE85379": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Action": "sts:AssumeRole",
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "appsync.amazonaws.com"
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "RoleName": {
              "Fn::Join": [
                "",
                [
                  "ImageIAMRole7af1f8-",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "-",
                  {
                    "Ref": "referencetotransformerrootstackenv10C5A902Ref"
                  }
                ]
              ]
            }
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/ImageIAMRole/Resource"
          }
        },
        "ImageIAMRoleDefaultPolicy6C8DC4AB": {
          "Type": "AWS::IAM::Policy",
          "Properties": {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:Query",
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:ConditionCheckItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ImageTable",
                        "Arn"
                      ]
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "ImageIAMRoleDefaultPolicy6C8DC4AB",
            "Roles": [
              {
                "Ref": "ImageIAMRoleBCE85379"
              }
            ]
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/ImageIAMRole/DefaultPolicy/Resource"
          }
        },
        "DynamoDBAccess71ABE5AE": {
          "Type": "AWS::IAM::Policy",
          "Properties": {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:PutItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:Query",
                    "dynamodb:UpdateItem"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": [
                        "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}",
                        {
                          "tablename": {
                            "Fn::Join": [
                              "",
                              [
                                "Image-",
                                {
                                  "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                                },
                                "-",
                                {
                                  "Ref": "referencetotransformerrootstackenv10C5A902Ref"
                                }
                              ]
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*",
                        {
                          "tablename": {
                            "Fn::Join": [
                              "",
                              [
                                "Image-",
                                {
                                  "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                                },
                                "-",
                                {
                                  "Ref": "referencetotransformerrootstackenv10C5A902Ref"
                                }
                              ]
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "DynamoDBAccess71ABE5AE",
            "Roles": [
              {
                "Ref": "ImageIAMRoleBCE85379"
              }
            ]
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/DynamoDBAccess/Resource"
          }
        },
        "ImageDataSource": {
          "Type": "AWS::AppSync::DataSource",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "Name": "ImageTable",
            "Type": "AMAZON_DYNAMODB",
            "DynamoDBConfig": {
              "AwsRegion": {
                "Ref": "AWS::Region"
              },
              "TableName": {
                "Ref": "ImageTable"
              }
            },
            "ServiceRoleArn": {
              "Fn::GetAtt": [
                "ImageIAMRoleBCE85379",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ImageIAMRoleBCE85379"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/ImageDataSource/Resource"
          }
        },
        "QueryGetImageDataResolverFnQueryGetImageDataResolverFnAppSyncFunctionDAAA35C4": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "ImageDataSource",
                "Name"
              ]
            },
            "FunctionVersion": "2018-05-29",
            "Name": "QueryGetImageDataResolverFn",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Query.getImage.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Query.getImage.res.vtl"
                ]
              ]
            }
          },
          "DependsOn": [
            "ImageDataSource"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/QueryGetImageDataResolverFn/QueryGetImageDataResolverFn.AppSyncFunction"
          }
        },
        "GetImageResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "getImage",
            "TypeName": "Query",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskauth0FunctionQuerygetTodoTaskauth0FunctionAppSyncFunction5B23CDC2FunctionId"
                },
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunction2AFC2ECDFunctionId"
                },
                {
                  "Fn::GetAtt": [
                    "QueryGetImageDataResolverFnQueryGetImageDataResolverFnAppSyncFunctionDAAA35C4",
                    "FunctionId"
                  ]
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"Query\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"getImage\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"",
                  {
                    "Ref": "ImageTable"
                  },
                  "\"))\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/queryGetImageResolver"
          }
        },
        "QueryListImagesDataResolverFnQueryListImagesDataResolverFnAppSyncFunctionCDE61D66": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "ImageDataSource",
                "Name"
              ]
            },
            "FunctionVersion": "2018-05-29",
            "Name": "QueryListImagesDataResolverFn",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Query.listImages.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Query.listImages.res.vtl"
                ]
              ]
            }
          },
          "DependsOn": [
            "ImageDataSource"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/QueryListImagesDataResolverFn/QueryListImagesDataResolverFn.AppSyncFunction"
          }
        },
        "ListImageResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "listImages",
            "TypeName": "Query",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskauth0FunctionQuerygetTodoTaskauth0FunctionAppSyncFunction5B23CDC2FunctionId"
                },
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunction2AFC2ECDFunctionId"
                },
                {
                  "Fn::GetAtt": [
                    "QueryListImagesDataResolverFnQueryListImagesDataResolverFnAppSyncFunctionCDE61D66",
                    "FunctionId"
                  ]
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"Query\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"listImages\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"",
                  {
                    "Ref": "ImageTable"
                  },
                  "\"))\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/queryListImagesResolver"
          }
        },
        "MutationCreateImageDataResolverFnMutationCreateImageDataResolverFnAppSyncFunctionD7B086F1": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "ImageDataSource",
                "Name"
              ]
            },
            "FunctionVersion": "2018-05-29",
            "Name": "MutationCreateImageDataResolverFn",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.createImage.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.createImage.res.vtl"
                ]
              ]
            }
          },
          "DependsOn": [
            "ImageDataSource"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/MutationCreateImageDataResolverFn/MutationCreateImageDataResolverFn.AppSyncFunction"
          }
        },
        "CreateImageResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "createImage",
            "TypeName": "Mutation",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskMutationcreateTodoTaskinit0FunctionMutationcreateTodoTaskinit0FunctionAppSyncFunction6114EB8FFunctionId"
                },
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskMutationcreateTodoTaskauth0FunctionMutationcreateTodoTaskauth0FunctionAppSyncFunction7B3960D3FunctionId"
                },
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunction2AFC2ECDFunctionId"
                },
                {
                  "Fn::GetAtt": [
                    "MutationCreateImageDataResolverFnMutationCreateImageDataResolverFnAppSyncFunctionD7B086F1",
                    "FunctionId"
                  ]
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"Mutation\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"createImage\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"",
                  {
                    "Ref": "ImageTable"
                  },
                  "\"))\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/mutationCreateImageResolver"
          }
        },
        "MutationupdateImageauth0FunctionMutationupdateImageauth0FunctionAppSyncFunctionA93E2565": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "ImageDataSource",
                "Name"
              ]
            },
            "FunctionVersion": "2018-05-29",
            "Name": "MutationupdateImageauth0Function",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.updateImage.auth.1.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.updateImage.auth.1.res.vtl"
                ]
              ]
            }
          },
          "DependsOn": [
            "ImageDataSource"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/MutationupdateImageauth0Function/MutationupdateImageauth0Function.AppSyncFunction"
          }
        },
        "MutationUpdateImageDataResolverFnMutationUpdateImageDataResolverFnAppSyncFunctionB04541A5": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "ImageDataSource",
                "Name"
              ]
            },
            "FunctionVersion": "2018-05-29",
            "Name": "MutationUpdateImageDataResolverFn",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.updateImage.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.updateImage.res.vtl"
                ]
              ]
            }
          },
          "DependsOn": [
            "ImageDataSource"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/MutationUpdateImageDataResolverFn/MutationUpdateImageDataResolverFn.AppSyncFunction"
          }
        },
        "UpdateImageResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "updateImage",
            "TypeName": "Mutation",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskMutationupdateTodoTaskinit0FunctionMutationupdateTodoTaskinit0FunctionAppSyncFunction24B1ED7DFunctionId"
                },
                {
                  "Fn::GetAtt": [
                    "MutationupdateImageauth0FunctionMutationupdateImageauth0FunctionAppSyncFunctionA93E2565",
                    "FunctionId"
                  ]
                },
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunction2AFC2ECDFunctionId"
                },
                {
                  "Fn::GetAtt": [
                    "MutationUpdateImageDataResolverFnMutationUpdateImageDataResolverFnAppSyncFunctionB04541A5",
                    "FunctionId"
                  ]
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"Mutation\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"updateImage\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"",
                  {
                    "Ref": "ImageTable"
                  },
                  "\"))\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/mutationUpdateImageResolver"
          }
        },
        "MutationdeleteImageauth0FunctionMutationdeleteImageauth0FunctionAppSyncFunction0EF16D01": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "ImageDataSource",
                "Name"
              ]
            },
            "FunctionVersion": "2018-05-29",
            "Name": "MutationdeleteImageauth0Function",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.deleteImage.auth.1.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.deleteImage.auth.1.res.vtl"
                ]
              ]
            }
          },
          "DependsOn": [
            "ImageDataSource"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/MutationdeleteImageauth0Function/MutationdeleteImageauth0Function.AppSyncFunction"
          }
        },
        "MutationDeleteImageDataResolverFnMutationDeleteImageDataResolverFnAppSyncFunctionCE63A13F": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "ImageDataSource",
                "Name"
              ]
            },
            "FunctionVersion": "2018-05-29",
            "Name": "MutationDeleteImageDataResolverFn",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.deleteImage.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.deleteImage.res.vtl"
                ]
              ]
            }
          },
          "DependsOn": [
            "ImageDataSource"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/MutationDeleteImageDataResolverFn/MutationDeleteImageDataResolverFn.AppSyncFunction"
          }
        },
        "DeleteImageResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "deleteImage",
            "TypeName": "Mutation",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Fn::GetAtt": [
                    "MutationdeleteImageauth0FunctionMutationdeleteImageauth0FunctionAppSyncFunction0EF16D01",
                    "FunctionId"
                  ]
                },
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunction2AFC2ECDFunctionId"
                },
                {
                  "Fn::GetAtt": [
                    "MutationDeleteImageDataResolverFnMutationDeleteImageDataResolverFnAppSyncFunctionCE63A13F",
                    "FunctionId"
                  ]
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"Mutation\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"deleteImage\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"",
                  {
                    "Ref": "ImageTable"
                  },
                  "\"))\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/mutationDeleteImageResolver"
          }
        },
        "SubscriptiononCreateImageResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "onCreateImage",
            "TypeName": "Subscription",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskSubscriptiononCreateTodoTaskauth0FunctionSubscriptiononCreateTodoTaskauth0FunctionAppSyncFunctionC184A739FunctionId"
                },
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunction2AFC2ECDFunctionId"
                },
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskSubscriptionOnCreateTodoTaskDataResolverFnSubscriptionOnCreateTodoTaskDataResolverFnAppSyncFunctionDD3CF02AFunctionId"
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"Subscription\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"onCreateImage\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"NONE\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/subscriptionOnCreateImageResolver"
          }
        },
        "SubscriptiononUpdateImageResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "onUpdateImage",
            "TypeName": "Subscription",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskSubscriptiononCreateTodoTaskauth0FunctionSubscriptiononCreateTodoTaskauth0FunctionAppSyncFunctionC184A739FunctionId"
                },
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunction2AFC2ECDFunctionId"
                },
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskSubscriptionOnCreateTodoTaskDataResolverFnSubscriptionOnCreateTodoTaskDataResolverFnAppSyncFunctionDD3CF02AFunctionId"
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"Subscription\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"onUpdateImage\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"NONE\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/subscriptionOnUpdateImageResolver"
          }
        },
        "SubscriptiononDeleteImageResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "onDeleteImage",
            "TypeName": "Subscription",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskSubscriptiononCreateTodoTaskauth0FunctionSubscriptiononCreateTodoTaskauth0FunctionAppSyncFunctionC184A739FunctionId"
                },
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunction2AFC2ECDFunctionId"
                },
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskSubscriptionOnCreateTodoTaskDataResolverFnSubscriptionOnCreateTodoTaskDataResolverFnAppSyncFunctionDD3CF02AFunctionId"
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"Subscription\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"onDeleteImage\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"NONE\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/subscriptionOnDeleteImageResolver"
          }
        },
        "CDKMetadata": {
          "Type": "AWS::CDK::Metadata",
          "Properties": {
            "Analytics": "v2:deflate64:H4sIAAAAAAAA/1VPywrCMBD8Fu9xtSJ4FSxeLa0/sE2ipI+kJBulhPy7TXyAp52dYWdmCyh2e9iujvh0ay76TeDGSggNIe/Z6aYrtDhKkjYtJ6OFImU0q6Uz3nKZ2IunyRNbREfWc0rcV48sGQcxaxyNaCFcsR3yVQaRKRwh1ObN5VmZQfE5Z2e0WEyTmzWHUGabsi2RsPnl/29nr3mquNS5qbu3mPt+Kg0PaWOMTBshoXObR7GH4rD83zml1tZrUqOE+j1fC6c6EBwBAAA="
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/Image/CDKMetadata/Default"
          },
          "Condition": "CDKMetadataAvailable"
        }
      },
      "Outputs": {
        "GetAttImageTableStreamArn": {
          "Description": "Your DynamoDB table StreamArn.",
          "Value": {
            "Fn::GetAtt": [
              "ImageTable",
              "StreamArn"
            ]
          },
          "Export": {
            "Name": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "GetAtt:ImageTable:StreamArn"
                ]
              ]
            }
          }
        },
        "GetAttImageTableName": {
          "Description": "Your DynamoDB table name.",
          "Value": {
            "Ref": "ImageTable"
          },
          "Export": {
            "Name": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "GetAtt:ImageTable:Name"
                ]
              ]
            }
          }
        },
        "GetAttImageDataSourceName": {
          "Description": "Your model DataSource name.",
          "Value": {
            "Fn::GetAtt": [
              "ImageDataSource",
              "Name"
            ]
          },
          "Export": {
            "Name": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "GetAtt:ImageDataSource:Name"
                ]
              ]
            }
          }
        },
        "transformerrootstackImageImageDataSource209AC79DName": {
          "Value": {
            "Fn::GetAtt": [
              "ImageDataSource",
              "Name"
            ]
          }
        },
        "transformerrootstackImageImageTable573568D3Ref": {
          "Value": {
            "Ref": "ImageTable"
          }
        }
      }
    },
    "SharedWith": {
      "Parameters": {
        "DynamoDBModelTableReadIOPS": {
          "Type": "Number",
          "Default": 5,
          "Description": "The number of read IOPS the table should support."
        },
        "DynamoDBModelTableWriteIOPS": {
          "Type": "Number",
          "Default": 5,
          "Description": "The number of write IOPS the table should support."
        },
        "DynamoDBBillingMode": {
          "Type": "String",
          "Default": "PAY_PER_REQUEST",
          "AllowedValues": [
            "PAY_PER_REQUEST",
            "PROVISIONED"
          ],
          "Description": "Configure @model types to create DynamoDB tables with PAY_PER_REQUEST or PROVISIONED billing modes."
        },
        "DynamoDBEnablePointInTimeRecovery": {
          "Type": "String",
          "Default": "false",
          "AllowedValues": [
            "true",
            "false"
          ],
          "Description": "Whether to enable Point in Time Recovery on the table."
        },
        "DynamoDBEnableServerSideEncryption": {
          "Type": "String",
          "Default": "true",
          "AllowedValues": [
            "true",
            "false"
          ],
          "Description": "Enable server side encryption powered by KMS."
        },
        "referencetotransformerrootstackenv10C5A902Ref": {
          "Type": "String"
        },
        "referencetotransformerrootstackGraphQLAPI20497F53ApiId": {
          "Type": "String"
        },
        "referencetotransformerrootstackS3DeploymentBucket7592718ARef": {
          "Type": "String"
        },
        "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref": {
          "Type": "String"
        },
        "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskauth0FunctionQuerygetTodoTaskauth0FunctionAppSyncFunction5B23CDC2FunctionId": {
          "Type": "String"
        },
        "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunction2AFC2ECDFunctionId": {
          "Type": "String"
        }
      },
      "Conditions": {
        "HasEnvironmentParameter": {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "referencetotransformerrootstackenv10C5A902Ref"
                },
                "NONE"
              ]
            }
          ]
        },
        "ShouldUseServerSideEncryption": {
          "Fn::Equals": [
            {
              "Ref": "DynamoDBEnableServerSideEncryption"
            },
            "true"
          ]
        },
        "ShouldUsePayPerRequestBilling": {
          "Fn::Equals": [
            {
              "Ref": "DynamoDBBillingMode"
            },
            "PAY_PER_REQUEST"
          ]
        },
        "ShouldUsePointInTimeRecovery": {
          "Fn::Equals": [
            {
              "Ref": "DynamoDBEnablePointInTimeRecovery"
            },
            "true"
          ]
        },
        "CDKMetadataAvailable": {
          "Fn::Or": [
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "af-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-east-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-northeast-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-northeast-2"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-southeast-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-southeast-2"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ca-central-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "cn-north-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "cn-northwest-1"
                  ]
                }
              ]
            },
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-central-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-north-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-west-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-west-2"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-west-3"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "me-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "sa-east-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-east-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-east-2"
                  ]
                }
              ]
            },
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-west-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-west-2"
                  ]
                }
              ]
            }
          ]
        }
      },
      "Resources": {
        "SharedWithTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "todoTaskSharedWithId",
                "AttributeType": "S"
              }
            ],
            "BillingMode": {
              "Fn::If": [
                "ShouldUsePayPerRequestBilling",
                "PAY_PER_REQUEST",
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "gsi-TodoTask.sharedWith",
                "KeySchema": [
                  {
                    "AttributeName": "todoTaskSharedWithId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "Fn::If": [
                    "ShouldUsePayPerRequestBilling",
                    {
                      "Ref": "AWS::NoValue"
                    },
                    {
                      "ReadCapacityUnits": {
                        "Ref": "DynamoDBModelTableReadIOPS"
                      },
                      "WriteCapacityUnits": {
                        "Ref": "DynamoDBModelTableWriteIOPS"
                      }
                    }
                  ]
                }
              }
            ],
            "PointInTimeRecoverySpecification": {
              "Fn::If": [
                "ShouldUsePointInTimeRecovery",
                {
                  "PointInTimeRecoveryEnabled": true
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "ProvisionedThroughput": {
              "Fn::If": [
                "ShouldUsePayPerRequestBilling",
                {
                  "Ref": "AWS::NoValue"
                },
                {
                  "ReadCapacityUnits": {
                    "Ref": "DynamoDBModelTableReadIOPS"
                  },
                  "WriteCapacityUnits": {
                    "Ref": "DynamoDBModelTableWriteIOPS"
                  }
                }
              ]
            },
            "SSESpecification": {
              "SSEEnabled": {
                "Fn::If": [
                  "ShouldUseServerSideEncryption",
                  true,
                  false
                ]
              }
            },
            "StreamSpecification": {
              "StreamViewType": "NEW_AND_OLD_IMAGES"
            },
            "TableName": {
              "Fn::Join": [
                "",
                [
                  "SharedWith-",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "-",
                  {
                    "Ref": "referencetotransformerrootstackenv10C5A902Ref"
                  }
                ]
              ]
            }
          },
          "UpdateReplacePolicy": "Delete",
          "DeletionPolicy": "Delete",
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/SharedWith/SharedWithTable/Resource"
          }
        },
        "SharedWithIAMRoleEF5306CA": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Action": "sts:AssumeRole",
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "appsync.amazonaws.com"
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "RoleName": {
              "Fn::Join": [
                "",
                [
                  "SharedWithIAMRolee6fec8-",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "-",
                  {
                    "Ref": "referencetotransformerrootstackenv10C5A902Ref"
                  }
                ]
              ]
            }
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/SharedWith/SharedWithIAMRole/Resource"
          }
        },
        "SharedWithIAMRoleDefaultPolicy00546447": {
          "Type": "AWS::IAM::Policy",
          "Properties": {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:Query",
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:ConditionCheckItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "SharedWithTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "SharedWithTable",
                              "Arn"
                            ]
                          },
                          "/index/*"
                        ]
                      ]
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "SharedWithIAMRoleDefaultPolicy00546447",
            "Roles": [
              {
                "Ref": "SharedWithIAMRoleEF5306CA"
              }
            ]
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/SharedWith/SharedWithIAMRole/DefaultPolicy/Resource"
          }
        },
        "DynamoDBAccess71ABE5AE": {
          "Type": "AWS::IAM::Policy",
          "Properties": {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:PutItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:Query",
                    "dynamodb:UpdateItem"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": [
                        "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}",
                        {
                          "tablename": {
                            "Fn::Join": [
                              "",
                              [
                                "SharedWith-",
                                {
                                  "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                                },
                                "-",
                                {
                                  "Ref": "referencetotransformerrootstackenv10C5A902Ref"
                                }
                              ]
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*",
                        {
                          "tablename": {
                            "Fn::Join": [
                              "",
                              [
                                "SharedWith-",
                                {
                                  "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                                },
                                "-",
                                {
                                  "Ref": "referencetotransformerrootstackenv10C5A902Ref"
                                }
                              ]
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "DynamoDBAccess71ABE5AE",
            "Roles": [
              {
                "Ref": "SharedWithIAMRoleEF5306CA"
              }
            ]
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/SharedWith/DynamoDBAccess/Resource"
          }
        },
        "SharedWithDataSource": {
          "Type": "AWS::AppSync::DataSource",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "Name": "SharedWithTable",
            "Type": "AMAZON_DYNAMODB",
            "DynamoDBConfig": {
              "AwsRegion": {
                "Ref": "AWS::Region"
              },
              "TableName": {
                "Ref": "SharedWithTable"
              }
            },
            "ServiceRoleArn": {
              "Fn::GetAtt": [
                "SharedWithIAMRoleEF5306CA",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "SharedWithIAMRoleEF5306CA"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/SharedWith/SharedWithDataSource/Resource"
          }
        },
        "QueryGetSharedWithDataResolverFnQueryGetSharedWithDataResolverFnAppSyncFunctionE67E803D": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "SharedWithDataSource",
                "Name"
              ]
            },
            "FunctionVersion": "2018-05-29",
            "Name": "QueryGetSharedWithDataResolverFn",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Query.getSharedWith.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Query.getSharedWith.res.vtl"
                ]
              ]
            }
          },
          "DependsOn": [
            "SharedWithDataSource"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/SharedWith/QueryGetSharedWithDataResolverFn/QueryGetSharedWithDataResolverFn.AppSyncFunction"
          }
        },
        "GetSharedWithResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "getSharedWith",
            "TypeName": "Query",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskauth0FunctionQuerygetTodoTaskauth0FunctionAppSyncFunction5B23CDC2FunctionId"
                },
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunction2AFC2ECDFunctionId"
                },
                {
                  "Fn::GetAtt": [
                    "QueryGetSharedWithDataResolverFnQueryGetSharedWithDataResolverFnAppSyncFunctionE67E803D",
                    "FunctionId"
                  ]
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"Query\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"getSharedWith\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"",
                  {
                    "Ref": "SharedWithTable"
                  },
                  "\"))\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/SharedWith/queryGetSharedWithResolver"
          }
        },
        "QueryListSharedWithsDataResolverFnQueryListSharedWithsDataResolverFnAppSyncFunctionEA9BE462": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "SharedWithDataSource",
                "Name"
              ]
            },
            "FunctionVersion": "2018-05-29",
            "Name": "QueryListSharedWithsDataResolverFn",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Query.listSharedWiths.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Query.listSharedWiths.res.vtl"
                ]
              ]
            }
          },
          "DependsOn": [
            "SharedWithDataSource"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/SharedWith/QueryListSharedWithsDataResolverFn/QueryListSharedWithsDataResolverFn.AppSyncFunction"
          }
        },
        "ListSharedWithResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "listSharedWiths",
            "TypeName": "Query",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskauth0FunctionQuerygetTodoTaskauth0FunctionAppSyncFunction5B23CDC2FunctionId"
                },
                {
                  "Ref": "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunction2AFC2ECDFunctionId"
                },
                {
                  "Fn::GetAtt": [
                    "QueryListSharedWithsDataResolverFnQueryListSharedWithsDataResolverFnAppSyncFunctionEA9BE462",
                    "FunctionId"
                  ]
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"Query\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"listSharedWiths\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"",
                  {
                    "Ref": "SharedWithTable"
                  },
                  "\"))\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/SharedWith/queryListSharedWithsResolver"
          }
        },
        "CDKMetadata": {
          "Type": "AWS::CDK::Metadata",
          "Properties": {
            "Analytics": "v2:deflate64:H4sIAAAAAAAA/1VPywrCMBD8Fu9xtSJ4FSxeLa0/sE2ipI+kJBulhPy7TXyAp52dYWdmCyh2e9iujvh0ay76TeDGSggNIe/Z6aYrtDhKkjYtJ6OFImU0q6Uz3nKZ2IunyRNbREfWc0rcV48sGQcxaxyNaCFcsR3yVQaRKRwh1ObN5VmZQfE5Z2e0WEyTmzWHUGabsi2RsPnl/29nr3mquNS5qbu3mPt+Kg0PaWOMTBshoXObR7GH4rD83zml1tZrUqOE+j1fC6c6EBwBAAA="
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/SharedWith/CDKMetadata/Default"
          },
          "Condition": "CDKMetadataAvailable"
        }
      },
      "Outputs": {
        "GetAttSharedWithTableStreamArn": {
          "Description": "Your DynamoDB table StreamArn.",
          "Value": {
            "Fn::GetAtt": [
              "SharedWithTable",
              "StreamArn"
            ]
          },
          "Export": {
            "Name": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "GetAtt:SharedWithTable:StreamArn"
                ]
              ]
            }
          }
        },
        "GetAttSharedWithTableName": {
          "Description": "Your DynamoDB table name.",
          "Value": {
            "Ref": "SharedWithTable"
          },
          "Export": {
            "Name": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "GetAtt:SharedWithTable:Name"
                ]
              ]
            }
          }
        },
        "GetAttSharedWithDataSourceName": {
          "Description": "Your model DataSource name.",
          "Value": {
            "Fn::GetAtt": [
              "SharedWithDataSource",
              "Name"
            ]
          },
          "Export": {
            "Name": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "GetAtt:SharedWithDataSource:Name"
                ]
              ]
            }
          }
        },
        "transformerrootstackSharedWithSharedWithDataSource3B49FDD2Name": {
          "Value": {
            "Fn::GetAtt": [
              "SharedWithDataSource",
              "Name"
            ]
          }
        },
        "transformerrootstackSharedWithSharedWithTable8942F526Ref": {
          "Value": {
            "Ref": "SharedWithTable"
          }
        }
      }
    },
    "FunctionDirectiveStack": {
      "Description": "An auto-generated nested stack for the @function directive.",
      "AWSTemplateFormatVersion": "2010-09-09",
      "Conditions": {
        "HasEnvironmentParameter": {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "referencetotransformerrootstackenv10C5A902Ref"
                },
                "NONE"
              ]
            }
          ]
        },
        "CDKMetadataAvailable": {
          "Fn::Or": [
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "af-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-east-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-northeast-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-northeast-2"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-southeast-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-southeast-2"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ca-central-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "cn-north-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "cn-northwest-1"
                  ]
                }
              ]
            },
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-central-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-north-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-west-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-west-2"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-west-3"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "me-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "sa-east-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-east-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-east-2"
                  ]
                }
              ]
            },
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-west-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-west-2"
                  ]
                }
              ]
            }
          ]
        }
      },
      "Resources": {
        "ShareTaskLambdaDataSourceServiceRole1D5FB669": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Action": "sts:AssumeRole",
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "appsync.amazonaws.com"
                  }
                }
              ],
              "Version": "2012-10-17"
            }
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/FunctionDirectiveStack/ShareTaskLambdaDataSource/ServiceRole/Resource"
          }
        },
        "ShareTaskLambdaDataSourceServiceRoleDefaultPolicyA2747709": {
          "Type": "AWS::IAM::Policy",
          "Properties": {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "lambda:InvokeFunction",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::If": [
                      "HasEnvironmentParameter",
                      {
                        "Fn::Sub": [
                          "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:share-task",
                          {}
                        ]
                      },
                      {
                        "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:share-task"
                      }
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "ShareTaskLambdaDataSourceServiceRoleDefaultPolicyA2747709",
            "Roles": [
              {
                "Ref": "ShareTaskLambdaDataSourceServiceRole1D5FB669"
              }
            ]
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/FunctionDirectiveStack/ShareTaskLambdaDataSource/ServiceRole/DefaultPolicy/Resource"
          }
        },
        "ShareTaskLambdaDataSource": {
          "Type": "AWS::AppSync::DataSource",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "Name": "ShareTaskLambdaDataSource",
            "Type": "AWS_LAMBDA",
            "LambdaConfig": {
              "LambdaFunctionArn": {
                "Fn::If": [
                  "HasEnvironmentParameter",
                  {
                    "Fn::Sub": [
                      "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:share-task",
                      {}
                    ]
                  },
                  {
                    "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:share-task"
                  }
                ]
              }
            },
            "ServiceRoleArn": {
              "Fn::GetAtt": [
                "ShareTaskLambdaDataSourceServiceRole1D5FB669",
                "Arn"
              ]
            }
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/FunctionDirectiveStack/ShareTaskLambdaDataSource/Resource"
          }
        },
        "InvokeShareTaskLambdaDataSourceInvokeShareTaskLambdaDataSourceAppSyncFunctionDED56722": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Fn::GetAtt": [
                "ShareTaskLambdaDataSource",
                "Name"
              ]
            },
            "FunctionVersion": "2018-05-29",
            "Name": "InvokeShareTaskLambdaDataSource",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/InvokeShareTaskLambdaDataSource.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/InvokeShareTaskLambdaDataSource.res.vtl"
                ]
              ]
            }
          },
          "DependsOn": [
            "ShareTaskLambdaDataSource"
          ],
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/FunctionDirectiveStack/InvokeShareTaskLambdaDataSource/InvokeShareTaskLambdaDataSource.AppSyncFunction"
          }
        },
        "MutationshareTaskResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "shareTask",
            "TypeName": "Mutation",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Fn::GetAtt": [
                    "InvokeShareTaskLambdaDataSourceInvokeShareTaskLambdaDataSourceAppSyncFunctionDED56722",
                    "FunctionId"
                  ]
                }
              ]
            },
            "RequestMappingTemplate": "## [Start] Stash resolver specific context.. **\n$util.qr($ctx.stash.put(\"typeName\", \"Mutation\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"shareTask\"))\n{}\n## [End] Stash resolver specific context.. **",
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/Mutation.shareTask.res.vtl"
                ]
              ]
            }
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/FunctionDirectiveStack/mutationShareTaskResolver"
          }
        },
        "CDKMetadata": {
          "Type": "AWS::CDK::Metadata",
          "Properties": {
            "Analytics": "v2:deflate64:H4sIAAAAAAAA/1WPzQ6CMBCEn8V7Wawh8WrEePJg4AnWtphCaUl/MKTpu0shHjzN7O58mSwFeqrgeLjgxxWMD2VkxgqIrUc2kLrTtdFcemk0WZ3zNjCf141wJlgmEslgVDi+OMI9aJazV3SC4DS5RTOIj+14Q4/txmT+f/pxa0Un38HiXrjXqFnYRCSOEBujtvymT6MkW/K4u5QS0YYL6F050wroef2rd1IWNmgvRwHNrl9fGIBh9AAAAA=="
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/FunctionDirectiveStack/CDKMetadata/Default"
          },
          "Condition": "CDKMetadataAvailable"
        }
      },
      "Parameters": {
        "referencetotransformerrootstackenv10C5A902Ref": {
          "Type": "String"
        },
        "referencetotransformerrootstackGraphQLAPI20497F53ApiId": {
          "Type": "String"
        },
        "referencetotransformerrootstackS3DeploymentBucket7592718ARef": {
          "Type": "String"
        },
        "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref": {
          "Type": "String"
        }
      }
    },
    "ConnectionStack": {
      "Resources": {
        "TodoTaskimageauth0FunctionTodoTaskimageauth0FunctionAppSyncFunction43CE51B7": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Ref": "referencetotransformerrootstackGraphQLAPINONEDS2BA9D1C8Name"
            },
            "FunctionVersion": "2018-05-29",
            "Name": "TodoTaskimageauth0Function",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/TodoTask.image.auth.1.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson({})"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/ConnectionStack/TodoTaskimageauth0Function/TodoTaskimageauth0Function.AppSyncFunction"
          }
        },
        "TodoTaskImageDataResolverFnTodoTaskImageDataResolverFnAppSyncFunction4C62A8EA": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Ref": "referencetotransformerrootstackImageNestedStackImageNestedStackResource64DE1EC9OutputstransformerrootstackImageImageDataSource209AC79DName"
            },
            "FunctionVersion": "2018-05-29",
            "Name": "TodoTaskImageDataResolverFn",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/TodoTask.image.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/TodoTask.image.res.vtl"
                ]
              ]
            }
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/ConnectionStack/TodoTaskImageDataResolverFn/TodoTaskImageDataResolverFn.AppSyncFunction"
          }
        },
        "TodoTaskimageResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "image",
            "TypeName": "TodoTask",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Fn::GetAtt": [
                    "TodoTaskimageauth0FunctionTodoTaskimageauth0FunctionAppSyncFunction43CE51B7",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "TodoTaskImageDataResolverFnTodoTaskImageDataResolverFnAppSyncFunction4C62A8EA",
                    "FunctionId"
                  ]
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"TodoTask\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"image\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"",
                  {
                    "Ref": "referencetotransformerrootstackImageNestedStackImageNestedStackResource64DE1EC9OutputstransformerrootstackImageImageTable573568D3Ref"
                  },
                  "\"))\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/ConnectionStack/todoTaskImageResolver"
          }
        },
        "TodoTaskSharedWithDataResolverFnTodoTaskSharedWithDataResolverFnAppSyncFunction8329AFD5": {
          "Type": "AWS::AppSync::FunctionConfiguration",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "DataSourceName": {
              "Ref": "referencetotransformerrootstackSharedWithNestedStackSharedWithNestedStackResourceCA833E8EOutputstransformerrootstackSharedWithSharedWithDataSource3B49FDD2Name"
            },
            "FunctionVersion": "2018-05-29",
            "Name": "TodoTaskSharedWithDataResolverFn",
            "RequestMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/TodoTask.sharedWith.req.vtl"
                ]
              ]
            },
            "ResponseMappingTemplateS3Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentBucket7592718ARef"
                  },
                  "/",
                  {
                    "Ref": "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref"
                  },
                  "/resolvers/TodoTask.sharedWith.res.vtl"
                ]
              ]
            }
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/ConnectionStack/TodoTaskSharedWithDataResolverFn/TodoTaskSharedWithDataResolverFn.AppSyncFunction"
          }
        },
        "TodoTasksharedWithResolver": {
          "Type": "AWS::AppSync::Resolver",
          "Properties": {
            "ApiId": {
              "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
            },
            "FieldName": "sharedWith",
            "TypeName": "TodoTask",
            "Kind": "PIPELINE",
            "PipelineConfig": {
              "Functions": [
                {
                  "Fn::GetAtt": [
                    "TodoTaskimageauth0FunctionTodoTaskimageauth0FunctionAppSyncFunction43CE51B7",
                    "FunctionId"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "TodoTaskSharedWithDataResolverFnTodoTaskSharedWithDataResolverFnAppSyncFunction8329AFD5",
                    "FunctionId"
                  ]
                }
              ]
            },
            "RequestMappingTemplate": {
              "Fn::Join": [
                "",
                [
                  "$util.qr($ctx.stash.put(\"typeName\", \"TodoTask\"))\n$util.qr($ctx.stash.put(\"fieldName\", \"sharedWith\"))\n$util.qr($ctx.stash.put(\"conditions\", []))\n$util.qr($ctx.stash.put(\"metadata\", {}))\n$util.qr($ctx.stash.metadata.put(\"dataSourceType\", \"AMAZON_DYNAMODB\"))\n$util.qr($ctx.stash.metadata.put(\"apiId\", \"",
                  {
                    "Ref": "referencetotransformerrootstackGraphQLAPI20497F53ApiId"
                  },
                  "\"))\n$util.qr($ctx.stash.put(\"tableName\", \"",
                  {
                    "Ref": "referencetotransformerrootstackSharedWithNestedStackSharedWithNestedStackResourceCA833E8EOutputstransformerrootstackSharedWithSharedWithTable8942F526Ref"
                  },
                  "\"))\n$util.toJson({})"
                ]
              ]
            },
            "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)"
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/ConnectionStack/todoTaskSharedWithResolver"
          }
        },
        "CDKMetadata": {
          "Type": "AWS::CDK::Metadata",
          "Properties": {
            "Analytics": "v2:deflate64:H4sIAAAAAAAA/zWNUQrCMBBEz+J/ujVS8FcoeIB6grBJZVvdlE3SIiF3N0H8mhneDKNBXwY4n27mCB3atc/oxUF+RIOrGj2HKAmjGmeeXPBJ0DVfgaVInotqQ7Nt4cMIuaJ7YmykVmZ6JjEt/Pev3Ukpir11sIR+1wPoa71fAlEniSO9HUw//QLfIkNXmwAAAA=="
          },
          "Metadata": {
            "aws:cdk:path": "transformer-root-stack/ConnectionStack/CDKMetadata/Default"
          },
          "Condition": "CDKMetadataAvailable"
        }
      },
      "Conditions": {
        "CDKMetadataAvailable": {
          "Fn::Or": [
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "af-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-east-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-northeast-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-northeast-2"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-southeast-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ap-southeast-2"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "ca-central-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "cn-north-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "cn-northwest-1"
                  ]
                }
              ]
            },
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-central-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-north-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-west-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-west-2"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "eu-west-3"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "me-south-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "sa-east-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-east-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-east-2"
                  ]
                }
              ]
            },
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-west-1"
                  ]
                },
                {
                  "Fn::Equals": [
                    {
                      "Ref": "AWS::Region"
                    },
                    "us-west-2"
                  ]
                }
              ]
            }
          ]
        }
      },
      "Parameters": {
        "referencetotransformerrootstackGraphQLAPI20497F53ApiId": {
          "Type": "String"
        },
        "referencetotransformerrootstackGraphQLAPINONEDS2BA9D1C8Name": {
          "Type": "String"
        },
        "referencetotransformerrootstackS3DeploymentBucket7592718ARef": {
          "Type": "String"
        },
        "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref": {
          "Type": "String"
        },
        "referencetotransformerrootstackImageNestedStackImageNestedStackResource64DE1EC9OutputstransformerrootstackImageImageDataSource209AC79DName": {
          "Type": "String"
        },
        "referencetotransformerrootstackImageNestedStackImageNestedStackResource64DE1EC9OutputstransformerrootstackImageImageTable573568D3Ref": {
          "Type": "String"
        },
        "referencetotransformerrootstackSharedWithNestedStackSharedWithNestedStackResourceCA833E8EOutputstransformerrootstackSharedWithSharedWithDataSource3B49FDD2Name": {
          "Type": "String"
        },
        "referencetotransformerrootstackSharedWithNestedStackSharedWithNestedStackResourceCA833E8EOutputstransformerrootstackSharedWithSharedWithTable8942F526Ref": {
          "Type": "String"
        }
      }
    }
  },
  "rootStack": {
    "Parameters": {
      "env": {
        "Type": "String",
        "Default": "NONE"
      },
      "DynamoDBModelTableReadIOPS": {
        "Type": "Number",
        "Default": 5,
        "Description": "The number of read IOPS the table should support."
      },
      "DynamoDBModelTableWriteIOPS": {
        "Type": "Number",
        "Default": 5,
        "Description": "The number of write IOPS the table should support."
      },
      "DynamoDBBillingMode": {
        "Type": "String",
        "Default": "PAY_PER_REQUEST",
        "AllowedValues": [
          "PAY_PER_REQUEST",
          "PROVISIONED"
        ],
        "Description": "Configure @model types to create DynamoDB tables with PAY_PER_REQUEST or PROVISIONED billing modes."
      },
      "DynamoDBEnablePointInTimeRecovery": {
        "Type": "String",
        "Default": "false",
        "AllowedValues": [
          "true",
          "false"
        ],
        "Description": "Whether to enable Point in Time Recovery on the table."
      },
      "DynamoDBEnableServerSideEncryption": {
        "Type": "String",
        "Default": "true",
        "AllowedValues": [
          "true",
          "false"
        ],
        "Description": "Enable server side encryption powered by KMS."
      },
      "AppSyncApiName": {
        "Type": "String",
        "Default": "AppSyncSimpleTransform"
      },
      "S3DeploymentBucket": {
        "Type": "String",
        "Description": "An S3 Bucket name where assets are deployed"
      },
      "S3DeploymentRootKey": {
        "Type": "String",
        "Description": "An S3 key relative to the S3DeploymentBucket that points to the root of the deployment directory."
      }
    },
    "Resources": {
      "GraphQLAPI": {
        "Type": "AWS::AppSync::GraphQLApi",
        "Properties": {
          "AuthenticationType": "API_KEY",
          "Name": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AppSyncApiName"
                },
                "-",
                {
                  "Ref": "env"
                }
              ]
            ]
          }
        },
        "Metadata": {
          "aws:cdk:path": "transformer-root-stack/GraphQLAPI/Resource"
        }
      },
      "GraphQLAPITransformerSchema3CB2AE18": {
        "Type": "AWS::AppSync::GraphQLSchema",
        "Properties": {
          "ApiId": {
            "Fn::GetAtt": [
              "GraphQLAPI",
              "ApiId"
            ]
          },
          "DefinitionS3Location": {
            "Fn::Join": [
              "",
              [
                "s3://",
                {
                  "Ref": "S3DeploymentBucket"
                },
                "/",
                {
                  "Ref": "S3DeploymentRootKey"
                },
                "/schema.graphql"
              ]
            ]
          }
        },
        "Metadata": {
          "aws:cdk:path": "transformer-root-stack/GraphQLAPI/TransformerSchema"
        }
      },
      "GraphQLAPIDefaultApiKey215A6DD7": {
        "Type": "AWS::AppSync::ApiKey",
        "Properties": {
          "ApiId": {
            "Fn::GetAtt": [
              "GraphQLAPI",
              "ApiId"
            ]
          },
          "Description": "Default API Key",
          "Expires": 1663947896
        },
        "Metadata": {
          "aws:cdk:path": "transformer-root-stack/GraphQLAPI/DefaultApiKey"
        }
      },
      "GraphQLAPINONEDS95A13CF0": {
        "Type": "AWS::AppSync::DataSource",
        "Properties": {
          "ApiId": {
            "Fn::GetAtt": [
              "GraphQLAPI",
              "ApiId"
            ]
          },
          "Name": "NONE_DS",
          "Type": "NONE",
          "Description": "None Data Source for Pipeline functions"
        },
        "Metadata": {
          "aws:cdk:path": "transformer-root-stack/GraphQLAPI/NONE_DS/Resource"
        }
      },
      "TodoTask": {
        "Type": "AWS::CloudFormation::Stack",
        "Properties": {
          "TemplateURL": {
            "Fn::Join": [
              "",
              [
                "https://s3.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/",
                {
                  "Ref": "S3DeploymentBucket"
                },
                "/",
                {
                  "Ref": "S3DeploymentRootKey"
                },
                "/stacks/TodoTask.json"
              ]
            ]
          },
          "Parameters": {
            "DynamoDBModelTableReadIOPS": {
              "Ref": "DynamoDBModelTableReadIOPS"
            },
            "DynamoDBModelTableWriteIOPS": {
              "Ref": "DynamoDBModelTableWriteIOPS"
            },
            "DynamoDBBillingMode": {
              "Ref": "DynamoDBBillingMode"
            },
            "DynamoDBEnablePointInTimeRecovery": {
              "Ref": "DynamoDBEnablePointInTimeRecovery"
            },
            "DynamoDBEnableServerSideEncryption": {
              "Ref": "DynamoDBEnableServerSideEncryption"
            },
            "referencetotransformerrootstackenv10C5A902Ref": {
              "Ref": "env"
            },
            "referencetotransformerrootstackGraphQLAPI20497F53ApiId": {
              "Fn::GetAtt": [
                "GraphQLAPI",
                "ApiId"
              ]
            },
            "referencetotransformerrootstackGraphQLAPINONEDS2BA9D1C8Name": {
              "Fn::GetAtt": [
                "GraphQLAPINONEDS95A13CF0",
                "Name"
              ]
            },
            "referencetotransformerrootstackS3DeploymentBucket7592718ARef": {
              "Ref": "S3DeploymentBucket"
            },
            "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref": {
              "Ref": "S3DeploymentRootKey"
            }
          }
        },
        "DependsOn": [
          "GraphQLAPITransformerSchema3CB2AE18"
        ],
        "Metadata": {
          "aws:cdk:path": "transformer-root-stack/TodoTask.NestedStack/TodoTask.NestedStackResource"
        }
      },
      "Image": {
        "Type": "AWS::CloudFormation::Stack",
        "Properties": {
          "TemplateURL": {
            "Fn::Join": [
              "",
              [
                "https://s3.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/",
                {
                  "Ref": "S3DeploymentBucket"
                },
                "/",
                {
                  "Ref": "S3DeploymentRootKey"
                },
                "/stacks/Image.json"
              ]
            ]
          },
          "Parameters": {
            "DynamoDBModelTableReadIOPS": {
              "Ref": "DynamoDBModelTableReadIOPS"
            },
            "DynamoDBModelTableWriteIOPS": {
              "Ref": "DynamoDBModelTableWriteIOPS"
            },
            "DynamoDBBillingMode": {
              "Ref": "DynamoDBBillingMode"
            },
            "DynamoDBEnablePointInTimeRecovery": {
              "Ref": "DynamoDBEnablePointInTimeRecovery"
            },
            "DynamoDBEnableServerSideEncryption": {
              "Ref": "DynamoDBEnableServerSideEncryption"
            },
            "referencetotransformerrootstackenv10C5A902Ref": {
              "Ref": "env"
            },
            "referencetotransformerrootstackGraphQLAPI20497F53ApiId": {
              "Fn::GetAtt": [
                "GraphQLAPI",
                "ApiId"
              ]
            },
            "referencetotransformerrootstackS3DeploymentBucket7592718ARef": {
              "Ref": "S3DeploymentBucket"
            },
            "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref": {
              "Ref": "S3DeploymentRootKey"
            },
            "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskauth0FunctionQuerygetTodoTaskauth0FunctionAppSyncFunction5B23CDC2FunctionId": {
              "Fn::GetAtt": [
                "TodoTask",
                "Outputs.transformerrootstackTodoTaskQuerygetTodoTaskauth0FunctionQuerygetTodoTaskauth0FunctionAppSyncFunction5B23CDC2FunctionId"
              ]
            },
            "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunction2AFC2ECDFunctionId": {
              "Fn::GetAtt": [
                "TodoTask",
                "Outputs.transformerrootstackTodoTaskQuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunction2AFC2ECDFunctionId"
              ]
            },
            "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskMutationcreateTodoTaskinit0FunctionMutationcreateTodoTaskinit0FunctionAppSyncFunction6114EB8FFunctionId": {
              "Fn::GetAtt": [
                "TodoTask",
                "Outputs.transformerrootstackTodoTaskMutationcreateTodoTaskinit0FunctionMutationcreateTodoTaskinit0FunctionAppSyncFunction6114EB8FFunctionId"
              ]
            },
            "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskMutationcreateTodoTaskauth0FunctionMutationcreateTodoTaskauth0FunctionAppSyncFunction7B3960D3FunctionId": {
              "Fn::GetAtt": [
                "TodoTask",
                "Outputs.transformerrootstackTodoTaskMutationcreateTodoTaskauth0FunctionMutationcreateTodoTaskauth0FunctionAppSyncFunction7B3960D3FunctionId"
              ]
            },
            "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskMutationupdateTodoTaskinit0FunctionMutationupdateTodoTaskinit0FunctionAppSyncFunction24B1ED7DFunctionId": {
              "Fn::GetAtt": [
                "TodoTask",
                "Outputs.transformerrootstackTodoTaskMutationupdateTodoTaskinit0FunctionMutationupdateTodoTaskinit0FunctionAppSyncFunction24B1ED7DFunctionId"
              ]
            },
            "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskSubscriptiononCreateTodoTaskauth0FunctionSubscriptiononCreateTodoTaskauth0FunctionAppSyncFunctionC184A739FunctionId": {
              "Fn::GetAtt": [
                "TodoTask",
                "Outputs.transformerrootstackTodoTaskSubscriptiononCreateTodoTaskauth0FunctionSubscriptiononCreateTodoTaskauth0FunctionAppSyncFunctionC184A739FunctionId"
              ]
            },
            "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskSubscriptionOnCreateTodoTaskDataResolverFnSubscriptionOnCreateTodoTaskDataResolverFnAppSyncFunctionDD3CF02AFunctionId": {
              "Fn::GetAtt": [
                "TodoTask",
                "Outputs.transformerrootstackTodoTaskSubscriptionOnCreateTodoTaskDataResolverFnSubscriptionOnCreateTodoTaskDataResolverFnAppSyncFunctionDD3CF02AFunctionId"
              ]
            }
          }
        },
        "DependsOn": [
          "GraphQLAPITransformerSchema3CB2AE18"
        ],
        "Metadata": {
          "aws:cdk:path": "transformer-root-stack/Image.NestedStack/Image.NestedStackResource"
        }
      },
      "SharedWith": {
        "Type": "AWS::CloudFormation::Stack",
        "Properties": {
          "TemplateURL": {
            "Fn::Join": [
              "",
              [
                "https://s3.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/",
                {
                  "Ref": "S3DeploymentBucket"
                },
                "/",
                {
                  "Ref": "S3DeploymentRootKey"
                },
                "/stacks/SharedWith.json"
              ]
            ]
          },
          "Parameters": {
            "DynamoDBModelTableReadIOPS": {
              "Ref": "DynamoDBModelTableReadIOPS"
            },
            "DynamoDBModelTableWriteIOPS": {
              "Ref": "DynamoDBModelTableWriteIOPS"
            },
            "DynamoDBBillingMode": {
              "Ref": "DynamoDBBillingMode"
            },
            "DynamoDBEnablePointInTimeRecovery": {
              "Ref": "DynamoDBEnablePointInTimeRecovery"
            },
            "DynamoDBEnableServerSideEncryption": {
              "Ref": "DynamoDBEnableServerSideEncryption"
            },
            "referencetotransformerrootstackenv10C5A902Ref": {
              "Ref": "env"
            },
            "referencetotransformerrootstackGraphQLAPI20497F53ApiId": {
              "Fn::GetAtt": [
                "GraphQLAPI",
                "ApiId"
              ]
            },
            "referencetotransformerrootstackS3DeploymentBucket7592718ARef": {
              "Ref": "S3DeploymentBucket"
            },
            "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref": {
              "Ref": "S3DeploymentRootKey"
            },
            "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskauth0FunctionQuerygetTodoTaskauth0FunctionAppSyncFunction5B23CDC2FunctionId": {
              "Fn::GetAtt": [
                "TodoTask",
                "Outputs.transformerrootstackTodoTaskQuerygetTodoTaskauth0FunctionQuerygetTodoTaskauth0FunctionAppSyncFunction5B23CDC2FunctionId"
              ]
            },
            "referencetotransformerrootstackTodoTaskNestedStackTodoTaskNestedStackResourceB67A6D50OutputstransformerrootstackTodoTaskQuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunction2AFC2ECDFunctionId": {
              "Fn::GetAtt": [
                "TodoTask",
                "Outputs.transformerrootstackTodoTaskQuerygetTodoTaskpostAuth0FunctionQuerygetTodoTaskpostAuth0FunctionAppSyncFunction2AFC2ECDFunctionId"
              ]
            }
          }
        },
        "DependsOn": [
          "GraphQLAPITransformerSchema3CB2AE18"
        ],
        "Metadata": {
          "aws:cdk:path": "transformer-root-stack/SharedWith.NestedStack/SharedWith.NestedStackResource"
        }
      },
      "FunctionDirectiveStack": {
        "Type": "AWS::CloudFormation::Stack",
        "Properties": {
          "TemplateURL": {
            "Fn::Join": [
              "",
              [
                "https://s3.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/",
                {
                  "Ref": "S3DeploymentBucket"
                },
                "/",
                {
                  "Ref": "S3DeploymentRootKey"
                },
                "/stacks/FunctionDirectiveStack.json"
              ]
            ]
          },
          "Parameters": {
            "referencetotransformerrootstackenv10C5A902Ref": {
              "Ref": "env"
            },
            "referencetotransformerrootstackGraphQLAPI20497F53ApiId": {
              "Fn::GetAtt": [
                "GraphQLAPI",
                "ApiId"
              ]
            },
            "referencetotransformerrootstackS3DeploymentBucket7592718ARef": {
              "Ref": "S3DeploymentBucket"
            },
            "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref": {
              "Ref": "S3DeploymentRootKey"
            }
          }
        },
        "DependsOn": [
          "GraphQLAPITransformerSchema3CB2AE18"
        ],
        "Metadata": {
          "aws:cdk:path": "transformer-root-stack/FunctionDirectiveStack.NestedStack/FunctionDirectiveStack.NestedStackResource"
        }
      },
      "ConnectionStack": {
        "Type": "AWS::CloudFormation::Stack",
        "Properties": {
          "TemplateURL": {
            "Fn::Join": [
              "",
              [
                "https://s3.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/",
                {
                  "Ref": "S3DeploymentBucket"
                },
                "/",
                {
                  "Ref": "S3DeploymentRootKey"
                },
                "/stacks/ConnectionStack.json"
              ]
            ]
          },
          "Parameters": {
            "referencetotransformerrootstackGraphQLAPI20497F53ApiId": {
              "Fn::GetAtt": [
                "GraphQLAPI",
                "ApiId"
              ]
            },
            "referencetotransformerrootstackGraphQLAPINONEDS2BA9D1C8Name": {
              "Fn::GetAtt": [
                "GraphQLAPINONEDS95A13CF0",
                "Name"
              ]
            },
            "referencetotransformerrootstackS3DeploymentBucket7592718ARef": {
              "Ref": "S3DeploymentBucket"
            },
            "referencetotransformerrootstackS3DeploymentRootKeyA71EA735Ref": {
              "Ref": "S3DeploymentRootKey"
            },
            "referencetotransformerrootstackImageNestedStackImageNestedStackResource64DE1EC9OutputstransformerrootstackImageImageDataSource209AC79DName": {
              "Fn::GetAtt": [
                "Image",
                "Outputs.transformerrootstackImageImageDataSource209AC79DName"
              ]
            },
            "referencetotransformerrootstackImageNestedStackImageNestedStackResource64DE1EC9OutputstransformerrootstackImageImageTable573568D3Ref": {
              "Fn::GetAtt": [
                "Image",
                "Outputs.transformerrootstackImageImageTable573568D3Ref"
              ]
            },
            "referencetotransformerrootstackSharedWithNestedStackSharedWithNestedStackResourceCA833E8EOutputstransformerrootstackSharedWithSharedWithDataSource3B49FDD2Name": {
              "Fn::GetAtt": [
                "SharedWith",
                "Outputs.transformerrootstackSharedWithSharedWithDataSource3B49FDD2Name"
              ]
            },
            "referencetotransformerrootstackSharedWithNestedStackSharedWithNestedStackResourceCA833E8EOutputstransformerrootstackSharedWithSharedWithTable8942F526Ref": {
              "Fn::GetAtt": [
                "SharedWith",
                "Outputs.transformerrootstackSharedWithSharedWithTable8942F526Ref"
              ]
            }
          }
        },
        "DependsOn": [
          "GraphQLAPITransformerSchema3CB2AE18",
          "Image",
          "SharedWith"
        ],
        "Metadata": {
          "aws:cdk:path": "transformer-root-stack/ConnectionStack.NestedStack/ConnectionStack.NestedStackResource"
        }
      },
      "CDKMetadata": {
        "Type": "AWS::CDK::Metadata",
        "Properties": {
          "Analytics": "v2:deflate64:H4sIAAAAAAAA/02Pyw6CMBBFv8V9KdaQuFUxcaHxAV8wKWMoSFv70BDCv9tigq7m3pOTmQyjbJXR5WIDb5vwqk0HrgzSoXTAW5Lf5RUMdOjQkFxJ64znLuKLd9pPaTYLtMobjjEHtxJOKDmSuBi0tr3kdDgY0PXzsdViB3YyJ3I7BfLXSl5jBxEEfsSenJXEPTgo5wu/No5EqgppY9MXyyhbh3caK0RivHSiQ1p85wc5MW9T6wAAAA=="
        },
        "Metadata": {
          "aws:cdk:path": "transformer-root-stack/CDKMetadata/Default"
        },
        "Condition": "CDKMetadataAvailable"
      }
    },
    "Outputs": {
      "GraphQLAPIKeyOutput": {
        "Description": "Your GraphQL API ID.",
        "Value": {
          "Fn::GetAtt": [
            "GraphQLAPIDefaultApiKey215A6DD7",
            "ApiKey"
          ]
        },
        "Export": {
          "Name": {
            "Fn::Join": [
              ":",
              [
                {
                  "Ref": "AWS::StackName"
                },
                "GraphQLApiKey"
              ]
            ]
          }
        }
      },
      "GraphQLAPIIdOutput": {
        "Description": "Your GraphQL API ID.",
        "Value": {
          "Fn::GetAtt": [
            "GraphQLAPI",
            "ApiId"
          ]
        },
        "Export": {
          "Name": {
            "Fn::Join": [
              ":",
              [
                {
                  "Ref": "AWS::StackName"
                },
                "GraphQLApiId"
              ]
            ]
          }
        }
      },
      "GraphQLAPIEndpointOutput": {
        "Description": "Your GraphQL API endpoint.",
        "Value": {
          "Fn::GetAtt": [
            "GraphQLAPI",
            "GraphQLUrl"
          ]
        },
        "Export": {
          "Name": {
            "Fn::Join": [
              ":",
              [
                {
                  "Ref": "AWS::StackName"
                },
                "GraphQLApiEndpoint"
              ]
            ]
          }
        }
      }
    },
    "Conditions": {
      "CDKMetadataAvailable": {
        "Fn::Or": [
          {
            "Fn::Or": [
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "af-south-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "ap-east-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "ap-northeast-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "ap-northeast-2"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "ap-south-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "ap-southeast-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "ap-southeast-2"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "ca-central-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "cn-north-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "cn-northwest-1"
                ]
              }
            ]
          },
          {
            "Fn::Or": [
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "eu-central-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "eu-north-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "eu-south-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "eu-west-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "eu-west-2"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "eu-west-3"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "me-south-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "sa-east-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "us-east-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "us-east-2"
                ]
              }
            ]
          },
          {
            "Fn::Or": [
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "us-west-1"
                ]
              },
              {
                "Fn::Equals": [
                  {
                    "Ref": "AWS::Region"
                  },
                  "us-west-2"
                ]
              }
            ]
          }
        ]
      }
    }
  }
}